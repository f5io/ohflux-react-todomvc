(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){
"use strict";var _slicedToArray=require("babel-runtime/helpers/sliced-to-array")["default"],_interopRequireDefault=require("babel-runtime/helpers/interop-require-default")["default"],_actions=require("./actions"),_actions2=_interopRequireDefault(_actions),_stores=require("./stores"),_stores2=_interopRequireDefault(_stores),_constants=require("./constants"),_constants2=_interopRequireDefault(_constants),_kefir=require("kefir"),_kefir2=_interopRequireDefault(_kefir),_immutable=require("immutable"),_immutable2=_interopRequireDefault(_immutable),isWorking=!1;_stores2["default"].log("todoStore"),_stores2["default"].onValue(function(_ref){var _ref2=_slicedToArray(_ref,2),contents=_ref2[0],modified=_ref2[1],todos=contents.toList().toJS(),filtered=modified.toList().toJS();if(console.log(todos.length,filtered.length),10===contents.size&&!isWorking){isWorking=!0;var temp=contents.takeLast(4).toList().toJS();temp.forEach(function(todo){_actions2["default"].toggleComplete(todo)}),_actions2["default"].setFilter(_constants2["default"].FILTER_COMPLETE),_actions2["default"].setFilter(_constants2["default"].FILTER_ALL)}});for(var i=0;10>i;i++)_actions2["default"].create("hello"+(i+1));


},{"./actions":51,"./constants":52,"./stores":72,"babel-runtime/helpers/interop-require-default":11,"babel-runtime/helpers/sliced-to-array":13,"immutable":49,"kefir":50}],2:[function(require,module,exports){
!function(global,factory){"object"==typeof exports&&"undefined"!=typeof module?module.exports=factory():"function"==typeof define&&define.amd?define(factory):global.Immutable=factory()}(this,function(){"use strict";function createClass(ctor,superClass){superClass&&(ctor.prototype=Object.create(superClass.prototype)),ctor.prototype.constructor=ctor}function MakeRef(ref){return ref.value=!1,ref}function SetRef(ref){ref&&(ref.value=!0)}function OwnerID(){}function arrCopy(arr,offset){offset=offset||0;for(var len=Math.max(0,arr.length-offset),newArr=new Array(len),ii=0;len>ii;ii++)newArr[ii]=arr[ii+offset];return newArr}function ensureSize(iter){return void 0===iter.size&&(iter.size=iter.__iterate(returnTrue)),iter.size}function wrapIndex(iter,index){return index>=0?+index:ensureSize(iter)+ +index}function returnTrue(){return!0}function wholeSlice(begin,end,size){return(0===begin||void 0!==size&&-size>=begin)&&(void 0===end||void 0!==size&&end>=size)}function resolveBegin(begin,size){return resolveIndex(begin,size,0)}function resolveEnd(end,size){return resolveIndex(end,size,size)}function resolveIndex(index,size,defaultIndex){return void 0===index?defaultIndex:0>index?Math.max(0,size+index):void 0===size?index:Math.min(size,index)}function Iterable(value){return isIterable(value)?value:Seq(value)}function KeyedIterable(value){return isKeyed(value)?value:KeyedSeq(value)}function IndexedIterable(value){return isIndexed(value)?value:IndexedSeq(value)}function SetIterable(value){return isIterable(value)&&!isAssociative(value)?value:SetSeq(value)}function isIterable(maybeIterable){return!(!maybeIterable||!maybeIterable[IS_ITERABLE_SENTINEL])}function isKeyed(maybeKeyed){return!(!maybeKeyed||!maybeKeyed[IS_KEYED_SENTINEL])}function isIndexed(maybeIndexed){return!(!maybeIndexed||!maybeIndexed[IS_INDEXED_SENTINEL])}function isAssociative(maybeAssociative){return isKeyed(maybeAssociative)||isIndexed(maybeAssociative)}function isOrdered(maybeOrdered){return!(!maybeOrdered||!maybeOrdered[IS_ORDERED_SENTINEL])}function src_Iterator__Iterator(next){this.next=next}function iteratorValue(type,k,v,iteratorResult){var value=0===type?k:1===type?v:[k,v];return iteratorResult?iteratorResult.value=value:iteratorResult={value:value,done:!1},iteratorResult}function iteratorDone(){return{value:void 0,done:!0}}function hasIterator(maybeIterable){return!!getIteratorFn(maybeIterable)}function isIterator(maybeIterator){return maybeIterator&&"function"==typeof maybeIterator.next}function getIterator(iterable){var iteratorFn=getIteratorFn(iterable);return iteratorFn&&iteratorFn.call(iterable)}function getIteratorFn(iterable){var iteratorFn=iterable&&(REAL_ITERATOR_SYMBOL&&iterable[REAL_ITERATOR_SYMBOL]||iterable[FAUX_ITERATOR_SYMBOL]);return"function"==typeof iteratorFn?iteratorFn:void 0}function isArrayLike(value){return value&&"number"==typeof value.length}function Seq(value){return null===value||void 0===value?emptySequence():isIterable(value)?value.toSeq():seqFromValue(value)}function KeyedSeq(value){return null===value||void 0===value?emptySequence().toKeyedSeq():isIterable(value)?isKeyed(value)?value.toSeq():value.fromEntrySeq():keyedSeqFromValue(value)}function IndexedSeq(value){return null===value||void 0===value?emptySequence():isIterable(value)?isKeyed(value)?value.entrySeq():value.toIndexedSeq():indexedSeqFromValue(value)}function SetSeq(value){return(null===value||void 0===value?emptySequence():isIterable(value)?isKeyed(value)?value.entrySeq():value:indexedSeqFromValue(value)).toSetSeq()}function ArraySeq(array){this._array=array,this.size=array.length}function ObjectSeq(object){var keys=Object.keys(object);this._object=object,this._keys=keys,this.size=keys.length}function IterableSeq(iterable){this._iterable=iterable,this.size=iterable.length||iterable.size}function IteratorSeq(iterator){this._iterator=iterator,this._iteratorCache=[]}function isSeq(maybeSeq){return!(!maybeSeq||!maybeSeq[IS_SEQ_SENTINEL])}function emptySequence(){return EMPTY_SEQ||(EMPTY_SEQ=new ArraySeq([]))}function keyedSeqFromValue(value){var seq=Array.isArray(value)?new ArraySeq(value).fromEntrySeq():isIterator(value)?new IteratorSeq(value).fromEntrySeq():hasIterator(value)?new IterableSeq(value).fromEntrySeq():"object"==typeof value?new ObjectSeq(value):void 0;if(!seq)throw new TypeError("Expected Array or iterable object of [k, v] entries, or keyed object: "+value);return seq}function indexedSeqFromValue(value){var seq=maybeIndexedSeqFromValue(value);if(!seq)throw new TypeError("Expected Array or iterable object of values: "+value);return seq}function seqFromValue(value){var seq=maybeIndexedSeqFromValue(value)||"object"==typeof value&&new ObjectSeq(value);if(!seq)throw new TypeError("Expected Array or iterable object of values, or keyed object: "+value);return seq}function maybeIndexedSeqFromValue(value){return isArrayLike(value)?new ArraySeq(value):isIterator(value)?new IteratorSeq(value):hasIterator(value)?new IterableSeq(value):void 0}function seqIterate(seq,fn,reverse,useKeys){var cache=seq._cache;if(cache){for(var maxIndex=cache.length-1,ii=0;maxIndex>=ii;ii++){var entry=cache[reverse?maxIndex-ii:ii];if(fn(entry[1],useKeys?entry[0]:ii,seq)===!1)return ii+1}return ii}return seq.__iterateUncached(fn,reverse)}function seqIterator(seq,type,reverse,useKeys){var cache=seq._cache;if(cache){var maxIndex=cache.length-1,ii=0;return new src_Iterator__Iterator(function(){var entry=cache[reverse?maxIndex-ii:ii];return ii++>maxIndex?iteratorDone():iteratorValue(type,useKeys?entry[0]:ii-1,entry[1])})}return seq.__iteratorUncached(type,reverse)}function Collection(){throw TypeError("Abstract")}function KeyedCollection(){}function IndexedCollection(){}function SetCollection(){}function is(valueA,valueB){if(valueA===valueB||valueA!==valueA&&valueB!==valueB)return!0;if(!valueA||!valueB)return!1;if("function"==typeof valueA.valueOf&&"function"==typeof valueB.valueOf){if(valueA=valueA.valueOf(),valueB=valueB.valueOf(),valueA===valueB||valueA!==valueA&&valueB!==valueB)return!0;if(!valueA||!valueB)return!1}return"function"==typeof valueA.equals&&"function"==typeof valueB.equals&&valueA.equals(valueB)?!0:!1}function fromJS(json,converter){return converter?fromJSWith(converter,json,"",{"":json}):fromJSDefault(json)}function fromJSWith(converter,json,key,parentJSON){return Array.isArray(json)?converter.call(parentJSON,key,IndexedSeq(json).map(function(v,k){return fromJSWith(converter,v,k,json)})):isPlainObj(json)?converter.call(parentJSON,key,KeyedSeq(json).map(function(v,k){return fromJSWith(converter,v,k,json)})):json}function fromJSDefault(json){return Array.isArray(json)?IndexedSeq(json).map(fromJSDefault).toList():isPlainObj(json)?KeyedSeq(json).map(fromJSDefault).toMap():json}function isPlainObj(value){return value&&(value.constructor===Object||void 0===value.constructor)}function smi(i32){return i32>>>1&1073741824|3221225471&i32}function hash(o){if(o===!1||null===o||void 0===o)return 0;if("function"==typeof o.valueOf&&(o=o.valueOf(),o===!1||null===o||void 0===o))return 0;if(o===!0)return 1;var type=typeof o;if("number"===type){var h=0|o;for(h!==o&&(h^=4294967295*o);o>4294967295;)o/=4294967295,h^=o;return smi(h)}return"string"===type?o.length>STRING_HASH_CACHE_MIN_STRLEN?cachedHashString(o):hashString(o):"function"==typeof o.hashCode?o.hashCode():hashJSObj(o)}function cachedHashString(string){var hash=stringHashCache[string];return void 0===hash&&(hash=hashString(string),STRING_HASH_CACHE_SIZE===STRING_HASH_CACHE_MAX_SIZE&&(STRING_HASH_CACHE_SIZE=0,stringHashCache={}),STRING_HASH_CACHE_SIZE++,stringHashCache[string]=hash),hash}function hashString(string){for(var hash=0,ii=0;ii<string.length;ii++)hash=31*hash+string.charCodeAt(ii)|0;return smi(hash)}function hashJSObj(obj){var hash;if(usingWeakMap&&(hash=weakMap.get(obj),void 0!==hash))return hash;if(hash=obj[UID_HASH_KEY],void 0!==hash)return hash;if(!canDefineProperty){if(hash=obj.propertyIsEnumerable&&obj.propertyIsEnumerable[UID_HASH_KEY],void 0!==hash)return hash;if(hash=getIENodeHash(obj),void 0!==hash)return hash}if(hash=++objHashUID,1073741824&objHashUID&&(objHashUID=0),usingWeakMap)weakMap.set(obj,hash);else{if(void 0!==isExtensible&&isExtensible(obj)===!1)throw new Error("Non-extensible objects are not allowed as keys.");if(canDefineProperty)Object.defineProperty(obj,UID_HASH_KEY,{enumerable:!1,configurable:!1,writable:!1,value:hash});else if(void 0!==obj.propertyIsEnumerable&&obj.propertyIsEnumerable===obj.constructor.prototype.propertyIsEnumerable)obj.propertyIsEnumerable=function(){return this.constructor.prototype.propertyIsEnumerable.apply(this,arguments)},obj.propertyIsEnumerable[UID_HASH_KEY]=hash;else{if(void 0===obj.nodeType)throw new Error("Unable to set a non-enumerable property on object.");obj[UID_HASH_KEY]=hash}}return hash}function getIENodeHash(node){if(node&&node.nodeType>0)switch(node.nodeType){case 1:return node.uniqueID;case 9:return node.documentElement&&node.documentElement.uniqueID}}function invariant(condition,error){if(!condition)throw new Error(error)}function assertNotInfinite(size){invariant(size!==1/0,"Cannot perform this action with an infinite size.")}function ToKeyedSequence(indexed,useKeys){this._iter=indexed,this._useKeys=useKeys,this.size=indexed.size}function ToIndexedSequence(iter){this._iter=iter,this.size=iter.size}function ToSetSequence(iter){this._iter=iter,this.size=iter.size}function FromEntriesSequence(entries){this._iter=entries,this.size=entries.size}function flipFactory(iterable){var flipSequence=makeSequence(iterable);return flipSequence._iter=iterable,flipSequence.size=iterable.size,flipSequence.flip=function(){return iterable},flipSequence.reverse=function(){var reversedSequence=iterable.reverse.apply(this);return reversedSequence.flip=function(){return iterable.reverse()},reversedSequence},flipSequence.has=function(key){return iterable.includes(key)},flipSequence.includes=function(key){return iterable.has(key)},flipSequence.cacheResult=cacheResultThrough,flipSequence.__iterateUncached=function(fn,reverse){var this$0=this;return iterable.__iterate(function(v,k){return fn(k,v,this$0)!==!1},reverse)},flipSequence.__iteratorUncached=function(type,reverse){if(type===ITERATE_ENTRIES){var iterator=iterable.__iterator(type,reverse);return new src_Iterator__Iterator(function(){var step=iterator.next();if(!step.done){var k=step.value[0];step.value[0]=step.value[1],step.value[1]=k}return step})}return iterable.__iterator(type===ITERATE_VALUES?ITERATE_KEYS:ITERATE_VALUES,reverse)},flipSequence}function mapFactory(iterable,mapper,context){var mappedSequence=makeSequence(iterable);return mappedSequence.size=iterable.size,mappedSequence.has=function(key){return iterable.has(key)},mappedSequence.get=function(key,notSetValue){var v=iterable.get(key,NOT_SET);return v===NOT_SET?notSetValue:mapper.call(context,v,key,iterable)},mappedSequence.__iterateUncached=function(fn,reverse){var this$0=this;return iterable.__iterate(function(v,k,c){return fn(mapper.call(context,v,k,c),k,this$0)!==!1},reverse)},mappedSequence.__iteratorUncached=function(type,reverse){var iterator=iterable.__iterator(ITERATE_ENTRIES,reverse);return new src_Iterator__Iterator(function(){var step=iterator.next();if(step.done)return step;var entry=step.value,key=entry[0];return iteratorValue(type,key,mapper.call(context,entry[1],key,iterable),step)})},mappedSequence}function reverseFactory(iterable,useKeys){var reversedSequence=makeSequence(iterable);return reversedSequence._iter=iterable,reversedSequence.size=iterable.size,reversedSequence.reverse=function(){return iterable},iterable.flip&&(reversedSequence.flip=function(){var flipSequence=flipFactory(iterable);return flipSequence.reverse=function(){return iterable.flip()},flipSequence}),reversedSequence.get=function(key,notSetValue){return iterable.get(useKeys?key:-1-key,notSetValue)},reversedSequence.has=function(key){return iterable.has(useKeys?key:-1-key)},reversedSequence.includes=function(value){return iterable.includes(value)},reversedSequence.cacheResult=cacheResultThrough,reversedSequence.__iterate=function(fn,reverse){var this$0=this;return iterable.__iterate(function(v,k){return fn(v,k,this$0)},!reverse)},reversedSequence.__iterator=function(type,reverse){return iterable.__iterator(type,!reverse)},reversedSequence}function filterFactory(iterable,predicate,context,useKeys){var filterSequence=makeSequence(iterable);return useKeys&&(filterSequence.has=function(key){var v=iterable.get(key,NOT_SET);return v!==NOT_SET&&!!predicate.call(context,v,key,iterable)},filterSequence.get=function(key,notSetValue){var v=iterable.get(key,NOT_SET);return v!==NOT_SET&&predicate.call(context,v,key,iterable)?v:notSetValue}),filterSequence.__iterateUncached=function(fn,reverse){var this$0=this,iterations=0;return iterable.__iterate(function(v,k,c){return predicate.call(context,v,k,c)?(iterations++,fn(v,useKeys?k:iterations-1,this$0)):void 0},reverse),iterations},filterSequence.__iteratorUncached=function(type,reverse){var iterator=iterable.__iterator(ITERATE_ENTRIES,reverse),iterations=0;return new src_Iterator__Iterator(function(){for(;;){var step=iterator.next();if(step.done)return step;var entry=step.value,key=entry[0],value=entry[1];if(predicate.call(context,value,key,iterable))return iteratorValue(type,useKeys?key:iterations++,value,step)}})},filterSequence}function countByFactory(iterable,grouper,context){var groups=src_Map__Map().asMutable();return iterable.__iterate(function(v,k){groups.update(grouper.call(context,v,k,iterable),0,function(a){return a+1})}),groups.asImmutable()}function groupByFactory(iterable,grouper,context){var isKeyedIter=isKeyed(iterable),groups=(isOrdered(iterable)?OrderedMap():src_Map__Map()).asMutable();iterable.__iterate(function(v,k){groups.update(grouper.call(context,v,k,iterable),function(a){return a=a||[],a.push(isKeyedIter?[k,v]:v),a})});var coerce=iterableClass(iterable);return groups.map(function(arr){return reify(iterable,coerce(arr))})}function sliceFactory(iterable,begin,end,useKeys){var originalSize=iterable.size;if(wholeSlice(begin,end,originalSize))return iterable;var resolvedBegin=resolveBegin(begin,originalSize),resolvedEnd=resolveEnd(end,originalSize);if(resolvedBegin!==resolvedBegin||resolvedEnd!==resolvedEnd)return sliceFactory(iterable.toSeq().cacheResult(),begin,end,useKeys);var sliceSize,resolvedSize=resolvedEnd-resolvedBegin;resolvedSize===resolvedSize&&(sliceSize=0>resolvedSize?0:resolvedSize);var sliceSeq=makeSequence(iterable);return sliceSeq.size=sliceSize,!useKeys&&isSeq(iterable)&&sliceSize>=0&&(sliceSeq.get=function(index,notSetValue){return index=wrapIndex(this,index),index>=0&&sliceSize>index?iterable.get(index+resolvedBegin,notSetValue):notSetValue}),sliceSeq.__iterateUncached=function(fn,reverse){var this$0=this;if(0===sliceSize)return 0;if(reverse)return this.cacheResult().__iterate(fn,reverse);var skipped=0,isSkipping=!0,iterations=0;return iterable.__iterate(function(v,k){return isSkipping&&(isSkipping=skipped++<resolvedBegin)?void 0:(iterations++,fn(v,useKeys?k:iterations-1,this$0)!==!1&&iterations!==sliceSize)}),iterations},sliceSeq.__iteratorUncached=function(type,reverse){if(0!==sliceSize&&reverse)return this.cacheResult().__iterator(type,reverse);var iterator=0!==sliceSize&&iterable.__iterator(type,reverse),skipped=0,iterations=0;return new src_Iterator__Iterator(function(){for(;skipped++<resolvedBegin;)iterator.next();if(++iterations>sliceSize)return iteratorDone();var step=iterator.next();return useKeys||type===ITERATE_VALUES?step:type===ITERATE_KEYS?iteratorValue(type,iterations-1,void 0,step):iteratorValue(type,iterations-1,step.value[1],step)})},sliceSeq}function takeWhileFactory(iterable,predicate,context){var takeSequence=makeSequence(iterable);return takeSequence.__iterateUncached=function(fn,reverse){var this$0=this;if(reverse)return this.cacheResult().__iterate(fn,reverse);var iterations=0;return iterable.__iterate(function(v,k,c){return predicate.call(context,v,k,c)&&++iterations&&fn(v,k,this$0)}),iterations},takeSequence.__iteratorUncached=function(type,reverse){var this$0=this;if(reverse)return this.cacheResult().__iterator(type,reverse);var iterator=iterable.__iterator(ITERATE_ENTRIES,reverse),iterating=!0;return new src_Iterator__Iterator(function(){if(!iterating)return iteratorDone();var step=iterator.next();if(step.done)return step;var entry=step.value,k=entry[0],v=entry[1];return predicate.call(context,v,k,this$0)?type===ITERATE_ENTRIES?step:iteratorValue(type,k,v,step):(iterating=!1,iteratorDone())})},takeSequence}function skipWhileFactory(iterable,predicate,context,useKeys){var skipSequence=makeSequence(iterable);return skipSequence.__iterateUncached=function(fn,reverse){var this$0=this;if(reverse)return this.cacheResult().__iterate(fn,reverse);var isSkipping=!0,iterations=0;return iterable.__iterate(function(v,k,c){return isSkipping&&(isSkipping=predicate.call(context,v,k,c))?void 0:(iterations++,fn(v,useKeys?k:iterations-1,this$0))}),iterations},skipSequence.__iteratorUncached=function(type,reverse){var this$0=this;if(reverse)return this.cacheResult().__iterator(type,reverse);var iterator=iterable.__iterator(ITERATE_ENTRIES,reverse),skipping=!0,iterations=0;return new src_Iterator__Iterator(function(){var step,k,v;do{if(step=iterator.next(),step.done)return useKeys||type===ITERATE_VALUES?step:type===ITERATE_KEYS?iteratorValue(type,iterations++,void 0,step):iteratorValue(type,iterations++,step.value[1],step);var entry=step.value;k=entry[0],v=entry[1],skipping&&(skipping=predicate.call(context,v,k,this$0))}while(skipping);return type===ITERATE_ENTRIES?step:iteratorValue(type,k,v,step)})},skipSequence}function concatFactory(iterable,values){var isKeyedIterable=isKeyed(iterable),iters=[iterable].concat(values).map(function(v){return isIterable(v)?isKeyedIterable&&(v=KeyedIterable(v)):v=isKeyedIterable?keyedSeqFromValue(v):indexedSeqFromValue(Array.isArray(v)?v:[v]),v}).filter(function(v){return 0!==v.size});if(0===iters.length)return iterable;if(1===iters.length){var singleton=iters[0];if(singleton===iterable||isKeyedIterable&&isKeyed(singleton)||isIndexed(iterable)&&isIndexed(singleton))return singleton}var concatSeq=new ArraySeq(iters);return isKeyedIterable?concatSeq=concatSeq.toKeyedSeq():isIndexed(iterable)||(concatSeq=concatSeq.toSetSeq()),concatSeq=concatSeq.flatten(!0),concatSeq.size=iters.reduce(function(sum,seq){if(void 0!==sum){var size=seq.size;if(void 0!==size)return sum+size}},0),concatSeq}function flattenFactory(iterable,depth,useKeys){var flatSequence=makeSequence(iterable);return flatSequence.__iterateUncached=function(fn,reverse){function flatDeep(iter,currentDepth){var this$0=this;iter.__iterate(function(v,k){return(!depth||depth>currentDepth)&&isIterable(v)?flatDeep(v,currentDepth+1):fn(v,useKeys?k:iterations++,this$0)===!1&&(stopped=!0),!stopped},reverse)}var iterations=0,stopped=!1;return flatDeep(iterable,0),iterations},flatSequence.__iteratorUncached=function(type,reverse){var iterator=iterable.__iterator(type,reverse),stack=[],iterations=0;return new src_Iterator__Iterator(function(){for(;iterator;){var step=iterator.next();if(step.done===!1){var v=step.value;if(type===ITERATE_ENTRIES&&(v=v[1]),depth&&!(stack.length<depth)||!isIterable(v))return useKeys?step:iteratorValue(type,iterations++,v,step);stack.push(iterator),iterator=v.__iterator(type,reverse)}else iterator=stack.pop()}return iteratorDone()})},flatSequence}function flatMapFactory(iterable,mapper,context){var coerce=iterableClass(iterable);return iterable.toSeq().map(function(v,k){return coerce(mapper.call(context,v,k,iterable))}).flatten(!0)}function interposeFactory(iterable,separator){var interposedSequence=makeSequence(iterable);return interposedSequence.size=iterable.size&&2*iterable.size-1,interposedSequence.__iterateUncached=function(fn,reverse){var this$0=this,iterations=0;return iterable.__iterate(function(v,k){return(!iterations||fn(separator,iterations++,this$0)!==!1)&&fn(v,iterations++,this$0)!==!1},reverse),iterations},interposedSequence.__iteratorUncached=function(type,reverse){var step,iterator=iterable.__iterator(ITERATE_VALUES,reverse),iterations=0;return new src_Iterator__Iterator(function(){return(!step||iterations%2)&&(step=iterator.next(),step.done)?step:iterations%2?iteratorValue(type,iterations++,separator):iteratorValue(type,iterations++,step.value,step)})},interposedSequence}function sortFactory(iterable,comparator,mapper){comparator||(comparator=defaultComparator);var isKeyedIterable=isKeyed(iterable),index=0,entries=iterable.toSeq().map(function(v,k){return[k,v,index++,mapper?mapper(v,k,iterable):v]}).toArray();return entries.sort(function(a,b){return comparator(a[3],b[3])||a[2]-b[2]}).forEach(isKeyedIterable?function(v,i){entries[i].length=2}:function(v,i){entries[i]=v[1]}),isKeyedIterable?KeyedSeq(entries):isIndexed(iterable)?IndexedSeq(entries):SetSeq(entries)}function maxFactory(iterable,comparator,mapper){if(comparator||(comparator=defaultComparator),mapper){var entry=iterable.toSeq().map(function(v,k){return[v,mapper(v,k,iterable)]}).reduce(function(a,b){return maxCompare(comparator,a[1],b[1])?b:a});return entry&&entry[0]}return iterable.reduce(function(a,b){return maxCompare(comparator,a,b)?b:a})}function maxCompare(comparator,a,b){var comp=comparator(b,a);return 0===comp&&b!==a&&(void 0===b||null===b||b!==b)||comp>0}function zipWithFactory(keyIter,zipper,iters){var zipSequence=makeSequence(keyIter);return zipSequence.size=new ArraySeq(iters).map(function(i){return i.size}).min(),zipSequence.__iterate=function(fn,reverse){for(var step,iterator=this.__iterator(ITERATE_VALUES,reverse),iterations=0;!(step=iterator.next()).done&&fn(step.value,iterations++,this)!==!1;);return iterations},zipSequence.__iteratorUncached=function(type,reverse){var iterators=iters.map(function(i){return i=Iterable(i),getIterator(reverse?i.reverse():i)}),iterations=0,isDone=!1;return new src_Iterator__Iterator(function(){var steps;return isDone||(steps=iterators.map(function(i){return i.next()}),isDone=steps.some(function(s){return s.done})),isDone?iteratorDone():iteratorValue(type,iterations++,zipper.apply(null,steps.map(function(s){return s.value})))})},zipSequence}function reify(iter,seq){return isSeq(iter)?seq:iter.constructor(seq)}function validateEntry(entry){if(entry!==Object(entry))throw new TypeError("Expected [K, V] tuple: "+entry)}function resolveSize(iter){return assertNotInfinite(iter.size),ensureSize(iter)}function iterableClass(iterable){return isKeyed(iterable)?KeyedIterable:isIndexed(iterable)?IndexedIterable:SetIterable}function makeSequence(iterable){return Object.create((isKeyed(iterable)?KeyedSeq:isIndexed(iterable)?IndexedSeq:SetSeq).prototype)}function cacheResultThrough(){return this._iter.cacheResult?(this._iter.cacheResult(),this.size=this._iter.size,this):Seq.prototype.cacheResult.call(this)}function defaultComparator(a,b){return a>b?1:b>a?-1:0}function forceIterator(keyPath){var iter=getIterator(keyPath);if(!iter){if(!isArrayLike(keyPath))throw new TypeError("Expected iterable or array-like: "+keyPath);iter=getIterator(Iterable(keyPath))}return iter}function src_Map__Map(value){return null===value||void 0===value?emptyMap():isMap(value)?value:emptyMap().withMutations(function(map){var iter=KeyedIterable(value);assertNotInfinite(iter.size),iter.forEach(function(v,k){return map.set(k,v)})})}function isMap(maybeMap){return!(!maybeMap||!maybeMap[IS_MAP_SENTINEL])}function ArrayMapNode(ownerID,entries){this.ownerID=ownerID,this.entries=entries}function BitmapIndexedNode(ownerID,bitmap,nodes){this.ownerID=ownerID,this.bitmap=bitmap,this.nodes=nodes}function HashArrayMapNode(ownerID,count,nodes){this.ownerID=ownerID,this.count=count,this.nodes=nodes}function HashCollisionNode(ownerID,keyHash,entries){this.ownerID=ownerID,this.keyHash=keyHash,this.entries=entries}function ValueNode(ownerID,keyHash,entry){this.ownerID=ownerID,this.keyHash=keyHash,this.entry=entry}function MapIterator(map,type,reverse){this._type=type,this._reverse=reverse,this._stack=map._root&&mapIteratorFrame(map._root)}function mapIteratorValue(type,entry){return iteratorValue(type,entry[0],entry[1])}function mapIteratorFrame(node,prev){return{node:node,index:0,__prev:prev}}function makeMap(size,root,ownerID,hash){var map=Object.create(MapPrototype);return map.size=size,map._root=root,map.__ownerID=ownerID,map.__hash=hash,map.__altered=!1,map}function emptyMap(){return EMPTY_MAP||(EMPTY_MAP=makeMap(0))}function updateMap(map,k,v){var newRoot,newSize;if(map._root){var didChangeSize=MakeRef(CHANGE_LENGTH),didAlter=MakeRef(DID_ALTER);if(newRoot=updateNode(map._root,map.__ownerID,0,void 0,k,v,didChangeSize,didAlter),!didAlter.value)return map;newSize=map.size+(didChangeSize.value?v===NOT_SET?-1:1:0)}else{if(v===NOT_SET)return map;newSize=1,newRoot=new ArrayMapNode(map.__ownerID,[[k,v]])}return map.__ownerID?(map.size=newSize,map._root=newRoot,map.__hash=void 0,map.__altered=!0,map):newRoot?makeMap(newSize,newRoot):emptyMap()}function updateNode(node,ownerID,shift,keyHash,key,value,didChangeSize,didAlter){return node?node.update(ownerID,shift,keyHash,key,value,didChangeSize,didAlter):value===NOT_SET?node:(SetRef(didAlter),SetRef(didChangeSize),new ValueNode(ownerID,keyHash,[key,value]))}function isLeafNode(node){return node.constructor===ValueNode||node.constructor===HashCollisionNode}function mergeIntoNode(node,ownerID,shift,keyHash,entry){if(node.keyHash===keyHash)return new HashCollisionNode(ownerID,keyHash,[node.entry,entry]);var newNode,idx1=(0===shift?node.keyHash:node.keyHash>>>shift)&MASK,idx2=(0===shift?keyHash:keyHash>>>shift)&MASK,nodes=idx1===idx2?[mergeIntoNode(node,ownerID,shift+SHIFT,keyHash,entry)]:(newNode=new ValueNode(ownerID,keyHash,entry),idx2>idx1?[node,newNode]:[newNode,node]);return new BitmapIndexedNode(ownerID,1<<idx1|1<<idx2,nodes)}function createNodes(ownerID,entries,key,value){ownerID||(ownerID=new OwnerID);for(var node=new ValueNode(ownerID,hash(key),[key,value]),ii=0;ii<entries.length;ii++){var entry=entries[ii];node=node.update(ownerID,0,void 0,entry[0],entry[1])}return node}function packNodes(ownerID,nodes,count,excluding){for(var bitmap=0,packedII=0,packedNodes=new Array(count),ii=0,bit=1,len=nodes.length;len>ii;ii++,bit<<=1){var node=nodes[ii];void 0!==node&&ii!==excluding&&(bitmap|=bit,packedNodes[packedII++]=node)}return new BitmapIndexedNode(ownerID,bitmap,packedNodes)}function expandNodes(ownerID,nodes,bitmap,including,node){for(var count=0,expandedNodes=new Array(SIZE),ii=0;0!==bitmap;ii++,bitmap>>>=1)expandedNodes[ii]=1&bitmap?nodes[count++]:void 0;return expandedNodes[including]=node,new HashArrayMapNode(ownerID,count+1,expandedNodes)}function mergeIntoMapWith(map,merger,iterables){for(var iters=[],ii=0;ii<iterables.length;ii++){var value=iterables[ii],iter=KeyedIterable(value);isIterable(value)||(iter=iter.map(function(v){return fromJS(v)})),iters.push(iter)}return mergeIntoCollectionWith(map,merger,iters)}function deepMerger(merger){return function(existing,value,key){return existing&&existing.mergeDeepWith&&isIterable(value)?existing.mergeDeepWith(merger,value):merger?merger(existing,value,key):value}}function mergeIntoCollectionWith(collection,merger,iters){return iters=iters.filter(function(x){return 0!==x.size}),0===iters.length?collection:0!==collection.size||collection.__ownerID||1!==iters.length?collection.withMutations(function(collection){for(var mergeIntoMap=merger?function(value,key){collection.update(key,NOT_SET,function(existing){return existing===NOT_SET?value:merger(existing,value,key)})}:function(value,key){collection.set(key,value)},ii=0;ii<iters.length;ii++)iters[ii].forEach(mergeIntoMap)}):collection.constructor(iters[0])}function updateInDeepMap(existing,keyPathIter,notSetValue,updater){var isNotSet=existing===NOT_SET,step=keyPathIter.next();if(step.done){var existingValue=isNotSet?notSetValue:existing,newValue=updater(existingValue);return newValue===existingValue?existing:newValue}invariant(isNotSet||existing&&existing.set,"invalid keyPath");var key=step.value,nextExisting=isNotSet?NOT_SET:existing.get(key,NOT_SET),nextUpdated=updateInDeepMap(nextExisting,keyPathIter,notSetValue,updater);return nextUpdated===nextExisting?existing:nextUpdated===NOT_SET?existing.remove(key):(isNotSet?emptyMap():existing).set(key,nextUpdated)}function popCount(x){return x-=x>>1&1431655765,x=(858993459&x)+(x>>2&858993459),x=x+(x>>4)&252645135,x+=x>>8,x+=x>>16,127&x}function setIn(array,idx,val,canEdit){var newArray=canEdit?array:arrCopy(array);return newArray[idx]=val,newArray}function spliceIn(array,idx,val,canEdit){var newLen=array.length+1;if(canEdit&&idx+1===newLen)return array[idx]=val,array;for(var newArray=new Array(newLen),after=0,ii=0;newLen>ii;ii++)ii===idx?(newArray[ii]=val,after=-1):newArray[ii]=array[ii+after];return newArray}function spliceOut(array,idx,canEdit){var newLen=array.length-1;if(canEdit&&idx===newLen)return array.pop(),array;for(var newArray=new Array(newLen),after=0,ii=0;newLen>ii;ii++)ii===idx&&(after=1),newArray[ii]=array[ii+after];return newArray}function List(value){var empty=emptyList();if(null===value||void 0===value)return empty;if(isList(value))return value;var iter=IndexedIterable(value),size=iter.size;return 0===size?empty:(assertNotInfinite(size),size>0&&SIZE>size?makeList(0,size,SHIFT,null,new VNode(iter.toArray())):empty.withMutations(function(list){list.setSize(size),iter.forEach(function(v,i){return list.set(i,v)})}))}function isList(maybeList){return!(!maybeList||!maybeList[IS_LIST_SENTINEL])}function VNode(array,ownerID){this.array=array,this.ownerID=ownerID}function iterateList(list,reverse){function iterateNodeOrLeaf(node,level,offset){return 0===level?iterateLeaf(node,offset):iterateNode(node,level,offset)}function iterateLeaf(node,offset){var array=offset===tailPos?tail&&tail.array:node&&node.array,from=offset>left?0:left-offset,to=right-offset;return to>SIZE&&(to=SIZE),function(){if(from===to)return DONE;var idx=reverse?--to:from++;return array&&array[idx]}}function iterateNode(node,level,offset){var values,array=node&&node.array,from=offset>left?0:left-offset>>level,to=(right-offset>>level)+1;return to>SIZE&&(to=SIZE),function(){for(;;){if(values){var value=values();if(value!==DONE)return value;values=null}if(from===to)return DONE;var idx=reverse?--to:from++;values=iterateNodeOrLeaf(array&&array[idx],level-SHIFT,offset+(idx<<level))}}}var left=list._origin,right=list._capacity,tailPos=getTailOffset(right),tail=list._tail;return iterateNodeOrLeaf(list._root,list._level,0)}function makeList(origin,capacity,level,root,tail,ownerID,hash){var list=Object.create(ListPrototype);return list.size=capacity-origin,list._origin=origin,list._capacity=capacity,list._level=level,list._root=root,list._tail=tail,list.__ownerID=ownerID,list.__hash=hash,list.__altered=!1,list}function emptyList(){return EMPTY_LIST||(EMPTY_LIST=makeList(0,0,SHIFT))}function updateList(list,index,value){if(index=wrapIndex(list,index),index>=list.size||0>index)return list.withMutations(function(list){0>index?setListBounds(list,index).set(0,value):setListBounds(list,0,index+1).set(index,value)});index+=list._origin;var newTail=list._tail,newRoot=list._root,didAlter=MakeRef(DID_ALTER);return index>=getTailOffset(list._capacity)?newTail=updateVNode(newTail,list.__ownerID,0,index,value,didAlter):newRoot=updateVNode(newRoot,list.__ownerID,list._level,index,value,didAlter),didAlter.value?list.__ownerID?(list._root=newRoot,list._tail=newTail,list.__hash=void 0,list.__altered=!0,list):makeList(list._origin,list._capacity,list._level,newRoot,newTail):list}function updateVNode(node,ownerID,level,index,value,didAlter){var idx=index>>>level&MASK,nodeHas=node&&idx<node.array.length;if(!nodeHas&&void 0===value)return node;var newNode;if(level>0){var lowerNode=node&&node.array[idx],newLowerNode=updateVNode(lowerNode,ownerID,level-SHIFT,index,value,didAlter);return newLowerNode===lowerNode?node:(newNode=editableVNode(node,ownerID),newNode.array[idx]=newLowerNode,
newNode)}return nodeHas&&node.array[idx]===value?node:(SetRef(didAlter),newNode=editableVNode(node,ownerID),void 0===value&&idx===newNode.array.length-1?newNode.array.pop():newNode.array[idx]=value,newNode)}function editableVNode(node,ownerID){return ownerID&&node&&ownerID===node.ownerID?node:new VNode(node?node.array.slice():[],ownerID)}function listNodeFor(list,rawIndex){if(rawIndex>=getTailOffset(list._capacity))return list._tail;if(rawIndex<1<<list._level+SHIFT){for(var node=list._root,level=list._level;node&&level>0;)node=node.array[rawIndex>>>level&MASK],level-=SHIFT;return node}}function setListBounds(list,begin,end){var owner=list.__ownerID||new OwnerID,oldOrigin=list._origin,oldCapacity=list._capacity,newOrigin=oldOrigin+begin,newCapacity=void 0===end?oldCapacity:0>end?oldCapacity+end:oldOrigin+end;if(newOrigin===oldOrigin&&newCapacity===oldCapacity)return list;if(newOrigin>=newCapacity)return list.clear();for(var newLevel=list._level,newRoot=list._root,offsetShift=0;0>newOrigin+offsetShift;)newRoot=new VNode(newRoot&&newRoot.array.length?[void 0,newRoot]:[],owner),newLevel+=SHIFT,offsetShift+=1<<newLevel;offsetShift&&(newOrigin+=offsetShift,oldOrigin+=offsetShift,newCapacity+=offsetShift,oldCapacity+=offsetShift);for(var oldTailOffset=getTailOffset(oldCapacity),newTailOffset=getTailOffset(newCapacity);newTailOffset>=1<<newLevel+SHIFT;)newRoot=new VNode(newRoot&&newRoot.array.length?[newRoot]:[],owner),newLevel+=SHIFT;var oldTail=list._tail,newTail=oldTailOffset>newTailOffset?listNodeFor(list,newCapacity-1):newTailOffset>oldTailOffset?new VNode([],owner):oldTail;if(oldTail&&newTailOffset>oldTailOffset&&oldCapacity>newOrigin&&oldTail.array.length){newRoot=editableVNode(newRoot,owner);for(var node=newRoot,level=newLevel;level>SHIFT;level-=SHIFT){var idx=oldTailOffset>>>level&MASK;node=node.array[idx]=editableVNode(node.array[idx],owner)}node.array[oldTailOffset>>>SHIFT&MASK]=oldTail}if(oldCapacity>newCapacity&&(newTail=newTail&&newTail.removeAfter(owner,0,newCapacity)),newOrigin>=newTailOffset)newOrigin-=newTailOffset,newCapacity-=newTailOffset,newLevel=SHIFT,newRoot=null,newTail=newTail&&newTail.removeBefore(owner,0,newOrigin);else if(newOrigin>oldOrigin||oldTailOffset>newTailOffset){for(offsetShift=0;newRoot;){var beginIndex=newOrigin>>>newLevel&MASK;if(beginIndex!==newTailOffset>>>newLevel&MASK)break;beginIndex&&(offsetShift+=(1<<newLevel)*beginIndex),newLevel-=SHIFT,newRoot=newRoot.array[beginIndex]}newRoot&&newOrigin>oldOrigin&&(newRoot=newRoot.removeBefore(owner,newLevel,newOrigin-offsetShift)),newRoot&&oldTailOffset>newTailOffset&&(newRoot=newRoot.removeAfter(owner,newLevel,newTailOffset-offsetShift)),offsetShift&&(newOrigin-=offsetShift,newCapacity-=offsetShift)}return list.__ownerID?(list.size=newCapacity-newOrigin,list._origin=newOrigin,list._capacity=newCapacity,list._level=newLevel,list._root=newRoot,list._tail=newTail,list.__hash=void 0,list.__altered=!0,list):makeList(newOrigin,newCapacity,newLevel,newRoot,newTail)}function mergeIntoListWith(list,merger,iterables){for(var iters=[],maxSize=0,ii=0;ii<iterables.length;ii++){var value=iterables[ii],iter=IndexedIterable(value);iter.size>maxSize&&(maxSize=iter.size),isIterable(value)||(iter=iter.map(function(v){return fromJS(v)})),iters.push(iter)}return maxSize>list.size&&(list=list.setSize(maxSize)),mergeIntoCollectionWith(list,merger,iters)}function getTailOffset(size){return SIZE>size?0:size-1>>>SHIFT<<SHIFT}function OrderedMap(value){return null===value||void 0===value?emptyOrderedMap():isOrderedMap(value)?value:emptyOrderedMap().withMutations(function(map){var iter=KeyedIterable(value);assertNotInfinite(iter.size),iter.forEach(function(v,k){return map.set(k,v)})})}function isOrderedMap(maybeOrderedMap){return isMap(maybeOrderedMap)&&isOrdered(maybeOrderedMap)}function makeOrderedMap(map,list,ownerID,hash){var omap=Object.create(OrderedMap.prototype);return omap.size=map?map.size:0,omap._map=map,omap._list=list,omap.__ownerID=ownerID,omap.__hash=hash,omap}function emptyOrderedMap(){return EMPTY_ORDERED_MAP||(EMPTY_ORDERED_MAP=makeOrderedMap(emptyMap(),emptyList()))}function updateOrderedMap(omap,k,v){var newMap,newList,map=omap._map,list=omap._list,i=map.get(k),has=void 0!==i;if(v===NOT_SET){if(!has)return omap;list.size>=SIZE&&list.size>=2*map.size?(newList=list.filter(function(entry,idx){return void 0!==entry&&i!==idx}),newMap=newList.toKeyedSeq().map(function(entry){return entry[0]}).flip().toMap(),omap.__ownerID&&(newMap.__ownerID=newList.__ownerID=omap.__ownerID)):(newMap=map.remove(k),newList=i===list.size-1?list.pop():list.set(i,void 0))}else if(has){if(v===list.get(i)[1])return omap;newMap=map,newList=list.set(i,[k,v])}else newMap=map.set(k,list.size),newList=list.set(list.size,[k,v]);return omap.__ownerID?(omap.size=newMap.size,omap._map=newMap,omap._list=newList,omap.__hash=void 0,omap):makeOrderedMap(newMap,newList)}function Stack(value){return null===value||void 0===value?emptyStack():isStack(value)?value:emptyStack().unshiftAll(value)}function isStack(maybeStack){return!(!maybeStack||!maybeStack[IS_STACK_SENTINEL])}function makeStack(size,head,ownerID,hash){var map=Object.create(StackPrototype);return map.size=size,map._head=head,map.__ownerID=ownerID,map.__hash=hash,map.__altered=!1,map}function emptyStack(){return EMPTY_STACK||(EMPTY_STACK=makeStack(0))}function src_Set__Set(value){return null===value||void 0===value?emptySet():isSet(value)?value:emptySet().withMutations(function(set){var iter=SetIterable(value);assertNotInfinite(iter.size),iter.forEach(function(v){return set.add(v)})})}function isSet(maybeSet){return!(!maybeSet||!maybeSet[IS_SET_SENTINEL])}function updateSet(set,newMap){return set.__ownerID?(set.size=newMap.size,set._map=newMap,set):newMap===set._map?set:0===newMap.size?set.__empty():set.__make(newMap)}function makeSet(map,ownerID){var set=Object.create(SetPrototype);return set.size=map?map.size:0,set._map=map,set.__ownerID=ownerID,set}function emptySet(){return EMPTY_SET||(EMPTY_SET=makeSet(emptyMap()))}function OrderedSet(value){return null===value||void 0===value?emptyOrderedSet():isOrderedSet(value)?value:emptyOrderedSet().withMutations(function(set){var iter=SetIterable(value);assertNotInfinite(iter.size),iter.forEach(function(v){return set.add(v)})})}function isOrderedSet(maybeOrderedSet){return isSet(maybeOrderedSet)&&isOrdered(maybeOrderedSet)}function makeOrderedSet(map,ownerID){var set=Object.create(OrderedSetPrototype);return set.size=map?map.size:0,set._map=map,set.__ownerID=ownerID,set}function emptyOrderedSet(){return EMPTY_ORDERED_SET||(EMPTY_ORDERED_SET=makeOrderedSet(emptyOrderedMap()))}function Record(defaultValues,name){var hasInitialized,RecordType=function(values){if(values instanceof RecordType)return values;if(!(this instanceof RecordType))return new RecordType(values);if(!hasInitialized){hasInitialized=!0;var keys=Object.keys(defaultValues);setProps(RecordTypePrototype,keys),RecordTypePrototype.size=keys.length,RecordTypePrototype._name=name,RecordTypePrototype._keys=keys,RecordTypePrototype._defaultValues=defaultValues}this._map=src_Map__Map(values)},RecordTypePrototype=RecordType.prototype=Object.create(RecordPrototype);return RecordTypePrototype.constructor=RecordType,RecordType}function makeRecord(likeRecord,map,ownerID){var record=Object.create(Object.getPrototypeOf(likeRecord));return record._map=map,record.__ownerID=ownerID,record}function recordName(record){return record._name||record.constructor.name||"Record"}function setProps(prototype,names){try{names.forEach(setProp.bind(void 0,prototype))}catch(error){}}function setProp(prototype,name){Object.defineProperty(prototype,name,{get:function(){return this.get(name)},set:function(value){invariant(this.__ownerID,"Cannot set on an immutable record."),this.set(name,value)}})}function deepEqual(a,b){if(a===b)return!0;if(!isIterable(b)||void 0!==a.size&&void 0!==b.size&&a.size!==b.size||void 0!==a.__hash&&void 0!==b.__hash&&a.__hash!==b.__hash||isKeyed(a)!==isKeyed(b)||isIndexed(a)!==isIndexed(b)||isOrdered(a)!==isOrdered(b))return!1;if(0===a.size&&0===b.size)return!0;var notAssociative=!isAssociative(a);if(isOrdered(a)){var entries=a.entries();return b.every(function(v,k){var entry=entries.next().value;return entry&&is(entry[1],v)&&(notAssociative||is(entry[0],k))})&&entries.next().done}var flipped=!1;if(void 0===a.size)if(void 0===b.size)"function"==typeof a.cacheResult&&a.cacheResult();else{flipped=!0;var _=a;a=b,b=_}var allEqual=!0,bSize=b.__iterate(function(v,k){return(notAssociative?a.has(v):flipped?is(v,a.get(k,NOT_SET)):is(a.get(k,NOT_SET),v))?void 0:(allEqual=!1,!1)});return allEqual&&a.size===bSize}function Range(start,end,step){if(!(this instanceof Range))return new Range(start,end,step);if(invariant(0!==step,"Cannot step a Range by 0"),start=start||0,void 0===end&&(end=1/0),step=void 0===step?1:Math.abs(step),start>end&&(step=-step),this._start=start,this._end=end,this._step=step,this.size=Math.max(0,Math.ceil((end-start)/step-1)+1),0===this.size){if(EMPTY_RANGE)return EMPTY_RANGE;EMPTY_RANGE=this}}function Repeat(value,times){if(!(this instanceof Repeat))return new Repeat(value,times);if(this._value=value,this.size=void 0===times?1/0:Math.max(0,times),0===this.size){if(EMPTY_REPEAT)return EMPTY_REPEAT;EMPTY_REPEAT=this}}function mixin(ctor,methods){var keyCopier=function(key){ctor.prototype[key]=methods[key]};return Object.keys(methods).forEach(keyCopier),Object.getOwnPropertySymbols&&Object.getOwnPropertySymbols(methods).forEach(keyCopier),ctor}function keyMapper(v,k){return k}function entryMapper(v,k){return[k,v]}function not(predicate){return function(){return!predicate.apply(this,arguments)}}function neg(predicate){return function(){return-predicate.apply(this,arguments)}}function quoteString(value){return"string"==typeof value?JSON.stringify(value):value}function defaultZipper(){return arrCopy(arguments)}function defaultNegComparator(a,b){return b>a?1:a>b?-1:0}function hashIterable(iterable){if(iterable.size===1/0)return 0;var ordered=isOrdered(iterable),keyed=isKeyed(iterable),h=ordered?1:0,size=iterable.__iterate(keyed?ordered?function(v,k){h=31*h+hashMerge(hash(v),hash(k))|0}:function(v,k){h=h+hashMerge(hash(v),hash(k))|0}:ordered?function(v){h=31*h+hash(v)|0}:function(v){h=h+hash(v)|0});return murmurHashOfSize(size,h)}function murmurHashOfSize(size,h){return h=src_Math__imul(h,3432918353),h=src_Math__imul(h<<15|h>>>-15,461845907),h=src_Math__imul(h<<13|h>>>-13,5),h=(h+3864292196|0)^size,h=src_Math__imul(h^h>>>16,2246822507),h=src_Math__imul(h^h>>>13,3266489909),h=smi(h^h>>>16)}function hashMerge(a,b){return a^b+2654435769+(a<<6)+(a>>2)|0}var SLICE$0=Array.prototype.slice,DELETE="delete",SHIFT=5,SIZE=1<<SHIFT,MASK=SIZE-1,NOT_SET={},CHANGE_LENGTH={value:!1},DID_ALTER={value:!1};createClass(KeyedIterable,Iterable),createClass(IndexedIterable,Iterable),createClass(SetIterable,Iterable),Iterable.isIterable=isIterable,Iterable.isKeyed=isKeyed,Iterable.isIndexed=isIndexed,Iterable.isAssociative=isAssociative,Iterable.isOrdered=isOrdered,Iterable.Keyed=KeyedIterable,Iterable.Indexed=IndexedIterable,Iterable.Set=SetIterable;var IS_ITERABLE_SENTINEL="@@__IMMUTABLE_ITERABLE__@@",IS_KEYED_SENTINEL="@@__IMMUTABLE_KEYED__@@",IS_INDEXED_SENTINEL="@@__IMMUTABLE_INDEXED__@@",IS_ORDERED_SENTINEL="@@__IMMUTABLE_ORDERED__@@",ITERATE_KEYS=0,ITERATE_VALUES=1,ITERATE_ENTRIES=2,REAL_ITERATOR_SYMBOL="function"==typeof Symbol&&Symbol.iterator,FAUX_ITERATOR_SYMBOL="@@iterator",ITERATOR_SYMBOL=REAL_ITERATOR_SYMBOL||FAUX_ITERATOR_SYMBOL;src_Iterator__Iterator.prototype.toString=function(){return"[Iterator]"},src_Iterator__Iterator.KEYS=ITERATE_KEYS,src_Iterator__Iterator.VALUES=ITERATE_VALUES,src_Iterator__Iterator.ENTRIES=ITERATE_ENTRIES,src_Iterator__Iterator.prototype.inspect=src_Iterator__Iterator.prototype.toSource=function(){return this.toString()},src_Iterator__Iterator.prototype[ITERATOR_SYMBOL]=function(){return this},createClass(Seq,Iterable),Seq.of=function(){return Seq(arguments)},Seq.prototype.toSeq=function(){return this},Seq.prototype.toString=function(){return this.__toString("Seq {","}")},Seq.prototype.cacheResult=function(){return!this._cache&&this.__iterateUncached&&(this._cache=this.entrySeq().toArray(),this.size=this._cache.length),this},Seq.prototype.__iterate=function(fn,reverse){return seqIterate(this,fn,reverse,!0)},Seq.prototype.__iterator=function(type,reverse){return seqIterator(this,type,reverse,!0)},createClass(KeyedSeq,Seq),KeyedSeq.prototype.toKeyedSeq=function(){return this},createClass(IndexedSeq,Seq),IndexedSeq.of=function(){return IndexedSeq(arguments)},IndexedSeq.prototype.toIndexedSeq=function(){return this},IndexedSeq.prototype.toString=function(){return this.__toString("Seq [","]")},IndexedSeq.prototype.__iterate=function(fn,reverse){return seqIterate(this,fn,reverse,!1)},IndexedSeq.prototype.__iterator=function(type,reverse){return seqIterator(this,type,reverse,!1)},createClass(SetSeq,Seq),SetSeq.of=function(){return SetSeq(arguments)},SetSeq.prototype.toSetSeq=function(){return this},Seq.isSeq=isSeq,Seq.Keyed=KeyedSeq,Seq.Set=SetSeq,Seq.Indexed=IndexedSeq;var IS_SEQ_SENTINEL="@@__IMMUTABLE_SEQ__@@";Seq.prototype[IS_SEQ_SENTINEL]=!0,createClass(ArraySeq,IndexedSeq),ArraySeq.prototype.get=function(index,notSetValue){return this.has(index)?this._array[wrapIndex(this,index)]:notSetValue},ArraySeq.prototype.__iterate=function(fn,reverse){for(var array=this._array,maxIndex=array.length-1,ii=0;maxIndex>=ii;ii++)if(fn(array[reverse?maxIndex-ii:ii],ii,this)===!1)return ii+1;return ii},ArraySeq.prototype.__iterator=function(type,reverse){var array=this._array,maxIndex=array.length-1,ii=0;return new src_Iterator__Iterator(function(){return ii>maxIndex?iteratorDone():iteratorValue(type,ii,array[reverse?maxIndex-ii++:ii++])})},createClass(ObjectSeq,KeyedSeq),ObjectSeq.prototype.get=function(key,notSetValue){return void 0===notSetValue||this.has(key)?this._object[key]:notSetValue},ObjectSeq.prototype.has=function(key){return this._object.hasOwnProperty(key)},ObjectSeq.prototype.__iterate=function(fn,reverse){for(var object=this._object,keys=this._keys,maxIndex=keys.length-1,ii=0;maxIndex>=ii;ii++){var key=keys[reverse?maxIndex-ii:ii];if(fn(object[key],key,this)===!1)return ii+1}return ii},ObjectSeq.prototype.__iterator=function(type,reverse){var object=this._object,keys=this._keys,maxIndex=keys.length-1,ii=0;return new src_Iterator__Iterator(function(){var key=keys[reverse?maxIndex-ii:ii];return ii++>maxIndex?iteratorDone():iteratorValue(type,key,object[key])})},ObjectSeq.prototype[IS_ORDERED_SENTINEL]=!0,createClass(IterableSeq,IndexedSeq),IterableSeq.prototype.__iterateUncached=function(fn,reverse){if(reverse)return this.cacheResult().__iterate(fn,reverse);var iterable=this._iterable,iterator=getIterator(iterable),iterations=0;if(isIterator(iterator))for(var step;!(step=iterator.next()).done&&fn(step.value,iterations++,this)!==!1;);return iterations},IterableSeq.prototype.__iteratorUncached=function(type,reverse){if(reverse)return this.cacheResult().__iterator(type,reverse);var iterable=this._iterable,iterator=getIterator(iterable);if(!isIterator(iterator))return new src_Iterator__Iterator(iteratorDone);var iterations=0;return new src_Iterator__Iterator(function(){var step=iterator.next();return step.done?step:iteratorValue(type,iterations++,step.value)})},createClass(IteratorSeq,IndexedSeq),IteratorSeq.prototype.__iterateUncached=function(fn,reverse){if(reverse)return this.cacheResult().__iterate(fn,reverse);for(var iterator=this._iterator,cache=this._iteratorCache,iterations=0;iterations<cache.length;)if(fn(cache[iterations],iterations++,this)===!1)return iterations;for(var step;!(step=iterator.next()).done;){var val=step.value;if(cache[iterations]=val,fn(val,iterations++,this)===!1)break}return iterations},IteratorSeq.prototype.__iteratorUncached=function(type,reverse){if(reverse)return this.cacheResult().__iterator(type,reverse);var iterator=this._iterator,cache=this._iteratorCache,iterations=0;return new src_Iterator__Iterator(function(){if(iterations>=cache.length){var step=iterator.next();if(step.done)return step;cache[iterations]=step.value}return iteratorValue(type,iterations,cache[iterations++])})};var EMPTY_SEQ;createClass(Collection,Iterable),createClass(KeyedCollection,Collection),createClass(IndexedCollection,Collection),createClass(SetCollection,Collection),Collection.Keyed=KeyedCollection,Collection.Indexed=IndexedCollection,Collection.Set=SetCollection;var weakMap,src_Math__imul="function"==typeof Math.imul&&-2===Math.imul(4294967295,2)?Math.imul:function(a,b){a=0|a,b=0|b;var c=65535&a,d=65535&b;return c*d+((a>>>16)*d+c*(b>>>16)<<16>>>0)|0},isExtensible=Object.isExtensible,canDefineProperty=function(){try{return Object.defineProperty({},"@",{}),!0}catch(e){return!1}}(),usingWeakMap="function"==typeof WeakMap;usingWeakMap&&(weakMap=new WeakMap);var objHashUID=0,UID_HASH_KEY="__immutablehash__";"function"==typeof Symbol&&(UID_HASH_KEY=Symbol(UID_HASH_KEY));var STRING_HASH_CACHE_MIN_STRLEN=16,STRING_HASH_CACHE_MAX_SIZE=255,STRING_HASH_CACHE_SIZE=0,stringHashCache={};createClass(ToKeyedSequence,KeyedSeq),ToKeyedSequence.prototype.get=function(key,notSetValue){return this._iter.get(key,notSetValue)},ToKeyedSequence.prototype.has=function(key){return this._iter.has(key)},ToKeyedSequence.prototype.valueSeq=function(){return this._iter.valueSeq()},ToKeyedSequence.prototype.reverse=function(){var this$0=this,reversedSequence=reverseFactory(this,!0);return this._useKeys||(reversedSequence.valueSeq=function(){return this$0._iter.toSeq().reverse()}),reversedSequence},ToKeyedSequence.prototype.map=function(mapper,context){var this$0=this,mappedSequence=mapFactory(this,mapper,context);return this._useKeys||(mappedSequence.valueSeq=function(){return this$0._iter.toSeq().map(mapper,context)}),mappedSequence},ToKeyedSequence.prototype.__iterate=function(fn,reverse){var ii,this$0=this;return this._iter.__iterate(this._useKeys?function(v,k){return fn(v,k,this$0)}:(ii=reverse?resolveSize(this):0,function(v){return fn(v,reverse?--ii:ii++,this$0)}),reverse)},ToKeyedSequence.prototype.__iterator=function(type,reverse){if(this._useKeys)return this._iter.__iterator(type,reverse);var iterator=this._iter.__iterator(ITERATE_VALUES,reverse),ii=reverse?resolveSize(this):0;return new src_Iterator__Iterator(function(){var step=iterator.next();return step.done?step:iteratorValue(type,reverse?--ii:ii++,step.value,step)})},ToKeyedSequence.prototype[IS_ORDERED_SENTINEL]=!0,createClass(ToIndexedSequence,IndexedSeq),ToIndexedSequence.prototype.includes=function(value){return this._iter.includes(value)},ToIndexedSequence.prototype.__iterate=function(fn,reverse){var this$0=this,iterations=0;return this._iter.__iterate(function(v){return fn(v,iterations++,this$0)},reverse)},ToIndexedSequence.prototype.__iterator=function(type,reverse){var iterator=this._iter.__iterator(ITERATE_VALUES,reverse),iterations=0;return new src_Iterator__Iterator(function(){var step=iterator.next();return step.done?step:iteratorValue(type,iterations++,step.value,step)})},createClass(ToSetSequence,SetSeq),ToSetSequence.prototype.has=function(key){return this._iter.includes(key)},ToSetSequence.prototype.__iterate=function(fn,reverse){var this$0=this;return this._iter.__iterate(function(v){return fn(v,v,this$0)},reverse)},ToSetSequence.prototype.__iterator=function(type,reverse){var iterator=this._iter.__iterator(ITERATE_VALUES,reverse);return new src_Iterator__Iterator(function(){var step=iterator.next();return step.done?step:iteratorValue(type,step.value,step.value,step)})},createClass(FromEntriesSequence,KeyedSeq),FromEntriesSequence.prototype.entrySeq=function(){return this._iter.toSeq()},FromEntriesSequence.prototype.__iterate=function(fn,reverse){var this$0=this;return this._iter.__iterate(function(entry){if(entry){validateEntry(entry);var indexedIterable=isIterable(entry);return fn(indexedIterable?entry.get(1):entry[1],indexedIterable?entry.get(0):entry[0],this$0)}},reverse)},FromEntriesSequence.prototype.__iterator=function(type,reverse){var iterator=this._iter.__iterator(ITERATE_VALUES,reverse);return new src_Iterator__Iterator(function(){for(;;){var step=iterator.next();if(step.done)return step;var entry=step.value;if(entry){validateEntry(entry);var indexedIterable=isIterable(entry);return iteratorValue(type,indexedIterable?entry.get(0):entry[0],indexedIterable?entry.get(1):entry[1],step)}}})},ToIndexedSequence.prototype.cacheResult=ToKeyedSequence.prototype.cacheResult=ToSetSequence.prototype.cacheResult=FromEntriesSequence.prototype.cacheResult=cacheResultThrough,createClass(src_Map__Map,KeyedCollection),src_Map__Map.prototype.toString=function(){return this.__toString("Map {","}")},src_Map__Map.prototype.get=function(k,notSetValue){return this._root?this._root.get(0,void 0,k,notSetValue):notSetValue},src_Map__Map.prototype.set=function(k,v){return updateMap(this,k,v)},src_Map__Map.prototype.setIn=function(keyPath,v){return this.updateIn(keyPath,NOT_SET,function(){return v})},src_Map__Map.prototype.remove=function(k){return updateMap(this,k,NOT_SET)},src_Map__Map.prototype.deleteIn=function(keyPath){return this.updateIn(keyPath,function(){return NOT_SET})},src_Map__Map.prototype.update=function(k,notSetValue,updater){return 1===arguments.length?k(this):this.updateIn([k],notSetValue,updater)},src_Map__Map.prototype.updateIn=function(keyPath,notSetValue,updater){updater||(updater=notSetValue,notSetValue=void 0);var updatedValue=updateInDeepMap(this,forceIterator(keyPath),notSetValue,updater);return updatedValue===NOT_SET?void 0:updatedValue},src_Map__Map.prototype.clear=function(){return 0===this.size?this:this.__ownerID?(this.size=0,this._root=null,this.__hash=void 0,this.__altered=!0,this):emptyMap()},src_Map__Map.prototype.merge=function(){return mergeIntoMapWith(this,void 0,arguments)},src_Map__Map.prototype.mergeWith=function(merger){var iters=SLICE$0.call(arguments,1);return mergeIntoMapWith(this,merger,iters)},src_Map__Map.prototype.mergeIn=function(keyPath){var iters=SLICE$0.call(arguments,1);return this.updateIn(keyPath,emptyMap(),function(m){return"function"==typeof m.merge?m.merge.apply(m,iters):iters[iters.length-1]})},src_Map__Map.prototype.mergeDeep=function(){return mergeIntoMapWith(this,deepMerger(void 0),arguments)},src_Map__Map.prototype.mergeDeepWith=function(merger){var iters=SLICE$0.call(arguments,1);return mergeIntoMapWith(this,deepMerger(merger),iters)},src_Map__Map.prototype.mergeDeepIn=function(keyPath){var iters=SLICE$0.call(arguments,1);return this.updateIn(keyPath,emptyMap(),function(m){return"function"==typeof m.mergeDeep?m.mergeDeep.apply(m,iters):iters[iters.length-1]})},src_Map__Map.prototype.sort=function(comparator){return OrderedMap(sortFactory(this,comparator))},src_Map__Map.prototype.sortBy=function(mapper,comparator){return OrderedMap(sortFactory(this,comparator,mapper))},src_Map__Map.prototype.withMutations=function(fn){var mutable=this.asMutable();return fn(mutable),mutable.wasAltered()?mutable.__ensureOwner(this.__ownerID):this},src_Map__Map.prototype.asMutable=function(){return this.__ownerID?this:this.__ensureOwner(new OwnerID)},src_Map__Map.prototype.asImmutable=function(){return this.__ensureOwner()},src_Map__Map.prototype.wasAltered=function(){return this.__altered},src_Map__Map.prototype.__iterator=function(type,reverse){return new MapIterator(this,type,reverse)},src_Map__Map.prototype.__iterate=function(fn,reverse){var this$0=this,iterations=0;return this._root&&this._root.iterate(function(entry){return iterations++,fn(entry[1],entry[0],this$0)},reverse),iterations},src_Map__Map.prototype.__ensureOwner=function(ownerID){return ownerID===this.__ownerID?this:ownerID?makeMap(this.size,this._root,ownerID,this.__hash):(this.__ownerID=ownerID,this.__altered=!1,this)},src_Map__Map.isMap=isMap;var IS_MAP_SENTINEL="@@__IMMUTABLE_MAP__@@",MapPrototype=src_Map__Map.prototype;MapPrototype[IS_MAP_SENTINEL]=!0,MapPrototype[DELETE]=MapPrototype.remove,MapPrototype.removeIn=MapPrototype.deleteIn,ArrayMapNode.prototype.get=function(shift,keyHash,key,notSetValue){for(var entries=this.entries,ii=0,len=entries.length;len>ii;ii++)if(is(key,entries[ii][0]))return entries[ii][1];return notSetValue},ArrayMapNode.prototype.update=function(ownerID,shift,keyHash,key,value,didChangeSize,didAlter){for(var removed=value===NOT_SET,entries=this.entries,idx=0,len=entries.length;len>idx&&!is(key,entries[idx][0]);idx++);var exists=len>idx;if(exists?entries[idx][1]===value:removed)return this;if(SetRef(didAlter),(removed||!exists)&&SetRef(didChangeSize),!removed||1!==entries.length){if(!exists&&!removed&&entries.length>=MAX_ARRAY_MAP_SIZE)return createNodes(ownerID,entries,key,value);var isEditable=ownerID&&ownerID===this.ownerID,newEntries=isEditable?entries:arrCopy(entries);return exists?removed?idx===len-1?newEntries.pop():newEntries[idx]=newEntries.pop():newEntries[idx]=[key,value]:newEntries.push([key,value]),isEditable?(this.entries=newEntries,this):new ArrayMapNode(ownerID,newEntries)}},BitmapIndexedNode.prototype.get=function(shift,keyHash,key,notSetValue){void 0===keyHash&&(keyHash=hash(key));var bit=1<<((0===shift?keyHash:keyHash>>>shift)&MASK),bitmap=this.bitmap;return 0===(bitmap&bit)?notSetValue:this.nodes[popCount(bitmap&bit-1)].get(shift+SHIFT,keyHash,key,notSetValue)},BitmapIndexedNode.prototype.update=function(ownerID,shift,keyHash,key,value,didChangeSize,didAlter){void 0===keyHash&&(keyHash=hash(key));var keyHashFrag=(0===shift?keyHash:keyHash>>>shift)&MASK,bit=1<<keyHashFrag,bitmap=this.bitmap,exists=0!==(bitmap&bit);if(!exists&&value===NOT_SET)return this;var idx=popCount(bitmap&bit-1),nodes=this.nodes,node=exists?nodes[idx]:void 0,newNode=updateNode(node,ownerID,shift+SHIFT,keyHash,key,value,didChangeSize,didAlter);if(newNode===node)return this;if(!exists&&newNode&&nodes.length>=MAX_BITMAP_INDEXED_SIZE)return expandNodes(ownerID,nodes,bitmap,keyHashFrag,newNode);if(exists&&!newNode&&2===nodes.length&&isLeafNode(nodes[1^idx]))return nodes[1^idx];if(exists&&newNode&&1===nodes.length&&isLeafNode(newNode))return newNode;var isEditable=ownerID&&ownerID===this.ownerID,newBitmap=exists?newNode?bitmap:bitmap^bit:bitmap|bit,newNodes=exists?newNode?setIn(nodes,idx,newNode,isEditable):spliceOut(nodes,idx,isEditable):spliceIn(nodes,idx,newNode,isEditable);return isEditable?(this.bitmap=newBitmap,this.nodes=newNodes,this):new BitmapIndexedNode(ownerID,newBitmap,newNodes)},HashArrayMapNode.prototype.get=function(shift,keyHash,key,notSetValue){void 0===keyHash&&(keyHash=hash(key));var idx=(0===shift?keyHash:keyHash>>>shift)&MASK,node=this.nodes[idx];return node?node.get(shift+SHIFT,keyHash,key,notSetValue):notSetValue},HashArrayMapNode.prototype.update=function(ownerID,shift,keyHash,key,value,didChangeSize,didAlter){void 0===keyHash&&(keyHash=hash(key));var idx=(0===shift?keyHash:keyHash>>>shift)&MASK,removed=value===NOT_SET,nodes=this.nodes,node=nodes[idx];if(removed&&!node)return this;var newNode=updateNode(node,ownerID,shift+SHIFT,keyHash,key,value,didChangeSize,didAlter);if(newNode===node)return this;var newCount=this.count;if(node){if(!newNode&&(newCount--,MIN_HASH_ARRAY_MAP_SIZE>newCount))return packNodes(ownerID,nodes,newCount,idx)}else newCount++;var isEditable=ownerID&&ownerID===this.ownerID,newNodes=setIn(nodes,idx,newNode,isEditable);return isEditable?(this.count=newCount,this.nodes=newNodes,this):new HashArrayMapNode(ownerID,newCount,newNodes)},HashCollisionNode.prototype.get=function(shift,keyHash,key,notSetValue){for(var entries=this.entries,ii=0,len=entries.length;len>ii;ii++)if(is(key,entries[ii][0]))return entries[ii][1];return notSetValue},HashCollisionNode.prototype.update=function(ownerID,shift,keyHash,key,value,didChangeSize,didAlter){void 0===keyHash&&(keyHash=hash(key));var removed=value===NOT_SET;if(keyHash!==this.keyHash)return removed?this:(SetRef(didAlter),SetRef(didChangeSize),mergeIntoNode(this,ownerID,shift,keyHash,[key,value]));for(var entries=this.entries,idx=0,len=entries.length;len>idx&&!is(key,entries[idx][0]);idx++);var exists=len>idx;if(exists?entries[idx][1]===value:removed)return this;if(SetRef(didAlter),(removed||!exists)&&SetRef(didChangeSize),removed&&2===len)return new ValueNode(ownerID,this.keyHash,entries[1^idx]);var isEditable=ownerID&&ownerID===this.ownerID,newEntries=isEditable?entries:arrCopy(entries);return exists?removed?idx===len-1?newEntries.pop():newEntries[idx]=newEntries.pop():newEntries[idx]=[key,value]:newEntries.push([key,value]),isEditable?(this.entries=newEntries,this):new HashCollisionNode(ownerID,this.keyHash,newEntries)},ValueNode.prototype.get=function(shift,keyHash,key,notSetValue){return is(key,this.entry[0])?this.entry[1]:notSetValue},ValueNode.prototype.update=function(ownerID,shift,keyHash,key,value,didChangeSize,didAlter){var removed=value===NOT_SET,keyMatch=is(key,this.entry[0]);return(keyMatch?value===this.entry[1]:removed)?this:(SetRef(didAlter),removed?void SetRef(didChangeSize):keyMatch?ownerID&&ownerID===this.ownerID?(this.entry[1]=value,this):new ValueNode(ownerID,this.keyHash,[key,value]):(SetRef(didChangeSize),mergeIntoNode(this,ownerID,shift,hash(key),[key,value])))},ArrayMapNode.prototype.iterate=HashCollisionNode.prototype.iterate=function(fn,reverse){for(var entries=this.entries,ii=0,maxIndex=entries.length-1;maxIndex>=ii;ii++)if(fn(entries[reverse?maxIndex-ii:ii])===!1)return!1},BitmapIndexedNode.prototype.iterate=HashArrayMapNode.prototype.iterate=function(fn,reverse){for(var nodes=this.nodes,ii=0,maxIndex=nodes.length-1;maxIndex>=ii;ii++){var node=nodes[reverse?maxIndex-ii:ii];if(node&&node.iterate(fn,reverse)===!1)return!1}},ValueNode.prototype.iterate=function(fn,reverse){return fn(this.entry)},createClass(MapIterator,src_Iterator__Iterator),MapIterator.prototype.next=function(){for(var type=this._type,stack=this._stack;stack;){var maxIndex,node=stack.node,index=stack.index++;if(node.entry){if(0===index)return mapIteratorValue(type,node.entry)}else if(node.entries){if(maxIndex=node.entries.length-1,maxIndex>=index)return mapIteratorValue(type,node.entries[this._reverse?maxIndex-index:index])}else if(maxIndex=node.nodes.length-1,maxIndex>=index){var subNode=node.nodes[this._reverse?maxIndex-index:index];if(subNode){if(subNode.entry)return mapIteratorValue(type,subNode.entry);stack=this._stack=mapIteratorFrame(subNode,stack)}continue}stack=this._stack=this._stack.__prev}return iteratorDone()};var EMPTY_MAP,MAX_ARRAY_MAP_SIZE=SIZE/4,MAX_BITMAP_INDEXED_SIZE=SIZE/2,MIN_HASH_ARRAY_MAP_SIZE=SIZE/4;createClass(List,IndexedCollection),List.of=function(){return this(arguments)},List.prototype.toString=function(){return this.__toString("List [","]")},List.prototype.get=function(index,notSetValue){if(index=wrapIndex(this,index),0>index||index>=this.size)return notSetValue;index+=this._origin;var node=listNodeFor(this,index);return node&&node.array[index&MASK]},List.prototype.set=function(index,value){return updateList(this,index,value)},List.prototype.remove=function(index){return this.has(index)?0===index?this.shift():index===this.size-1?this.pop():this.splice(index,1):this},List.prototype.clear=function(){return 0===this.size?this:this.__ownerID?(this.size=this._origin=this._capacity=0,this._level=SHIFT,this._root=this._tail=null,this.__hash=void 0,this.__altered=!0,this):emptyList()},List.prototype.push=function(){var values=arguments,oldSize=this.size;return this.withMutations(function(list){setListBounds(list,0,oldSize+values.length);for(var ii=0;ii<values.length;ii++)list.set(oldSize+ii,values[ii])})},List.prototype.pop=function(){return setListBounds(this,0,-1)},List.prototype.unshift=function(){var values=arguments;return this.withMutations(function(list){setListBounds(list,-values.length);for(var ii=0;ii<values.length;ii++)list.set(ii,values[ii])})},List.prototype.shift=function(){return setListBounds(this,1)},List.prototype.merge=function(){return mergeIntoListWith(this,void 0,arguments)},List.prototype.mergeWith=function(merger){
var iters=SLICE$0.call(arguments,1);return mergeIntoListWith(this,merger,iters)},List.prototype.mergeDeep=function(){return mergeIntoListWith(this,deepMerger(void 0),arguments)},List.prototype.mergeDeepWith=function(merger){var iters=SLICE$0.call(arguments,1);return mergeIntoListWith(this,deepMerger(merger),iters)},List.prototype.setSize=function(size){return setListBounds(this,0,size)},List.prototype.slice=function(begin,end){var size=this.size;return wholeSlice(begin,end,size)?this:setListBounds(this,resolveBegin(begin,size),resolveEnd(end,size))},List.prototype.__iterator=function(type,reverse){var index=0,values=iterateList(this,reverse);return new src_Iterator__Iterator(function(){var value=values();return value===DONE?iteratorDone():iteratorValue(type,index++,value)})},List.prototype.__iterate=function(fn,reverse){for(var value,index=0,values=iterateList(this,reverse);(value=values())!==DONE&&fn(value,index++,this)!==!1;);return index},List.prototype.__ensureOwner=function(ownerID){return ownerID===this.__ownerID?this:ownerID?makeList(this._origin,this._capacity,this._level,this._root,this._tail,ownerID,this.__hash):(this.__ownerID=ownerID,this)},List.isList=isList;var IS_LIST_SENTINEL="@@__IMMUTABLE_LIST__@@",ListPrototype=List.prototype;ListPrototype[IS_LIST_SENTINEL]=!0,ListPrototype[DELETE]=ListPrototype.remove,ListPrototype.setIn=MapPrototype.setIn,ListPrototype.deleteIn=ListPrototype.removeIn=MapPrototype.removeIn,ListPrototype.update=MapPrototype.update,ListPrototype.updateIn=MapPrototype.updateIn,ListPrototype.mergeIn=MapPrototype.mergeIn,ListPrototype.mergeDeepIn=MapPrototype.mergeDeepIn,ListPrototype.withMutations=MapPrototype.withMutations,ListPrototype.asMutable=MapPrototype.asMutable,ListPrototype.asImmutable=MapPrototype.asImmutable,ListPrototype.wasAltered=MapPrototype.wasAltered,VNode.prototype.removeBefore=function(ownerID,level,index){if(index===level?1<<level:0||0===this.array.length)return this;var originIndex=index>>>level&MASK;if(originIndex>=this.array.length)return new VNode([],ownerID);var newChild,removingFirst=0===originIndex;if(level>0){var oldChild=this.array[originIndex];if(newChild=oldChild&&oldChild.removeBefore(ownerID,level-SHIFT,index),newChild===oldChild&&removingFirst)return this}if(removingFirst&&!newChild)return this;var editable=editableVNode(this,ownerID);if(!removingFirst)for(var ii=0;originIndex>ii;ii++)editable.array[ii]=void 0;return newChild&&(editable.array[originIndex]=newChild),editable},VNode.prototype.removeAfter=function(ownerID,level,index){if(index===level?1<<level:0||0===this.array.length)return this;var sizeIndex=index-1>>>level&MASK;if(sizeIndex>=this.array.length)return this;var newChild,removingLast=sizeIndex===this.array.length-1;if(level>0){var oldChild=this.array[sizeIndex];if(newChild=oldChild&&oldChild.removeAfter(ownerID,level-SHIFT,index),newChild===oldChild&&removingLast)return this}if(removingLast&&!newChild)return this;var editable=editableVNode(this,ownerID);return removingLast||editable.array.pop(),newChild&&(editable.array[sizeIndex]=newChild),editable};var EMPTY_LIST,DONE={};createClass(OrderedMap,src_Map__Map),OrderedMap.of=function(){return this(arguments)},OrderedMap.prototype.toString=function(){return this.__toString("OrderedMap {","}")},OrderedMap.prototype.get=function(k,notSetValue){var index=this._map.get(k);return void 0!==index?this._list.get(index)[1]:notSetValue},OrderedMap.prototype.clear=function(){return 0===this.size?this:this.__ownerID?(this.size=0,this._map.clear(),this._list.clear(),this):emptyOrderedMap()},OrderedMap.prototype.set=function(k,v){return updateOrderedMap(this,k,v)},OrderedMap.prototype.remove=function(k){return updateOrderedMap(this,k,NOT_SET)},OrderedMap.prototype.wasAltered=function(){return this._map.wasAltered()||this._list.wasAltered()},OrderedMap.prototype.__iterate=function(fn,reverse){var this$0=this;return this._list.__iterate(function(entry){return entry&&fn(entry[1],entry[0],this$0)},reverse)},OrderedMap.prototype.__iterator=function(type,reverse){return this._list.fromEntrySeq().__iterator(type,reverse)},OrderedMap.prototype.__ensureOwner=function(ownerID){if(ownerID===this.__ownerID)return this;var newMap=this._map.__ensureOwner(ownerID),newList=this._list.__ensureOwner(ownerID);return ownerID?makeOrderedMap(newMap,newList,ownerID,this.__hash):(this.__ownerID=ownerID,this._map=newMap,this._list=newList,this)},OrderedMap.isOrderedMap=isOrderedMap,OrderedMap.prototype[IS_ORDERED_SENTINEL]=!0,OrderedMap.prototype[DELETE]=OrderedMap.prototype.remove;var EMPTY_ORDERED_MAP;createClass(Stack,IndexedCollection),Stack.of=function(){return this(arguments)},Stack.prototype.toString=function(){return this.__toString("Stack [","]")},Stack.prototype.get=function(index,notSetValue){var head=this._head;for(index=wrapIndex(this,index);head&&index--;)head=head.next;return head?head.value:notSetValue},Stack.prototype.peek=function(){return this._head&&this._head.value},Stack.prototype.push=function(){if(0===arguments.length)return this;for(var newSize=this.size+arguments.length,head=this._head,ii=arguments.length-1;ii>=0;ii--)head={value:arguments[ii],next:head};return this.__ownerID?(this.size=newSize,this._head=head,this.__hash=void 0,this.__altered=!0,this):makeStack(newSize,head)},Stack.prototype.pushAll=function(iter){if(iter=IndexedIterable(iter),0===iter.size)return this;assertNotInfinite(iter.size);var newSize=this.size,head=this._head;return iter.reverse().forEach(function(value){newSize++,head={value:value,next:head}}),this.__ownerID?(this.size=newSize,this._head=head,this.__hash=void 0,this.__altered=!0,this):makeStack(newSize,head)},Stack.prototype.pop=function(){return this.slice(1)},Stack.prototype.unshift=function(){return this.push.apply(this,arguments)},Stack.prototype.unshiftAll=function(iter){return this.pushAll(iter)},Stack.prototype.shift=function(){return this.pop.apply(this,arguments)},Stack.prototype.clear=function(){return 0===this.size?this:this.__ownerID?(this.size=0,this._head=void 0,this.__hash=void 0,this.__altered=!0,this):emptyStack()},Stack.prototype.slice=function(begin,end){if(wholeSlice(begin,end,this.size))return this;var resolvedBegin=resolveBegin(begin,this.size),resolvedEnd=resolveEnd(end,this.size);if(resolvedEnd!==this.size)return IndexedCollection.prototype.slice.call(this,begin,end);for(var newSize=this.size-resolvedBegin,head=this._head;resolvedBegin--;)head=head.next;return this.__ownerID?(this.size=newSize,this._head=head,this.__hash=void 0,this.__altered=!0,this):makeStack(newSize,head)},Stack.prototype.__ensureOwner=function(ownerID){return ownerID===this.__ownerID?this:ownerID?makeStack(this.size,this._head,ownerID,this.__hash):(this.__ownerID=ownerID,this.__altered=!1,this)},Stack.prototype.__iterate=function(fn,reverse){if(reverse)return this.reverse().__iterate(fn);for(var iterations=0,node=this._head;node&&fn(node.value,iterations++,this)!==!1;)node=node.next;return iterations},Stack.prototype.__iterator=function(type,reverse){if(reverse)return this.reverse().__iterator(type);var iterations=0,node=this._head;return new src_Iterator__Iterator(function(){if(node){var value=node.value;return node=node.next,iteratorValue(type,iterations++,value)}return iteratorDone()})},Stack.isStack=isStack;var IS_STACK_SENTINEL="@@__IMMUTABLE_STACK__@@",StackPrototype=Stack.prototype;StackPrototype[IS_STACK_SENTINEL]=!0,StackPrototype.withMutations=MapPrototype.withMutations,StackPrototype.asMutable=MapPrototype.asMutable,StackPrototype.asImmutable=MapPrototype.asImmutable,StackPrototype.wasAltered=MapPrototype.wasAltered;var EMPTY_STACK;createClass(src_Set__Set,SetCollection),src_Set__Set.of=function(){return this(arguments)},src_Set__Set.fromKeys=function(value){return this(KeyedIterable(value).keySeq())},src_Set__Set.prototype.toString=function(){return this.__toString("Set {","}")},src_Set__Set.prototype.has=function(value){return this._map.has(value)},src_Set__Set.prototype.add=function(value){return updateSet(this,this._map.set(value,!0))},src_Set__Set.prototype.remove=function(value){return updateSet(this,this._map.remove(value))},src_Set__Set.prototype.clear=function(){return updateSet(this,this._map.clear())},src_Set__Set.prototype.union=function(){var iters=SLICE$0.call(arguments,0);return iters=iters.filter(function(x){return 0!==x.size}),0===iters.length?this:0!==this.size||this.__ownerID||1!==iters.length?this.withMutations(function(set){for(var ii=0;ii<iters.length;ii++)SetIterable(iters[ii]).forEach(function(value){return set.add(value)})}):this.constructor(iters[0])},src_Set__Set.prototype.intersect=function(){var iters=SLICE$0.call(arguments,0);if(0===iters.length)return this;iters=iters.map(function(iter){return SetIterable(iter)});var originalSet=this;return this.withMutations(function(set){originalSet.forEach(function(value){iters.every(function(iter){return iter.includes(value)})||set.remove(value)})})},src_Set__Set.prototype.subtract=function(){var iters=SLICE$0.call(arguments,0);if(0===iters.length)return this;iters=iters.map(function(iter){return SetIterable(iter)});var originalSet=this;return this.withMutations(function(set){originalSet.forEach(function(value){iters.some(function(iter){return iter.includes(value)})&&set.remove(value)})})},src_Set__Set.prototype.merge=function(){return this.union.apply(this,arguments)},src_Set__Set.prototype.mergeWith=function(merger){var iters=SLICE$0.call(arguments,1);return this.union.apply(this,iters)},src_Set__Set.prototype.sort=function(comparator){return OrderedSet(sortFactory(this,comparator))},src_Set__Set.prototype.sortBy=function(mapper,comparator){return OrderedSet(sortFactory(this,comparator,mapper))},src_Set__Set.prototype.wasAltered=function(){return this._map.wasAltered()},src_Set__Set.prototype.__iterate=function(fn,reverse){var this$0=this;return this._map.__iterate(function(_,k){return fn(k,k,this$0)},reverse)},src_Set__Set.prototype.__iterator=function(type,reverse){return this._map.map(function(_,k){return k}).__iterator(type,reverse)},src_Set__Set.prototype.__ensureOwner=function(ownerID){if(ownerID===this.__ownerID)return this;var newMap=this._map.__ensureOwner(ownerID);return ownerID?this.__make(newMap,ownerID):(this.__ownerID=ownerID,this._map=newMap,this)},src_Set__Set.isSet=isSet;var IS_SET_SENTINEL="@@__IMMUTABLE_SET__@@",SetPrototype=src_Set__Set.prototype;SetPrototype[IS_SET_SENTINEL]=!0,SetPrototype[DELETE]=SetPrototype.remove,SetPrototype.mergeDeep=SetPrototype.merge,SetPrototype.mergeDeepWith=SetPrototype.mergeWith,SetPrototype.withMutations=MapPrototype.withMutations,SetPrototype.asMutable=MapPrototype.asMutable,SetPrototype.asImmutable=MapPrototype.asImmutable,SetPrototype.__empty=emptySet,SetPrototype.__make=makeSet;var EMPTY_SET;createClass(OrderedSet,src_Set__Set),OrderedSet.of=function(){return this(arguments)},OrderedSet.fromKeys=function(value){return this(KeyedIterable(value).keySeq())},OrderedSet.prototype.toString=function(){return this.__toString("OrderedSet {","}")},OrderedSet.isOrderedSet=isOrderedSet;var OrderedSetPrototype=OrderedSet.prototype;OrderedSetPrototype[IS_ORDERED_SENTINEL]=!0,OrderedSetPrototype.__empty=emptyOrderedSet,OrderedSetPrototype.__make=makeOrderedSet;var EMPTY_ORDERED_SET;createClass(Record,KeyedCollection),Record.prototype.toString=function(){return this.__toString(recordName(this)+" {","}")},Record.prototype.has=function(k){return this._defaultValues.hasOwnProperty(k)},Record.prototype.get=function(k,notSetValue){if(!this.has(k))return notSetValue;var defaultVal=this._defaultValues[k];return this._map?this._map.get(k,defaultVal):defaultVal},Record.prototype.clear=function(){if(this.__ownerID)return this._map&&this._map.clear(),this;var RecordType=this.constructor;return RecordType._empty||(RecordType._empty=makeRecord(this,emptyMap()))},Record.prototype.set=function(k,v){if(!this.has(k))throw new Error('Cannot set unknown key "'+k+'" on '+recordName(this));var newMap=this._map&&this._map.set(k,v);return this.__ownerID||newMap===this._map?this:makeRecord(this,newMap)},Record.prototype.remove=function(k){if(!this.has(k))return this;var newMap=this._map&&this._map.remove(k);return this.__ownerID||newMap===this._map?this:makeRecord(this,newMap)},Record.prototype.wasAltered=function(){return this._map.wasAltered()},Record.prototype.__iterator=function(type,reverse){var this$0=this;return KeyedIterable(this._defaultValues).map(function(_,k){return this$0.get(k)}).__iterator(type,reverse)},Record.prototype.__iterate=function(fn,reverse){var this$0=this;return KeyedIterable(this._defaultValues).map(function(_,k){return this$0.get(k)}).__iterate(fn,reverse)},Record.prototype.__ensureOwner=function(ownerID){if(ownerID===this.__ownerID)return this;var newMap=this._map&&this._map.__ensureOwner(ownerID);return ownerID?makeRecord(this,newMap,ownerID):(this.__ownerID=ownerID,this._map=newMap,this)};var RecordPrototype=Record.prototype;RecordPrototype[DELETE]=RecordPrototype.remove,RecordPrototype.deleteIn=RecordPrototype.removeIn=MapPrototype.removeIn,RecordPrototype.merge=MapPrototype.merge,RecordPrototype.mergeWith=MapPrototype.mergeWith,RecordPrototype.mergeIn=MapPrototype.mergeIn,RecordPrototype.mergeDeep=MapPrototype.mergeDeep,RecordPrototype.mergeDeepWith=MapPrototype.mergeDeepWith,RecordPrototype.mergeDeepIn=MapPrototype.mergeDeepIn,RecordPrototype.setIn=MapPrototype.setIn,RecordPrototype.update=MapPrototype.update,RecordPrototype.updateIn=MapPrototype.updateIn,RecordPrototype.withMutations=MapPrototype.withMutations,RecordPrototype.asMutable=MapPrototype.asMutable,RecordPrototype.asImmutable=MapPrototype.asImmutable,createClass(Range,IndexedSeq),Range.prototype.toString=function(){return 0===this.size?"Range []":"Range [ "+this._start+"..."+this._end+(this._step>1?" by "+this._step:"")+" ]"},Range.prototype.get=function(index,notSetValue){return this.has(index)?this._start+wrapIndex(this,index)*this._step:notSetValue},Range.prototype.includes=function(searchValue){var possibleIndex=(searchValue-this._start)/this._step;return possibleIndex>=0&&possibleIndex<this.size&&possibleIndex===Math.floor(possibleIndex)},Range.prototype.slice=function(begin,end){return wholeSlice(begin,end,this.size)?this:(begin=resolveBegin(begin,this.size),end=resolveEnd(end,this.size),begin>=end?new Range(0,0):new Range(this.get(begin,this._end),this.get(end,this._end),this._step))},Range.prototype.indexOf=function(searchValue){var offsetValue=searchValue-this._start;if(offsetValue%this._step===0){var index=offsetValue/this._step;if(index>=0&&index<this.size)return index}return-1},Range.prototype.lastIndexOf=function(searchValue){return this.indexOf(searchValue)},Range.prototype.__iterate=function(fn,reverse){for(var maxIndex=this.size-1,step=this._step,value=reverse?this._start+maxIndex*step:this._start,ii=0;maxIndex>=ii;ii++){if(fn(value,ii,this)===!1)return ii+1;value+=reverse?-step:step}return ii},Range.prototype.__iterator=function(type,reverse){var maxIndex=this.size-1,step=this._step,value=reverse?this._start+maxIndex*step:this._start,ii=0;return new src_Iterator__Iterator(function(){var v=value;return value+=reverse?-step:step,ii>maxIndex?iteratorDone():iteratorValue(type,ii++,v)})},Range.prototype.equals=function(other){return other instanceof Range?this._start===other._start&&this._end===other._end&&this._step===other._step:deepEqual(this,other)};var EMPTY_RANGE;createClass(Repeat,IndexedSeq),Repeat.prototype.toString=function(){return 0===this.size?"Repeat []":"Repeat [ "+this._value+" "+this.size+" times ]"},Repeat.prototype.get=function(index,notSetValue){return this.has(index)?this._value:notSetValue},Repeat.prototype.includes=function(searchValue){return is(this._value,searchValue)},Repeat.prototype.slice=function(begin,end){var size=this.size;return wholeSlice(begin,end,size)?this:new Repeat(this._value,resolveEnd(end,size)-resolveBegin(begin,size))},Repeat.prototype.reverse=function(){return this},Repeat.prototype.indexOf=function(searchValue){return is(this._value,searchValue)?0:-1},Repeat.prototype.lastIndexOf=function(searchValue){return is(this._value,searchValue)?this.size:-1},Repeat.prototype.__iterate=function(fn,reverse){for(var ii=0;ii<this.size;ii++)if(fn(this._value,ii,this)===!1)return ii+1;return ii},Repeat.prototype.__iterator=function(type,reverse){var this$0=this,ii=0;return new src_Iterator__Iterator(function(){return ii<this$0.size?iteratorValue(type,ii++,this$0._value):iteratorDone()})},Repeat.prototype.equals=function(other){return other instanceof Repeat?is(this._value,other._value):deepEqual(other)};var EMPTY_REPEAT;Iterable.Iterator=src_Iterator__Iterator,mixin(Iterable,{toArray:function(){assertNotInfinite(this.size);var array=new Array(this.size||0);return this.valueSeq().__iterate(function(v,i){array[i]=v}),array},toIndexedSeq:function(){return new ToIndexedSequence(this)},toJS:function(){return this.toSeq().map(function(value){return value&&"function"==typeof value.toJS?value.toJS():value}).__toJS()},toJSON:function(){return this.toSeq().map(function(value){return value&&"function"==typeof value.toJSON?value.toJSON():value}).__toJS()},toKeyedSeq:function(){return new ToKeyedSequence(this,!0)},toMap:function(){return src_Map__Map(this.toKeyedSeq())},toObject:function(){assertNotInfinite(this.size);var object={};return this.__iterate(function(v,k){object[k]=v}),object},toOrderedMap:function(){return OrderedMap(this.toKeyedSeq())},toOrderedSet:function(){return OrderedSet(isKeyed(this)?this.valueSeq():this)},toSet:function(){return src_Set__Set(isKeyed(this)?this.valueSeq():this)},toSetSeq:function(){return new ToSetSequence(this)},toSeq:function(){return isIndexed(this)?this.toIndexedSeq():isKeyed(this)?this.toKeyedSeq():this.toSetSeq()},toStack:function(){return Stack(isKeyed(this)?this.valueSeq():this)},toList:function(){return List(isKeyed(this)?this.valueSeq():this)},toString:function(){return"[Iterable]"},__toString:function(head,tail){return 0===this.size?head+tail:head+" "+this.toSeq().map(this.__toStringMapper).join(", ")+" "+tail},concat:function(){var values=SLICE$0.call(arguments,0);return reify(this,concatFactory(this,values))},contains:function(searchValue){return this.includes(searchValue)},includes:function(searchValue){return this.some(function(value){return is(value,searchValue)})},entries:function(){return this.__iterator(ITERATE_ENTRIES)},every:function(predicate,context){assertNotInfinite(this.size);var returnValue=!0;return this.__iterate(function(v,k,c){return predicate.call(context,v,k,c)?void 0:(returnValue=!1,!1)}),returnValue},filter:function(predicate,context){return reify(this,filterFactory(this,predicate,context,!0))},find:function(predicate,context,notSetValue){var entry=this.findEntry(predicate,context);return entry?entry[1]:notSetValue},findEntry:function(predicate,context){var found;return this.__iterate(function(v,k,c){return predicate.call(context,v,k,c)?(found=[k,v],!1):void 0}),found},findLastEntry:function(predicate,context){return this.toSeq().reverse().findEntry(predicate,context)},forEach:function(sideEffect,context){return assertNotInfinite(this.size),this.__iterate(context?sideEffect.bind(context):sideEffect)},join:function(separator){assertNotInfinite(this.size),separator=void 0!==separator?""+separator:",";var joined="",isFirst=!0;return this.__iterate(function(v){isFirst?isFirst=!1:joined+=separator,joined+=null!==v&&void 0!==v?v.toString():""}),joined},keys:function(){return this.__iterator(ITERATE_KEYS)},map:function(mapper,context){return reify(this,mapFactory(this,mapper,context))},reduce:function(reducer,initialReduction,context){assertNotInfinite(this.size);var reduction,useFirst;return arguments.length<2?useFirst=!0:reduction=initialReduction,this.__iterate(function(v,k,c){useFirst?(useFirst=!1,reduction=v):reduction=reducer.call(context,reduction,v,k,c)}),reduction},reduceRight:function(reducer,initialReduction,context){var reversed=this.toKeyedSeq().reverse();return reversed.reduce.apply(reversed,arguments)},reverse:function(){return reify(this,reverseFactory(this,!0))},slice:function(begin,end){return reify(this,sliceFactory(this,begin,end,!0))},some:function(predicate,context){return!this.every(not(predicate),context)},sort:function(comparator){return reify(this,sortFactory(this,comparator))},values:function(){return this.__iterator(ITERATE_VALUES)},butLast:function(){return this.slice(0,-1)},isEmpty:function(){return void 0!==this.size?0===this.size:!this.some(function(){return!0})},count:function(predicate,context){return ensureSize(predicate?this.toSeq().filter(predicate,context):this)},countBy:function(grouper,context){return countByFactory(this,grouper,context)},equals:function(other){return deepEqual(this,other)},entrySeq:function(){var iterable=this;if(iterable._cache)return new ArraySeq(iterable._cache);var entriesSequence=iterable.toSeq().map(entryMapper).toIndexedSeq();return entriesSequence.fromEntrySeq=function(){return iterable.toSeq()},entriesSequence},filterNot:function(predicate,context){return this.filter(not(predicate),context)},findLast:function(predicate,context,notSetValue){return this.toKeyedSeq().reverse().find(predicate,context,notSetValue)},first:function(){return this.find(returnTrue)},flatMap:function(mapper,context){return reify(this,flatMapFactory(this,mapper,context))},flatten:function(depth){return reify(this,flattenFactory(this,depth,!0))},fromEntrySeq:function(){return new FromEntriesSequence(this)},get:function(searchKey,notSetValue){return this.find(function(_,key){return is(key,searchKey)},void 0,notSetValue)},getIn:function(searchKeyPath,notSetValue){for(var step,nested=this,iter=forceIterator(searchKeyPath);!(step=iter.next()).done;){var key=step.value;if(nested=nested&&nested.get?nested.get(key,NOT_SET):NOT_SET,nested===NOT_SET)return notSetValue}return nested},groupBy:function(grouper,context){return groupByFactory(this,grouper,context)},has:function(searchKey){return this.get(searchKey,NOT_SET)!==NOT_SET},hasIn:function(searchKeyPath){return this.getIn(searchKeyPath,NOT_SET)!==NOT_SET},isSubset:function(iter){return iter="function"==typeof iter.includes?iter:Iterable(iter),this.every(function(value){return iter.includes(value)})},isSuperset:function(iter){return iter="function"==typeof iter.isSubset?iter:Iterable(iter),iter.isSubset(this)},keySeq:function(){return this.toSeq().map(keyMapper).toIndexedSeq()},last:function(){return this.toSeq().reverse().first()},max:function(comparator){return maxFactory(this,comparator)},maxBy:function(mapper,comparator){return maxFactory(this,comparator,mapper)},min:function(comparator){return maxFactory(this,comparator?neg(comparator):defaultNegComparator)},minBy:function(mapper,comparator){return maxFactory(this,comparator?neg(comparator):defaultNegComparator,mapper)},rest:function(){return this.slice(1)},skip:function(amount){return this.slice(Math.max(0,amount))},skipLast:function(amount){return reify(this,this.toSeq().reverse().skip(amount).reverse())},skipWhile:function(predicate,context){return reify(this,skipWhileFactory(this,predicate,context,!0))},skipUntil:function(predicate,context){return this.skipWhile(not(predicate),context)},sortBy:function(mapper,comparator){return reify(this,sortFactory(this,comparator,mapper))},take:function(amount){return this.slice(0,Math.max(0,amount))},takeLast:function(amount){return reify(this,this.toSeq().reverse().take(amount).reverse())},takeWhile:function(predicate,context){return reify(this,takeWhileFactory(this,predicate,context))},takeUntil:function(predicate,context){return this.takeWhile(not(predicate),context)},valueSeq:function(){return this.toIndexedSeq()},hashCode:function(){return this.__hash||(this.__hash=hashIterable(this))}});var IterablePrototype=Iterable.prototype;IterablePrototype[IS_ITERABLE_SENTINEL]=!0,IterablePrototype[ITERATOR_SYMBOL]=IterablePrototype.values,IterablePrototype.__toJS=IterablePrototype.toArray,IterablePrototype.__toStringMapper=quoteString,IterablePrototype.inspect=IterablePrototype.toSource=function(){return this.toString()},IterablePrototype.chain=IterablePrototype.flatMap,function(){try{Object.defineProperty(IterablePrototype,"length",{get:function(){if(!Iterable.noLengthWarning){var stack;try{throw new Error}catch(error){stack=error.stack}if(-1===stack.indexOf("_wrapObject"))return console&&console.warn&&console.warn("iterable.length has been deprecated, use iterable.size or iterable.count(). This warning will become a silent error in a future version. "+stack),this.size}}})}catch(e){}}(),mixin(KeyedIterable,{flip:function(){return reify(this,flipFactory(this))},findKey:function(predicate,context){var entry=this.findEntry(predicate,context);return entry&&entry[0]},findLastKey:function(predicate,context){return this.toSeq().reverse().findKey(predicate,context)},keyOf:function(searchValue){return this.findKey(function(value){return is(value,searchValue)})},lastKeyOf:function(searchValue){return this.findLastKey(function(value){return is(value,searchValue)})},mapEntries:function(mapper,context){var this$0=this,iterations=0;return reify(this,this.toSeq().map(function(v,k){return mapper.call(context,[k,v],iterations++,this$0)}).fromEntrySeq())},mapKeys:function(mapper,context){var this$0=this;return reify(this,this.toSeq().flip().map(function(k,v){return mapper.call(context,k,v,this$0)}).flip())}});var KeyedIterablePrototype=KeyedIterable.prototype;KeyedIterablePrototype[IS_KEYED_SENTINEL]=!0,KeyedIterablePrototype[ITERATOR_SYMBOL]=IterablePrototype.entries,KeyedIterablePrototype.__toJS=IterablePrototype.toObject,KeyedIterablePrototype.__toStringMapper=function(v,k){return JSON.stringify(k)+": "+quoteString(v)},mixin(IndexedIterable,{toKeyedSeq:function(){return new ToKeyedSequence(this,!1)},filter:function(predicate,context){return reify(this,filterFactory(this,predicate,context,!1))},findIndex:function(predicate,context){var entry=this.findEntry(predicate,context);return entry?entry[0]:-1},indexOf:function(searchValue){var key=this.toKeyedSeq().keyOf(searchValue);return void 0===key?-1:key},lastIndexOf:function(searchValue){return this.toSeq().reverse().indexOf(searchValue)},reverse:function(){return reify(this,reverseFactory(this,!1))},slice:function(begin,end){return reify(this,sliceFactory(this,begin,end,!1))},splice:function(index,removeNum){var numArgs=arguments.length;if(removeNum=Math.max(0|removeNum,0),0===numArgs||2===numArgs&&!removeNum)return this;index=resolveBegin(index,this.size);var spliced=this.slice(0,index);return reify(this,1===numArgs?spliced:spliced.concat(arrCopy(arguments,2),this.slice(index+removeNum)))},findLastIndex:function(predicate,context){var key=this.toKeyedSeq().findLastKey(predicate,context);return void 0===key?-1:key},first:function(){return this.get(0)},flatten:function(depth){return reify(this,flattenFactory(this,depth,!1))},get:function(index,notSetValue){return index=wrapIndex(this,index),0>index||this.size===1/0||void 0!==this.size&&index>this.size?notSetValue:this.find(function(_,key){return key===index},void 0,notSetValue)},has:function(index){return index=wrapIndex(this,index),index>=0&&(void 0!==this.size?this.size===1/0||index<this.size:-1!==this.indexOf(index))},interpose:function(separator){return reify(this,interposeFactory(this,separator))},interleave:function(){var iterables=[this].concat(arrCopy(arguments)),zipped=zipWithFactory(this.toSeq(),IndexedSeq.of,iterables),interleaved=zipped.flatten(!0);return zipped.size&&(interleaved.size=zipped.size*iterables.length),reify(this,interleaved)},last:function(){return this.get(-1)},skipWhile:function(predicate,context){return reify(this,skipWhileFactory(this,predicate,context,!1))},zip:function(){var iterables=[this].concat(arrCopy(arguments));return reify(this,zipWithFactory(this,defaultZipper,iterables))},zipWith:function(zipper){var iterables=arrCopy(arguments);return iterables[0]=this,reify(this,zipWithFactory(this,zipper,iterables))}}),IndexedIterable.prototype[IS_INDEXED_SENTINEL]=!0,IndexedIterable.prototype[IS_ORDERED_SENTINEL]=!0,mixin(SetIterable,{get:function(value,notSetValue){return this.has(value)?value:notSetValue},includes:function(value){return this.has(value)},keySeq:function(){return this.valueSeq()}}),SetIterable.prototype.has=IterablePrototype.includes,mixin(KeyedSeq,KeyedIterable.prototype),mixin(IndexedSeq,IndexedIterable.prototype),mixin(SetSeq,SetIterable.prototype),mixin(KeyedCollection,KeyedIterable.prototype),mixin(IndexedCollection,IndexedIterable.prototype),mixin(SetCollection,SetIterable.prototype);var Immutable={Iterable:Iterable,Seq:Seq,Collection:Collection,Map:src_Map__Map,OrderedMap:OrderedMap,List:List,Stack:Stack,Set:src_Set__Set,OrderedSet:OrderedSet,Record:Record,Range:Range,Repeat:Repeat,is:is,fromJS:fromJS};return Immutable});


},{}],3:[function(require,module,exports){
module.exports={"default":require("core-js/library/fn/array/from"),__esModule:!0};


},{"core-js/library/fn/array/from":16}],4:[function(require,module,exports){
module.exports={"default":require("core-js/library/fn/get-iterator"),__esModule:!0};


},{"core-js/library/fn/get-iterator":17}],5:[function(require,module,exports){
module.exports={"default":require("core-js/library/fn/is-iterable"),__esModule:!0};


},{"core-js/library/fn/is-iterable":18}],6:[function(require,module,exports){
module.exports={"default":require("core-js/library/fn/object/create"),__esModule:!0};


},{"core-js/library/fn/object/create":19}],7:[function(require,module,exports){
module.exports={"default":require("core-js/library/fn/object/define-property"),__esModule:!0};


},{"core-js/library/fn/object/define-property":20}],8:[function(require,module,exports){
module.exports={"default":require("core-js/library/fn/object/keys"),__esModule:!0};


},{"core-js/library/fn/object/keys":21}],9:[function(require,module,exports){
module.exports={"default":require("core-js/library/fn/symbol"),__esModule:!0};


},{"core-js/library/fn/symbol":22}],10:[function(require,module,exports){
"use strict";var _Object$defineProperty=require("babel-runtime/core-js/object/define-property")["default"];exports["default"]=function(obj,key,value){return _Object$defineProperty(obj,key,{value:value,enumerable:!0,configurable:!0,writable:!0})},exports.__esModule=!0;


},{"babel-runtime/core-js/object/define-property":7}],11:[function(require,module,exports){
"use strict";exports["default"]=function(obj){return obj&&obj.__esModule?obj:{"default":obj}},exports.__esModule=!0;


},{}],12:[function(require,module,exports){
"use strict";exports["default"]=function(obj){return obj&&obj.__esModule?obj["default"]:obj},exports.__esModule=!0;


},{}],13:[function(require,module,exports){
"use strict";var _isIterable=require("babel-runtime/core-js/is-iterable")["default"],_getIterator=require("babel-runtime/core-js/get-iterator")["default"];exports["default"]=function(arr,i){if(Array.isArray(arr))return arr;if(_isIterable(Object(arr))){var _arr=[],_n=!0,_d=!1,_e=void 0;try{for(var _s,_i=_getIterator(arr);!(_n=(_s=_i.next()).done)&&(_arr.push(_s.value),!i||_arr.length!==i);_n=!0);}catch(err){_d=!0,_e=err}finally{try{!_n&&_i["return"]&&_i["return"]()}finally{if(_d)throw _e}}return _arr}throw new TypeError("Invalid attempt to destructure non-iterable instance")},exports.__esModule=!0;


},{"babel-runtime/core-js/get-iterator":4,"babel-runtime/core-js/is-iterable":5}],14:[function(require,module,exports){
"use strict";var _Array$from=require("babel-runtime/core-js/array/from")["default"];exports["default"]=function(arr){return Array.isArray(arr)?arr:_Array$from(arr)},exports.__esModule=!0;


},{"babel-runtime/core-js/array/from":3}],15:[function(require,module,exports){
"use strict";var _Array$from=require("babel-runtime/core-js/array/from")["default"];exports["default"]=function(arr){if(Array.isArray(arr)){for(var i=0,arr2=Array(arr.length);i<arr.length;i++)arr2[i]=arr[i];return arr2}return _Array$from(arr)},exports.__esModule=!0;


},{"babel-runtime/core-js/array/from":3}],16:[function(require,module,exports){
require("../../modules/es6.string.iterator"),require("../../modules/es6.array.from"),module.exports=require("../../modules/$").core.Array.from;


},{"../../modules/$":34,"../../modules/es6.array.from":43,"../../modules/es6.string.iterator":46}],17:[function(require,module,exports){
require("../modules/web.dom.iterable"),require("../modules/es6.string.iterator"),require("../modules/core.iter-helpers"),module.exports=require("../modules/$").core.getIterator;


},{"../modules/$":34,"../modules/core.iter-helpers":42,"../modules/es6.string.iterator":46,"../modules/web.dom.iterable":48}],18:[function(require,module,exports){
require("../modules/web.dom.iterable"),require("../modules/es6.string.iterator"),require("../modules/core.iter-helpers"),module.exports=require("../modules/$").core.isIterable;


},{"../modules/$":34,"../modules/core.iter-helpers":42,"../modules/es6.string.iterator":46,"../modules/web.dom.iterable":48}],19:[function(require,module,exports){
var $=require("../../modules/$");module.exports=function(P,D){return $.create(P,D)};


},{"../../modules/$":34}],20:[function(require,module,exports){
var $=require("../../modules/$");module.exports=function(it,key,desc){return $.setDesc(it,key,desc)};


},{"../../modules/$":34}],21:[function(require,module,exports){
require("../../modules/es6.object.statics-accept-primitives"),module.exports=require("../../modules/$").core.Object.keys;


},{"../../modules/$":34,"../../modules/es6.object.statics-accept-primitives":45}],22:[function(require,module,exports){
require("../../modules/es6.symbol"),module.exports=require("../../modules/$").core.Symbol;


},{"../../modules/$":34,"../../modules/es6.symbol":47}],23:[function(require,module,exports){
function assert(condition,msg1,msg2){if(!condition)throw TypeError(msg2?msg1+msg2:msg1)}var $=require("./$");assert.def=$.assertDefined,assert.fn=function(it){if(!$.isFunction(it))throw TypeError(it+" is not a function!");return it},assert.obj=function(it){if(!$.isObject(it))throw TypeError(it+" is not an object!");return it},assert.inst=function(it,Constructor,name){if(!(it instanceof Constructor))throw TypeError(name+": use the 'new' operator!");return it},module.exports=assert;


},{"./$":34}],24:[function(require,module,exports){
function cof(it){return toString.call(it).slice(8,-1)}var $=require("./$"),TAG=require("./$.wks")("toStringTag"),toString={}.toString;cof.classof=function(it){var O,T;return void 0==it?void 0===it?"Undefined":"Null":"string"==typeof(T=(O=Object(it))[TAG])?T:cof(O)},cof.set=function(it,tag,stat){it&&!$.has(it=stat?it:it.prototype,TAG)&&$.hide(it,TAG,tag)},module.exports=cof;


},{"./$":34,"./$.wks":41}],25:[function(require,module,exports){
var assertFunction=require("./$.assert").fn;module.exports=function(fn,that,length){if(assertFunction(fn),~length&&void 0===that)return fn;switch(length){case 1:return function(a){return fn.call(that,a)};case 2:return function(a,b){return fn.call(that,a,b)};case 3:return function(a,b,c){return fn.call(that,a,b,c)}}return function(){return fn.apply(that,arguments)}};


},{"./$.assert":23}],26:[function(require,module,exports){
function ctx(fn,that){return function(){return fn.apply(that,arguments)}}function $def(type,name,source){var key,own,out,exp,isGlobal=type&$def.G,isProto=type&$def.P,target=isGlobal?global:type&$def.S?global[name]:(global[name]||{}).prototype,exports=isGlobal?core:core[name]||(core[name]={});isGlobal&&(source=name);for(key in source)own=!(type&$def.F)&&target&&key in target,own&&key in exports||(out=own?target[key]:source[key],isGlobal&&!isFunction(target[key])?exp=source[key]:type&$def.B&&own?exp=ctx(out,global):type&$def.W&&target[key]==out?!function(C){exp=function(param){return this instanceof C?new C(param):C(param)},exp.prototype=C.prototype}(out):exp=isProto&&isFunction(out)?ctx(Function.call,out):out,exports[key]=exp,isProto&&((exports.prototype||(exports.prototype={}))[key]=out))}var $=require("./$"),global=$.g,core=$.core,isFunction=$.isFunction;$def.F=1,$def.G=2,$def.S=4,$def.P=8,$def.B=16,$def.W=32,module.exports=$def;


},{"./$":34}],27:[function(require,module,exports){
var $=require("./$");module.exports=function(it){var keys=$.getKeys(it),getDesc=$.getDesc,getSymbols=$.getSymbols;return getSymbols&&$.each.call(getSymbols(it),function(key){getDesc(it,key).enumerable&&keys.push(key)}),keys};


},{"./$":34}],28:[function(require,module,exports){
module.exports=function($){return $.FW=!1,$.path=$.core,$};


},{}],29:[function(require,module,exports){
function getWindowNames(it){try{return getNames(it)}catch(e){return windowNames.slice()}}var $=require("./$"),toString={}.toString,getNames=$.getNames,windowNames="object"==typeof window&&Object.getOwnPropertyNames?Object.getOwnPropertyNames(window):[];module.exports.get=function(it){return windowNames&&"[object Window]"==toString.call(it)?getWindowNames(it):getNames($.toObject(it))};


},{"./$":34}],30:[function(require,module,exports){
function close(iterator){var ret=iterator["return"];void 0!==ret&&assertObject(ret.call(iterator))}function call(iterator,fn,value,entries){try{return entries?fn(assertObject(value)[0],value[1]):fn(value)}catch(e){throw close(iterator),e}}var assertObject=require("./$.assert").obj;call.close=close,module.exports=call;


},{"./$.assert":23}],31:[function(require,module,exports){
var $def=require("./$.def"),$redef=require("./$.redef"),$=require("./$"),cof=require("./$.cof"),$iter=require("./$.iter"),SYMBOL_ITERATOR=require("./$.wks")("iterator"),FF_ITERATOR="@@iterator",KEYS="keys",VALUES="values",Iterators=$iter.Iterators;module.exports=function(Base,NAME,Constructor,next,DEFAULT,IS_SET,FORCE){function createMethod(kind){function $$(that){return new Constructor(that,kind)}switch(kind){case KEYS:return function(){return $$(this)};case VALUES:return function(){return $$(this)}}return function(){return $$(this)}}$iter.create(Constructor,NAME,next);var methods,key,TAG=NAME+" Iterator",proto=Base.prototype,_native=proto[SYMBOL_ITERATOR]||proto[FF_ITERATOR]||DEFAULT&&proto[DEFAULT],_default=_native||createMethod(DEFAULT);if(_native){var IteratorPrototype=$.getProto(_default.call(new Base));cof.set(IteratorPrototype,TAG,!0),$.FW&&$.has(proto,FF_ITERATOR)&&$iter.set(IteratorPrototype,$.that)}if(($.FW||FORCE)&&$iter.set(proto,_default),Iterators[NAME]=_default,Iterators[TAG]=$.that,DEFAULT)if(methods={keys:IS_SET?_default:createMethod(KEYS),values:DEFAULT==VALUES?_default:createMethod(VALUES),entries:DEFAULT!=VALUES?_default:createMethod("entries")},FORCE)for(key in methods)key in proto||$redef(proto,key,methods[key]);else $def($def.P+$def.F*$iter.BUGGY,NAME,methods)};


},{"./$":34,"./$.cof":24,"./$.def":26,"./$.iter":33,"./$.redef":36,"./$.wks":41}],32:[function(require,module,exports){
var SYMBOL_ITERATOR=require("./$.wks")("iterator"),SAFE_CLOSING=!1;try{var riter=[7][SYMBOL_ITERATOR]();riter["return"]=function(){SAFE_CLOSING=!0},Array.from(riter,function(){throw 2})}catch(e){}module.exports=function(exec){if(!SAFE_CLOSING)return!1;var safe=!1;try{var arr=[7],iter=arr[SYMBOL_ITERATOR]();iter.next=function(){safe=!0},arr[SYMBOL_ITERATOR]=function(){return iter},exec(arr)}catch(e){}return safe};


},{"./$.wks":41}],33:[function(require,module,exports){
"use strict";function setIterator(O,value){$.hide(O,SYMBOL_ITERATOR,value),FF_ITERATOR in[]&&$.hide(O,FF_ITERATOR,value)}var $=require("./$"),cof=require("./$.cof"),classof=cof.classof,assert=require("./$.assert"),assertObject=assert.obj,SYMBOL_ITERATOR=require("./$.wks")("iterator"),FF_ITERATOR="@@iterator",Iterators=require("./$.shared")("iterators"),IteratorPrototype={};setIterator(IteratorPrototype,$.that),module.exports={BUGGY:"keys"in[]&&!("next"in[].keys()),Iterators:Iterators,step:function(done,value){return{value:value,done:!!done}},is:function(it){var O=Object(it),Symbol=$.g.Symbol;return(Symbol&&Symbol.iterator||FF_ITERATOR)in O||SYMBOL_ITERATOR in O||$.has(Iterators,classof(O))},get:function(it){var getIter,Symbol=$.g.Symbol;return void 0!=it&&(getIter=it[Symbol&&Symbol.iterator||FF_ITERATOR]||it[SYMBOL_ITERATOR]||Iterators[classof(it)]),assert($.isFunction(getIter),it," is not iterable!"),assertObject(getIter.call(it))},set:setIterator,create:function(Constructor,NAME,next,proto){Constructor.prototype=$.create(proto||IteratorPrototype,{next:$.desc(1,next)}),cof.set(Constructor,NAME+" Iterator")}};


},{"./$":34,"./$.assert":23,"./$.cof":24,"./$.shared":37,"./$.wks":41}],34:[function(require,module,exports){
"use strict";function toInteger(it){return isNaN(it=+it)?0:(it>0?floor:ceil)(it)}function desc(bitmap,value){return{enumerable:!(1&bitmap),configurable:!(2&bitmap),writable:!(4&bitmap),value:value}}function simpleSet(object,key,value){return object[key]=value,object}function createDefiner(bitmap){return DESC?function(object,key,value){return $.setDesc(object,key,desc(bitmap,value))}:simpleSet}function isObject(it){return null!==it&&("object"==typeof it||"function"==typeof it)}function isFunction(it){return"function"==typeof it}function assertDefined(it){if(void 0==it)throw TypeError("Can't call method on  "+it);return it}var global="undefined"!=typeof self?self:Function("return this")(),core={},defineProperty=Object.defineProperty,hasOwnProperty={}.hasOwnProperty,ceil=Math.ceil,floor=Math.floor,max=Math.max,min=Math.min,DESC=!!function(){try{return 2==defineProperty({},"a",{get:function(){return 2}}).a}catch(e){}}(),hide=createDefiner(1),$=module.exports=require("./$.fw")({g:global,core:core,html:global.document&&document.documentElement,isObject:isObject,isFunction:isFunction,that:function(){return this},toInteger:toInteger,toLength:function(it){return it>0?min(toInteger(it),9007199254740991):0},toIndex:function(index,length){return index=toInteger(index),0>index?max(index+length,0):min(index,length)},has:function(it,key){return hasOwnProperty.call(it,key)},create:Object.create,getProto:Object.getPrototypeOf,DESC:DESC,desc:desc,getDesc:Object.getOwnPropertyDescriptor,setDesc:defineProperty,setDescs:Object.defineProperties,getKeys:Object.keys,getNames:Object.getOwnPropertyNames,getSymbols:Object.getOwnPropertySymbols,assertDefined:assertDefined,ES5Object:Object,toObject:function(it){return $.ES5Object(assertDefined(it))},hide:hide,def:createDefiner(0),set:global.Symbol?simpleSet:hide,each:[].forEach});"undefined"!=typeof __e&&(__e=core),"undefined"!=typeof __g&&(__g=global);


},{"./$.fw":28}],35:[function(require,module,exports){
var $=require("./$");module.exports=function(object,el){for(var key,O=$.toObject(object),keys=$.getKeys(O),length=keys.length,index=0;length>index;)if(O[key=keys[index++]]===el)return key};


},{"./$":34}],36:[function(require,module,exports){
module.exports=require("./$").hide;


},{"./$":34}],37:[function(require,module,exports){
var $=require("./$"),SHARED="__core-js_shared__",store=$.g[SHARED]||($.g[SHARED]={});module.exports=function(key){return store[key]||(store[key]={})};


},{"./$":34}],38:[function(require,module,exports){
var $=require("./$");module.exports=function(TO_STRING){return function(that,pos){var a,b,s=String($.assertDefined(that)),i=$.toInteger(pos),l=s.length;return 0>i||i>=l?TO_STRING?"":void 0:(a=s.charCodeAt(i),55296>a||a>56319||i+1===l||(b=s.charCodeAt(i+1))<56320||b>57343?TO_STRING?s.charAt(i):a:TO_STRING?s.slice(i,i+2):(a-55296<<10)+(b-56320)+65536)}};


},{"./$":34}],39:[function(require,module,exports){
function uid(key){return"Symbol(".concat(void 0===key?"":key,")_",(++sid+Math.random()).toString(36))}var sid=0;uid.safe=require("./$").g.Symbol||uid,module.exports=uid;


},{"./$":34}],40:[function(require,module,exports){
module.exports=function(){};


},{}],41:[function(require,module,exports){
var global=require("./$").g,store=require("./$.shared")("wks");module.exports=function(name){return store[name]||(store[name]=global.Symbol&&global.Symbol[name]||require("./$.uid").safe("Symbol."+name))};


},{"./$":34,"./$.shared":37,"./$.uid":39}],42:[function(require,module,exports){
var core=require("./$").core,$iter=require("./$.iter");core.isIterable=$iter.is,core.getIterator=$iter.get;


},{"./$":34,"./$.iter":33}],43:[function(require,module,exports){
var $=require("./$"),ctx=require("./$.ctx"),$def=require("./$.def"),$iter=require("./$.iter"),call=require("./$.iter-call");$def($def.S+$def.F*!require("./$.iter-detect")(function(iter){Array.from(iter)}),"Array",{from:function(arrayLike){var length,result,step,iterator,O=Object($.assertDefined(arrayLike)),mapfn=arguments[1],mapping=void 0!==mapfn,f=mapping?ctx(mapfn,arguments[2],2):void 0,index=0;if($iter.is(O))for(iterator=$iter.get(O),result=new("function"==typeof this?this:Array);!(step=iterator.next()).done;index++)result[index]=mapping?call(iterator,f,[step.value,index],!0):step.value;else for(result=new("function"==typeof this?this:Array)(length=$.toLength(O.length));length>index;index++)result[index]=mapping?f(O[index],index):O[index];return result.length=index,result}});


},{"./$":34,"./$.ctx":25,"./$.def":26,"./$.iter":33,"./$.iter-call":30,"./$.iter-detect":32}],44:[function(require,module,exports){
var $=require("./$"),setUnscope=require("./$.unscope"),ITER=require("./$.uid").safe("iter"),$iter=require("./$.iter"),step=$iter.step,Iterators=$iter.Iterators;require("./$.iter-define")(Array,"Array",function(iterated,kind){$.set(this,ITER,{o:$.toObject(iterated),i:0,k:kind})},function(){var iter=this[ITER],O=iter.o,kind=iter.k,index=iter.i++;return!O||index>=O.length?(iter.o=void 0,step(1)):"keys"==kind?step(0,index):"values"==kind?step(0,O[index]):step(0,[index,O[index]])},"values"),Iterators.Arguments=Iterators.Array,setUnscope("keys"),setUnscope("values"),setUnscope("entries");


},{"./$":34,"./$.iter":33,"./$.iter-define":31,"./$.uid":39,"./$.unscope":40}],45:[function(require,module,exports){
var $=require("./$"),$def=require("./$.def"),isObject=$.isObject,toObject=$.toObject;$.each.call("freeze,seal,preventExtensions,isFrozen,isSealed,isExtensible,getOwnPropertyDescriptor,getPrototypeOf,keys,getOwnPropertyNames".split(","),function(KEY,ID){var fn=($.core.Object||{})[KEY]||Object[KEY],forced=0,method={};method[KEY]=0==ID?function(it){return isObject(it)?fn(it):it}:1==ID?function(it){return isObject(it)?fn(it):it}:2==ID?function(it){return isObject(it)?fn(it):it}:3==ID?function(it){return isObject(it)?fn(it):!0}:4==ID?function(it){return isObject(it)?fn(it):!0}:5==ID?function(it){return isObject(it)?fn(it):!1}:6==ID?function(it,key){return fn(toObject(it),key)}:7==ID?function(it){return fn(Object($.assertDefined(it)))}:8==ID?function(it){return fn(toObject(it))}:require("./$.get-names").get;try{fn("z")}catch(e){forced=1}$def($def.S+$def.F*forced,"Object",method)});


},{"./$":34,"./$.def":26,"./$.get-names":29}],46:[function(require,module,exports){
var set=require("./$").set,$at=require("./$.string-at")(!0),ITER=require("./$.uid").safe("iter"),$iter=require("./$.iter"),step=$iter.step;require("./$.iter-define")(String,"String",function(iterated){set(this,ITER,{o:String(iterated),i:0})},function(){var point,iter=this[ITER],O=iter.o,index=iter.i;return index>=O.length?step(1):(point=$at(O,index),iter.i+=point.length,step(0,point))});


},{"./$":34,"./$.iter":33,"./$.iter-define":31,"./$.string-at":38,"./$.uid":39}],47:[function(require,module,exports){
"use strict";function wrap(tag){var sym=AllSymbols[tag]=$.set($create($Symbol.prototype),TAG,tag);return DESC&&setter&&setSymbolDesc(ObjectProto,tag,{configurable:!0,set:function(value){has(this,HIDDEN)&&has(this[HIDDEN],tag)&&(this[HIDDEN][tag]=!1),setSymbolDesc(this,tag,desc(1,value))}}),sym}function defineProperty(it,key,D){return D&&has(AllSymbols,key)?(D.enumerable?(has(it,HIDDEN)&&it[HIDDEN][key]&&(it[HIDDEN][key]=!1),D=$create(D,{enumerable:desc(0,!1)})):(has(it,HIDDEN)||setDesc(it,HIDDEN,desc(1,{})),it[HIDDEN][key]=!0),setSymbolDesc(it,key,D)):setDesc(it,key,D)}function defineProperties(it,P){assertObject(it);for(var key,keys=enumKeys(P=toObject(P)),i=0,l=keys.length;l>i;)defineProperty(it,key=keys[i++],P[key]);return it}function create(it,P){return void 0===P?$create(it):defineProperties($create(it),P)}function propertyIsEnumerable(key){var E=_propertyIsEnumerable.call(this,key);return E||!has(this,key)||!has(AllSymbols,key)||has(this,HIDDEN)&&this[HIDDEN][key]?E:!0}function getOwnPropertyDescriptor(it,key){var D=getDesc(it=toObject(it),key);return!D||!has(AllSymbols,key)||has(it,HIDDEN)&&it[HIDDEN][key]||(D.enumerable=!0),D}function getOwnPropertyNames(it){for(var key,names=getNames(toObject(it)),result=[],i=0;names.length>i;)has(AllSymbols,key=names[i++])||key==HIDDEN||result.push(key);return result}function getOwnPropertySymbols(it){for(var key,names=getNames(toObject(it)),result=[],i=0;names.length>i;)has(AllSymbols,key=names[i++])&&result.push(AllSymbols[key]);return result}var $=require("./$"),setTag=require("./$.cof").set,uid=require("./$.uid"),shared=require("./$.shared"),$def=require("./$.def"),$redef=require("./$.redef"),keyOf=require("./$.keyof"),enumKeys=require("./$.enum-keys"),assertObject=require("./$.assert").obj,ObjectProto=Object.prototype,DESC=$.DESC,has=$.has,$create=$.create,getDesc=$.getDesc,setDesc=$.setDesc,desc=$.desc,$names=require("./$.get-names"),getNames=$names.get,toObject=$.toObject,$Symbol=$.g.Symbol,setter=!1,TAG=uid("tag"),HIDDEN=uid("hidden"),_propertyIsEnumerable={}.propertyIsEnumerable,SymbolRegistry=shared("symbol-registry"),AllSymbols=shared("symbols"),useNative=$.isFunction($Symbol),setSymbolDesc=DESC?function(){try{return $create(setDesc({},HIDDEN,{get:function(){return setDesc(this,HIDDEN,{value:!1})[HIDDEN]}}))[HIDDEN]||setDesc}catch(e){return function(it,key,D){var protoDesc=getDesc(ObjectProto,key);protoDesc&&delete ObjectProto[key],setDesc(it,key,D),protoDesc&&it!==ObjectProto&&setDesc(ObjectProto,key,protoDesc)}}}():setDesc;useNative||($Symbol=function(){if(this instanceof $Symbol)throw TypeError("Symbol is not a constructor");return wrap(uid(arguments[0]))},$redef($Symbol.prototype,"toString",function(){return this[TAG]}),$.create=create,$.setDesc=defineProperty,$.getDesc=getOwnPropertyDescriptor,$.setDescs=defineProperties,$.getNames=$names.get=getOwnPropertyNames,$.getSymbols=getOwnPropertySymbols,$.DESC&&$.FW&&$redef(ObjectProto,"propertyIsEnumerable",propertyIsEnumerable,!0));var symbolStatics={"for":function(key){return has(SymbolRegistry,key+="")?SymbolRegistry[key]:SymbolRegistry[key]=$Symbol(key)},keyFor:function(key){return keyOf(SymbolRegistry,key)},useSetter:function(){setter=!0},useSimple:function(){setter=!1}};$.each.call("hasInstance,isConcatSpreadable,iterator,match,replace,search,species,split,toPrimitive,toStringTag,unscopables".split(","),function(it){var sym=require("./$.wks")(it);symbolStatics[it]=useNative?sym:wrap(sym)}),setter=!0,$def($def.G+$def.W,{Symbol:$Symbol}),$def($def.S,"Symbol",symbolStatics),$def($def.S+$def.F*!useNative,"Object",{create:create,defineProperty:defineProperty,defineProperties:defineProperties,getOwnPropertyDescriptor:getOwnPropertyDescriptor,getOwnPropertyNames:getOwnPropertyNames,getOwnPropertySymbols:getOwnPropertySymbols}),setTag($Symbol,"Symbol"),setTag(Math,"Math",!0),setTag($.g.JSON,"JSON",!0);


},{"./$":34,"./$.assert":23,"./$.cof":24,"./$.def":26,"./$.enum-keys":27,"./$.get-names":29,"./$.keyof":35,"./$.redef":36,"./$.shared":37,"./$.uid":39,"./$.wks":41}],48:[function(require,module,exports){
require("./es6.array.iterator");var $=require("./$"),Iterators=require("./$.iter").Iterators,ITERATOR=require("./$.wks")("iterator"),ArrayValues=Iterators.Array,NL=$.g.NodeList,HTC=$.g.HTMLCollection,NLProto=NL&&NL.prototype,HTCProto=HTC&&HTC.prototype;$.FW&&(!NL||ITERATOR in NLProto||$.hide(NLProto,ITERATOR,ArrayValues),!HTC||ITERATOR in HTCProto||$.hide(HTCProto,ITERATOR,ArrayValues)),Iterators.NodeList=Iterators.HTMLCollection=ArrayValues;


},{"./$":34,"./$.iter":33,"./$.wks":41,"./es6.array.iterator":44}],49:[function(require,module,exports){
!function(global,factory){"object"==typeof exports&&"undefined"!=typeof module?module.exports=factory():"function"==typeof define&&define.amd?define(factory):global.Immutable=factory()}(this,function(){"use strict";function createClass(ctor,superClass){superClass&&(ctor.prototype=Object.create(superClass.prototype)),ctor.prototype.constructor=ctor}function MakeRef(ref){return ref.value=!1,ref}function SetRef(ref){ref&&(ref.value=!0)}function OwnerID(){}function arrCopy(arr,offset){offset=offset||0;for(var len=Math.max(0,arr.length-offset),newArr=new Array(len),ii=0;len>ii;ii++)newArr[ii]=arr[ii+offset];return newArr}function ensureSize(iter){return void 0===iter.size&&(iter.size=iter.__iterate(returnTrue)),iter.size}function wrapIndex(iter,index){return index>=0?+index:ensureSize(iter)+ +index}function returnTrue(){return!0}function wholeSlice(begin,end,size){return(0===begin||void 0!==size&&-size>=begin)&&(void 0===end||void 0!==size&&end>=size)}function resolveBegin(begin,size){return resolveIndex(begin,size,0)}function resolveEnd(end,size){return resolveIndex(end,size,size)}function resolveIndex(index,size,defaultIndex){return void 0===index?defaultIndex:0>index?Math.max(0,size+index):void 0===size?index:Math.min(size,index)}function Iterable(value){return isIterable(value)?value:Seq(value)}function KeyedIterable(value){return isKeyed(value)?value:KeyedSeq(value)}function IndexedIterable(value){return isIndexed(value)?value:IndexedSeq(value)}function SetIterable(value){return isIterable(value)&&!isAssociative(value)?value:SetSeq(value)}function isIterable(maybeIterable){return!(!maybeIterable||!maybeIterable[IS_ITERABLE_SENTINEL])}function isKeyed(maybeKeyed){return!(!maybeKeyed||!maybeKeyed[IS_KEYED_SENTINEL])}function isIndexed(maybeIndexed){return!(!maybeIndexed||!maybeIndexed[IS_INDEXED_SENTINEL])}function isAssociative(maybeAssociative){return isKeyed(maybeAssociative)||isIndexed(maybeAssociative)}function isOrdered(maybeOrdered){return!(!maybeOrdered||!maybeOrdered[IS_ORDERED_SENTINEL])}function src_Iterator__Iterator(next){this.next=next}function iteratorValue(type,k,v,iteratorResult){var value=0===type?k:1===type?v:[k,v];return iteratorResult?iteratorResult.value=value:iteratorResult={value:value,done:!1},iteratorResult}function iteratorDone(){return{value:void 0,done:!0}}function hasIterator(maybeIterable){return!!getIteratorFn(maybeIterable)}function isIterator(maybeIterator){return maybeIterator&&"function"==typeof maybeIterator.next}function getIterator(iterable){var iteratorFn=getIteratorFn(iterable);return iteratorFn&&iteratorFn.call(iterable)}function getIteratorFn(iterable){var iteratorFn=iterable&&(REAL_ITERATOR_SYMBOL&&iterable[REAL_ITERATOR_SYMBOL]||iterable[FAUX_ITERATOR_SYMBOL]);return"function"==typeof iteratorFn?iteratorFn:void 0}function isArrayLike(value){return value&&"number"==typeof value.length}function Seq(value){return null===value||void 0===value?emptySequence():isIterable(value)?value.toSeq():seqFromValue(value)}function KeyedSeq(value){return null===value||void 0===value?emptySequence().toKeyedSeq():isIterable(value)?isKeyed(value)?value.toSeq():value.fromEntrySeq():keyedSeqFromValue(value)}function IndexedSeq(value){return null===value||void 0===value?emptySequence():isIterable(value)?isKeyed(value)?value.entrySeq():value.toIndexedSeq():indexedSeqFromValue(value)}function SetSeq(value){return(null===value||void 0===value?emptySequence():isIterable(value)?isKeyed(value)?value.entrySeq():value:indexedSeqFromValue(value)).toSetSeq()}function ArraySeq(array){this._array=array,this.size=array.length}function ObjectSeq(object){var keys=Object.keys(object);this._object=object,this._keys=keys,this.size=keys.length}function IterableSeq(iterable){this._iterable=iterable,this.size=iterable.length||iterable.size}function IteratorSeq(iterator){this._iterator=iterator,this._iteratorCache=[]}function isSeq(maybeSeq){return!(!maybeSeq||!maybeSeq[IS_SEQ_SENTINEL])}function emptySequence(){return EMPTY_SEQ||(EMPTY_SEQ=new ArraySeq([]))}function keyedSeqFromValue(value){var seq=Array.isArray(value)?new ArraySeq(value).fromEntrySeq():isIterator(value)?new IteratorSeq(value).fromEntrySeq():hasIterator(value)?new IterableSeq(value).fromEntrySeq():"object"==typeof value?new ObjectSeq(value):void 0;if(!seq)throw new TypeError("Expected Array or iterable object of [k, v] entries, or keyed object: "+value);return seq}function indexedSeqFromValue(value){var seq=maybeIndexedSeqFromValue(value);if(!seq)throw new TypeError("Expected Array or iterable object of values: "+value);return seq}function seqFromValue(value){var seq=maybeIndexedSeqFromValue(value)||"object"==typeof value&&new ObjectSeq(value);if(!seq)throw new TypeError("Expected Array or iterable object of values, or keyed object: "+value);return seq}function maybeIndexedSeqFromValue(value){return isArrayLike(value)?new ArraySeq(value):isIterator(value)?new IteratorSeq(value):hasIterator(value)?new IterableSeq(value):void 0}function seqIterate(seq,fn,reverse,useKeys){var cache=seq._cache;if(cache){for(var maxIndex=cache.length-1,ii=0;maxIndex>=ii;ii++){var entry=cache[reverse?maxIndex-ii:ii];if(fn(entry[1],useKeys?entry[0]:ii,seq)===!1)return ii+1}return ii}return seq.__iterateUncached(fn,reverse)}function seqIterator(seq,type,reverse,useKeys){var cache=seq._cache;if(cache){var maxIndex=cache.length-1,ii=0;return new src_Iterator__Iterator(function(){var entry=cache[reverse?maxIndex-ii:ii];return ii++>maxIndex?iteratorDone():iteratorValue(type,useKeys?entry[0]:ii-1,entry[1])})}return seq.__iteratorUncached(type,reverse)}function Collection(){throw TypeError("Abstract")}function KeyedCollection(){}function IndexedCollection(){}function SetCollection(){}function is(valueA,valueB){if(valueA===valueB||valueA!==valueA&&valueB!==valueB)return!0;if(!valueA||!valueB)return!1;if("function"==typeof valueA.valueOf&&"function"==typeof valueB.valueOf){if(valueA=valueA.valueOf(),valueB=valueB.valueOf(),valueA===valueB||valueA!==valueA&&valueB!==valueB)return!0;if(!valueA||!valueB)return!1}return"function"==typeof valueA.equals&&"function"==typeof valueB.equals&&valueA.equals(valueB)?!0:!1}function fromJS(json,converter){return converter?fromJSWith(converter,json,"",{"":json}):fromJSDefault(json)}function fromJSWith(converter,json,key,parentJSON){return Array.isArray(json)?converter.call(parentJSON,key,IndexedSeq(json).map(function(v,k){return fromJSWith(converter,v,k,json)})):isPlainObj(json)?converter.call(parentJSON,key,KeyedSeq(json).map(function(v,k){return fromJSWith(converter,v,k,json)})):json}function fromJSDefault(json){return Array.isArray(json)?IndexedSeq(json).map(fromJSDefault).toList():isPlainObj(json)?KeyedSeq(json).map(fromJSDefault).toMap():json}function isPlainObj(value){return value&&(value.constructor===Object||void 0===value.constructor)}function smi(i32){return i32>>>1&1073741824|3221225471&i32}function hash(o){if(o===!1||null===o||void 0===o)return 0;if("function"==typeof o.valueOf&&(o=o.valueOf(),o===!1||null===o||void 0===o))return 0;if(o===!0)return 1;var type=typeof o;if("number"===type){var h=0|o;for(h!==o&&(h^=4294967295*o);o>4294967295;)o/=4294967295,h^=o;return smi(h)}return"string"===type?o.length>STRING_HASH_CACHE_MIN_STRLEN?cachedHashString(o):hashString(o):"function"==typeof o.hashCode?o.hashCode():hashJSObj(o)}function cachedHashString(string){var hash=stringHashCache[string];return void 0===hash&&(hash=hashString(string),STRING_HASH_CACHE_SIZE===STRING_HASH_CACHE_MAX_SIZE&&(STRING_HASH_CACHE_SIZE=0,stringHashCache={}),STRING_HASH_CACHE_SIZE++,stringHashCache[string]=hash),hash}function hashString(string){for(var hash=0,ii=0;ii<string.length;ii++)hash=31*hash+string.charCodeAt(ii)|0;return smi(hash)}function hashJSObj(obj){var hash;if(usingWeakMap&&(hash=weakMap.get(obj),void 0!==hash))return hash;if(hash=obj[UID_HASH_KEY],void 0!==hash)return hash;if(!canDefineProperty){if(hash=obj.propertyIsEnumerable&&obj.propertyIsEnumerable[UID_HASH_KEY],void 0!==hash)return hash;if(hash=getIENodeHash(obj),void 0!==hash)return hash}if(hash=++objHashUID,1073741824&objHashUID&&(objHashUID=0),usingWeakMap)weakMap.set(obj,hash);else{if(void 0!==isExtensible&&isExtensible(obj)===!1)throw new Error("Non-extensible objects are not allowed as keys.");if(canDefineProperty)Object.defineProperty(obj,UID_HASH_KEY,{enumerable:!1,configurable:!1,writable:!1,value:hash});else if(void 0!==obj.propertyIsEnumerable&&obj.propertyIsEnumerable===obj.constructor.prototype.propertyIsEnumerable)obj.propertyIsEnumerable=function(){return this.constructor.prototype.propertyIsEnumerable.apply(this,arguments)},obj.propertyIsEnumerable[UID_HASH_KEY]=hash;else{if(void 0===obj.nodeType)throw new Error("Unable to set a non-enumerable property on object.");obj[UID_HASH_KEY]=hash}}return hash}function getIENodeHash(node){if(node&&node.nodeType>0)switch(node.nodeType){case 1:return node.uniqueID;case 9:return node.documentElement&&node.documentElement.uniqueID}}function invariant(condition,error){if(!condition)throw new Error(error)}function assertNotInfinite(size){invariant(size!==1/0,"Cannot perform this action with an infinite size.")}function ToKeyedSequence(indexed,useKeys){this._iter=indexed,this._useKeys=useKeys,this.size=indexed.size}function ToIndexedSequence(iter){this._iter=iter,this.size=iter.size}function ToSetSequence(iter){this._iter=iter,this.size=iter.size}function FromEntriesSequence(entries){this._iter=entries,this.size=entries.size}function flipFactory(iterable){var flipSequence=makeSequence(iterable);return flipSequence._iter=iterable,flipSequence.size=iterable.size,flipSequence.flip=function(){return iterable},flipSequence.reverse=function(){var reversedSequence=iterable.reverse.apply(this);return reversedSequence.flip=function(){return iterable.reverse()},reversedSequence},flipSequence.has=function(key){return iterable.includes(key)},flipSequence.includes=function(key){return iterable.has(key)},flipSequence.cacheResult=cacheResultThrough,flipSequence.__iterateUncached=function(fn,reverse){var this$0=this;return iterable.__iterate(function(v,k){return fn(k,v,this$0)!==!1},reverse)},flipSequence.__iteratorUncached=function(type,reverse){if(type===ITERATE_ENTRIES){var iterator=iterable.__iterator(type,reverse);return new src_Iterator__Iterator(function(){var step=iterator.next();if(!step.done){var k=step.value[0];step.value[0]=step.value[1],step.value[1]=k}return step})}return iterable.__iterator(type===ITERATE_VALUES?ITERATE_KEYS:ITERATE_VALUES,reverse)},flipSequence}function mapFactory(iterable,mapper,context){var mappedSequence=makeSequence(iterable);return mappedSequence.size=iterable.size,mappedSequence.has=function(key){return iterable.has(key)},mappedSequence.get=function(key,notSetValue){var v=iterable.get(key,NOT_SET);return v===NOT_SET?notSetValue:mapper.call(context,v,key,iterable)},mappedSequence.__iterateUncached=function(fn,reverse){var this$0=this;return iterable.__iterate(function(v,k,c){return fn(mapper.call(context,v,k,c),k,this$0)!==!1},reverse)},mappedSequence.__iteratorUncached=function(type,reverse){var iterator=iterable.__iterator(ITERATE_ENTRIES,reverse);return new src_Iterator__Iterator(function(){var step=iterator.next();if(step.done)return step;var entry=step.value,key=entry[0];return iteratorValue(type,key,mapper.call(context,entry[1],key,iterable),step)})},mappedSequence}function reverseFactory(iterable,useKeys){var reversedSequence=makeSequence(iterable);return reversedSequence._iter=iterable,reversedSequence.size=iterable.size,reversedSequence.reverse=function(){return iterable},iterable.flip&&(reversedSequence.flip=function(){var flipSequence=flipFactory(iterable);return flipSequence.reverse=function(){return iterable.flip()},flipSequence}),reversedSequence.get=function(key,notSetValue){return iterable.get(useKeys?key:-1-key,notSetValue)},reversedSequence.has=function(key){return iterable.has(useKeys?key:-1-key)},reversedSequence.includes=function(value){return iterable.includes(value)},reversedSequence.cacheResult=cacheResultThrough,reversedSequence.__iterate=function(fn,reverse){var this$0=this;return iterable.__iterate(function(v,k){return fn(v,k,this$0)},!reverse)},reversedSequence.__iterator=function(type,reverse){return iterable.__iterator(type,!reverse)},reversedSequence}function filterFactory(iterable,predicate,context,useKeys){var filterSequence=makeSequence(iterable);return useKeys&&(filterSequence.has=function(key){var v=iterable.get(key,NOT_SET);return v!==NOT_SET&&!!predicate.call(context,v,key,iterable)},filterSequence.get=function(key,notSetValue){var v=iterable.get(key,NOT_SET);return v!==NOT_SET&&predicate.call(context,v,key,iterable)?v:notSetValue}),filterSequence.__iterateUncached=function(fn,reverse){var this$0=this,iterations=0;return iterable.__iterate(function(v,k,c){return predicate.call(context,v,k,c)?(iterations++,fn(v,useKeys?k:iterations-1,this$0)):void 0},reverse),iterations},filterSequence.__iteratorUncached=function(type,reverse){var iterator=iterable.__iterator(ITERATE_ENTRIES,reverse),iterations=0;return new src_Iterator__Iterator(function(){for(;;){var step=iterator.next();if(step.done)return step;var entry=step.value,key=entry[0],value=entry[1];if(predicate.call(context,value,key,iterable))return iteratorValue(type,useKeys?key:iterations++,value,step)}})},filterSequence}function countByFactory(iterable,grouper,context){var groups=src_Map__Map().asMutable();return iterable.__iterate(function(v,k){groups.update(grouper.call(context,v,k,iterable),0,function(a){return a+1})}),groups.asImmutable()}function groupByFactory(iterable,grouper,context){var isKeyedIter=isKeyed(iterable),groups=(isOrdered(iterable)?OrderedMap():src_Map__Map()).asMutable();iterable.__iterate(function(v,k){groups.update(grouper.call(context,v,k,iterable),function(a){return a=a||[],a.push(isKeyedIter?[k,v]:v),a})});var coerce=iterableClass(iterable);return groups.map(function(arr){return reify(iterable,coerce(arr))})}function sliceFactory(iterable,begin,end,useKeys){var originalSize=iterable.size;if(wholeSlice(begin,end,originalSize))return iterable;var resolvedBegin=resolveBegin(begin,originalSize),resolvedEnd=resolveEnd(end,originalSize);if(resolvedBegin!==resolvedBegin||resolvedEnd!==resolvedEnd)return sliceFactory(iterable.toSeq().cacheResult(),begin,end,useKeys);var sliceSize,resolvedSize=resolvedEnd-resolvedBegin;resolvedSize===resolvedSize&&(sliceSize=0>resolvedSize?0:resolvedSize);var sliceSeq=makeSequence(iterable);return sliceSeq.size=sliceSize,!useKeys&&isSeq(iterable)&&sliceSize>=0&&(sliceSeq.get=function(index,notSetValue){return index=wrapIndex(this,index),index>=0&&sliceSize>index?iterable.get(index+resolvedBegin,notSetValue):notSetValue}),sliceSeq.__iterateUncached=function(fn,reverse){var this$0=this;if(0===sliceSize)return 0;if(reverse)return this.cacheResult().__iterate(fn,reverse);var skipped=0,isSkipping=!0,iterations=0;return iterable.__iterate(function(v,k){return isSkipping&&(isSkipping=skipped++<resolvedBegin)?void 0:(iterations++,fn(v,useKeys?k:iterations-1,this$0)!==!1&&iterations!==sliceSize)}),iterations},sliceSeq.__iteratorUncached=function(type,reverse){if(0!==sliceSize&&reverse)return this.cacheResult().__iterator(type,reverse);var iterator=0!==sliceSize&&iterable.__iterator(type,reverse),skipped=0,iterations=0;return new src_Iterator__Iterator(function(){for(;skipped++<resolvedBegin;)iterator.next();if(++iterations>sliceSize)return iteratorDone();var step=iterator.next();return useKeys||type===ITERATE_VALUES?step:type===ITERATE_KEYS?iteratorValue(type,iterations-1,void 0,step):iteratorValue(type,iterations-1,step.value[1],step)})},sliceSeq}function takeWhileFactory(iterable,predicate,context){var takeSequence=makeSequence(iterable);return takeSequence.__iterateUncached=function(fn,reverse){var this$0=this;if(reverse)return this.cacheResult().__iterate(fn,reverse);var iterations=0;return iterable.__iterate(function(v,k,c){return predicate.call(context,v,k,c)&&++iterations&&fn(v,k,this$0)}),iterations},takeSequence.__iteratorUncached=function(type,reverse){var this$0=this;if(reverse)return this.cacheResult().__iterator(type,reverse);var iterator=iterable.__iterator(ITERATE_ENTRIES,reverse),iterating=!0;return new src_Iterator__Iterator(function(){if(!iterating)return iteratorDone();var step=iterator.next();if(step.done)return step;var entry=step.value,k=entry[0],v=entry[1];return predicate.call(context,v,k,this$0)?type===ITERATE_ENTRIES?step:iteratorValue(type,k,v,step):(iterating=!1,iteratorDone())})},takeSequence}function skipWhileFactory(iterable,predicate,context,useKeys){var skipSequence=makeSequence(iterable);return skipSequence.__iterateUncached=function(fn,reverse){var this$0=this;if(reverse)return this.cacheResult().__iterate(fn,reverse);var isSkipping=!0,iterations=0;return iterable.__iterate(function(v,k,c){return isSkipping&&(isSkipping=predicate.call(context,v,k,c))?void 0:(iterations++,fn(v,useKeys?k:iterations-1,this$0))}),iterations},skipSequence.__iteratorUncached=function(type,reverse){var this$0=this;if(reverse)return this.cacheResult().__iterator(type,reverse);var iterator=iterable.__iterator(ITERATE_ENTRIES,reverse),skipping=!0,iterations=0;return new src_Iterator__Iterator(function(){var step,k,v;do{if(step=iterator.next(),step.done)return useKeys||type===ITERATE_VALUES?step:type===ITERATE_KEYS?iteratorValue(type,iterations++,void 0,step):iteratorValue(type,iterations++,step.value[1],step);var entry=step.value;k=entry[0],v=entry[1],skipping&&(skipping=predicate.call(context,v,k,this$0))}while(skipping);return type===ITERATE_ENTRIES?step:iteratorValue(type,k,v,step)})},skipSequence}function concatFactory(iterable,values){var isKeyedIterable=isKeyed(iterable),iters=[iterable].concat(values).map(function(v){return isIterable(v)?isKeyedIterable&&(v=KeyedIterable(v)):v=isKeyedIterable?keyedSeqFromValue(v):indexedSeqFromValue(Array.isArray(v)?v:[v]),v}).filter(function(v){return 0!==v.size});if(0===iters.length)return iterable;if(1===iters.length){var singleton=iters[0];if(singleton===iterable||isKeyedIterable&&isKeyed(singleton)||isIndexed(iterable)&&isIndexed(singleton))return singleton}var concatSeq=new ArraySeq(iters);return isKeyedIterable?concatSeq=concatSeq.toKeyedSeq():isIndexed(iterable)||(concatSeq=concatSeq.toSetSeq()),concatSeq=concatSeq.flatten(!0),concatSeq.size=iters.reduce(function(sum,seq){if(void 0!==sum){var size=seq.size;if(void 0!==size)return sum+size}},0),concatSeq}function flattenFactory(iterable,depth,useKeys){var flatSequence=makeSequence(iterable);return flatSequence.__iterateUncached=function(fn,reverse){function flatDeep(iter,currentDepth){var this$0=this;iter.__iterate(function(v,k){return(!depth||depth>currentDepth)&&isIterable(v)?flatDeep(v,currentDepth+1):fn(v,useKeys?k:iterations++,this$0)===!1&&(stopped=!0),!stopped},reverse)}var iterations=0,stopped=!1;return flatDeep(iterable,0),iterations},flatSequence.__iteratorUncached=function(type,reverse){var iterator=iterable.__iterator(type,reverse),stack=[],iterations=0;return new src_Iterator__Iterator(function(){for(;iterator;){var step=iterator.next();if(step.done===!1){var v=step.value;if(type===ITERATE_ENTRIES&&(v=v[1]),depth&&!(stack.length<depth)||!isIterable(v))return useKeys?step:iteratorValue(type,iterations++,v,step);stack.push(iterator),iterator=v.__iterator(type,reverse)}else iterator=stack.pop()}return iteratorDone()})},flatSequence}function flatMapFactory(iterable,mapper,context){var coerce=iterableClass(iterable);return iterable.toSeq().map(function(v,k){return coerce(mapper.call(context,v,k,iterable))}).flatten(!0)}function interposeFactory(iterable,separator){var interposedSequence=makeSequence(iterable);return interposedSequence.size=iterable.size&&2*iterable.size-1,interposedSequence.__iterateUncached=function(fn,reverse){var this$0=this,iterations=0;return iterable.__iterate(function(v,k){return(!iterations||fn(separator,iterations++,this$0)!==!1)&&fn(v,iterations++,this$0)!==!1},reverse),iterations},interposedSequence.__iteratorUncached=function(type,reverse){var step,iterator=iterable.__iterator(ITERATE_VALUES,reverse),iterations=0;return new src_Iterator__Iterator(function(){return(!step||iterations%2)&&(step=iterator.next(),step.done)?step:iterations%2?iteratorValue(type,iterations++,separator):iteratorValue(type,iterations++,step.value,step)})},interposedSequence}function sortFactory(iterable,comparator,mapper){comparator||(comparator=defaultComparator);var isKeyedIterable=isKeyed(iterable),index=0,entries=iterable.toSeq().map(function(v,k){return[k,v,index++,mapper?mapper(v,k,iterable):v]}).toArray();return entries.sort(function(a,b){return comparator(a[3],b[3])||a[2]-b[2]}).forEach(isKeyedIterable?function(v,i){entries[i].length=2}:function(v,i){entries[i]=v[1]}),isKeyedIterable?KeyedSeq(entries):isIndexed(iterable)?IndexedSeq(entries):SetSeq(entries)}function maxFactory(iterable,comparator,mapper){if(comparator||(comparator=defaultComparator),mapper){var entry=iterable.toSeq().map(function(v,k){return[v,mapper(v,k,iterable)]}).reduce(function(a,b){return maxCompare(comparator,a[1],b[1])?b:a});return entry&&entry[0]}return iterable.reduce(function(a,b){return maxCompare(comparator,a,b)?b:a})}function maxCompare(comparator,a,b){var comp=comparator(b,a);return 0===comp&&b!==a&&(void 0===b||null===b||b!==b)||comp>0}function zipWithFactory(keyIter,zipper,iters){var zipSequence=makeSequence(keyIter);return zipSequence.size=new ArraySeq(iters).map(function(i){return i.size}).min(),zipSequence.__iterate=function(fn,reverse){for(var step,iterator=this.__iterator(ITERATE_VALUES,reverse),iterations=0;!(step=iterator.next()).done&&fn(step.value,iterations++,this)!==!1;);return iterations},zipSequence.__iteratorUncached=function(type,reverse){var iterators=iters.map(function(i){return i=Iterable(i),getIterator(reverse?i.reverse():i)}),iterations=0,isDone=!1;return new src_Iterator__Iterator(function(){var steps;return isDone||(steps=iterators.map(function(i){return i.next()}),isDone=steps.some(function(s){return s.done})),isDone?iteratorDone():iteratorValue(type,iterations++,zipper.apply(null,steps.map(function(s){return s.value})))})},zipSequence}function reify(iter,seq){return isSeq(iter)?seq:iter.constructor(seq)}function validateEntry(entry){if(entry!==Object(entry))throw new TypeError("Expected [K, V] tuple: "+entry)}function resolveSize(iter){return assertNotInfinite(iter.size),ensureSize(iter)}function iterableClass(iterable){return isKeyed(iterable)?KeyedIterable:isIndexed(iterable)?IndexedIterable:SetIterable}function makeSequence(iterable){return Object.create((isKeyed(iterable)?KeyedSeq:isIndexed(iterable)?IndexedSeq:SetSeq).prototype)}function cacheResultThrough(){return this._iter.cacheResult?(this._iter.cacheResult(),this.size=this._iter.size,this):Seq.prototype.cacheResult.call(this)}function defaultComparator(a,b){return a>b?1:b>a?-1:0}function forceIterator(keyPath){var iter=getIterator(keyPath);if(!iter){if(!isArrayLike(keyPath))throw new TypeError("Expected iterable or array-like: "+keyPath);iter=getIterator(Iterable(keyPath))}return iter}function src_Map__Map(value){return null===value||void 0===value?emptyMap():isMap(value)?value:emptyMap().withMutations(function(map){var iter=KeyedIterable(value);assertNotInfinite(iter.size),iter.forEach(function(v,k){return map.set(k,v)})})}function isMap(maybeMap){return!(!maybeMap||!maybeMap[IS_MAP_SENTINEL])}function ArrayMapNode(ownerID,entries){this.ownerID=ownerID,this.entries=entries}function BitmapIndexedNode(ownerID,bitmap,nodes){this.ownerID=ownerID,this.bitmap=bitmap,this.nodes=nodes}function HashArrayMapNode(ownerID,count,nodes){this.ownerID=ownerID,this.count=count,this.nodes=nodes}function HashCollisionNode(ownerID,keyHash,entries){this.ownerID=ownerID,this.keyHash=keyHash,this.entries=entries}function ValueNode(ownerID,keyHash,entry){this.ownerID=ownerID,this.keyHash=keyHash,this.entry=entry}function MapIterator(map,type,reverse){this._type=type,this._reverse=reverse,this._stack=map._root&&mapIteratorFrame(map._root)}function mapIteratorValue(type,entry){return iteratorValue(type,entry[0],entry[1])}function mapIteratorFrame(node,prev){return{node:node,index:0,__prev:prev}}function makeMap(size,root,ownerID,hash){var map=Object.create(MapPrototype);return map.size=size,map._root=root,map.__ownerID=ownerID,map.__hash=hash,map.__altered=!1,map}function emptyMap(){return EMPTY_MAP||(EMPTY_MAP=makeMap(0))}function updateMap(map,k,v){var newRoot,newSize;if(map._root){var didChangeSize=MakeRef(CHANGE_LENGTH),didAlter=MakeRef(DID_ALTER);if(newRoot=updateNode(map._root,map.__ownerID,0,void 0,k,v,didChangeSize,didAlter),!didAlter.value)return map;newSize=map.size+(didChangeSize.value?v===NOT_SET?-1:1:0)}else{if(v===NOT_SET)return map;newSize=1,newRoot=new ArrayMapNode(map.__ownerID,[[k,v]])}return map.__ownerID?(map.size=newSize,map._root=newRoot,map.__hash=void 0,map.__altered=!0,map):newRoot?makeMap(newSize,newRoot):emptyMap()}function updateNode(node,ownerID,shift,keyHash,key,value,didChangeSize,didAlter){return node?node.update(ownerID,shift,keyHash,key,value,didChangeSize,didAlter):value===NOT_SET?node:(SetRef(didAlter),SetRef(didChangeSize),new ValueNode(ownerID,keyHash,[key,value]))}function isLeafNode(node){return node.constructor===ValueNode||node.constructor===HashCollisionNode}function mergeIntoNode(node,ownerID,shift,keyHash,entry){if(node.keyHash===keyHash)return new HashCollisionNode(ownerID,keyHash,[node.entry,entry]);var newNode,idx1=(0===shift?node.keyHash:node.keyHash>>>shift)&MASK,idx2=(0===shift?keyHash:keyHash>>>shift)&MASK,nodes=idx1===idx2?[mergeIntoNode(node,ownerID,shift+SHIFT,keyHash,entry)]:(newNode=new ValueNode(ownerID,keyHash,entry),idx2>idx1?[node,newNode]:[newNode,node]);return new BitmapIndexedNode(ownerID,1<<idx1|1<<idx2,nodes)}function createNodes(ownerID,entries,key,value){ownerID||(ownerID=new OwnerID);for(var node=new ValueNode(ownerID,hash(key),[key,value]),ii=0;ii<entries.length;ii++){var entry=entries[ii];node=node.update(ownerID,0,void 0,entry[0],entry[1])}return node}function packNodes(ownerID,nodes,count,excluding){for(var bitmap=0,packedII=0,packedNodes=new Array(count),ii=0,bit=1,len=nodes.length;len>ii;ii++,bit<<=1){var node=nodes[ii];void 0!==node&&ii!==excluding&&(bitmap|=bit,packedNodes[packedII++]=node)}return new BitmapIndexedNode(ownerID,bitmap,packedNodes)}function expandNodes(ownerID,nodes,bitmap,including,node){for(var count=0,expandedNodes=new Array(SIZE),ii=0;0!==bitmap;ii++,bitmap>>>=1)expandedNodes[ii]=1&bitmap?nodes[count++]:void 0;return expandedNodes[including]=node,new HashArrayMapNode(ownerID,count+1,expandedNodes)}function mergeIntoMapWith(map,merger,iterables){for(var iters=[],ii=0;ii<iterables.length;ii++){var value=iterables[ii],iter=KeyedIterable(value);isIterable(value)||(iter=iter.map(function(v){return fromJS(v)})),iters.push(iter)}return mergeIntoCollectionWith(map,merger,iters)}function deepMerger(merger){return function(existing,value,key){return existing&&existing.mergeDeepWith&&isIterable(value)?existing.mergeDeepWith(merger,value):merger?merger(existing,value,key):value}}function mergeIntoCollectionWith(collection,merger,iters){return iters=iters.filter(function(x){return 0!==x.size}),0===iters.length?collection:0!==collection.size||collection.__ownerID||1!==iters.length?collection.withMutations(function(collection){for(var mergeIntoMap=merger?function(value,key){collection.update(key,NOT_SET,function(existing){return existing===NOT_SET?value:merger(existing,value,key)})}:function(value,key){collection.set(key,value)},ii=0;ii<iters.length;ii++)iters[ii].forEach(mergeIntoMap)}):collection.constructor(iters[0])}function updateInDeepMap(existing,keyPathIter,notSetValue,updater){var isNotSet=existing===NOT_SET,step=keyPathIter.next();if(step.done){var existingValue=isNotSet?notSetValue:existing,newValue=updater(existingValue);return newValue===existingValue?existing:newValue}invariant(isNotSet||existing&&existing.set,"invalid keyPath");var key=step.value,nextExisting=isNotSet?NOT_SET:existing.get(key,NOT_SET),nextUpdated=updateInDeepMap(nextExisting,keyPathIter,notSetValue,updater);return nextUpdated===nextExisting?existing:nextUpdated===NOT_SET?existing.remove(key):(isNotSet?emptyMap():existing).set(key,nextUpdated)}function popCount(x){return x-=x>>1&1431655765,x=(858993459&x)+(x>>2&858993459),x=x+(x>>4)&252645135,x+=x>>8,x+=x>>16,127&x}function setIn(array,idx,val,canEdit){var newArray=canEdit?array:arrCopy(array);return newArray[idx]=val,newArray}function spliceIn(array,idx,val,canEdit){var newLen=array.length+1;if(canEdit&&idx+1===newLen)return array[idx]=val,array;for(var newArray=new Array(newLen),after=0,ii=0;newLen>ii;ii++)ii===idx?(newArray[ii]=val,after=-1):newArray[ii]=array[ii+after];return newArray}function spliceOut(array,idx,canEdit){var newLen=array.length-1;if(canEdit&&idx===newLen)return array.pop(),array;for(var newArray=new Array(newLen),after=0,ii=0;newLen>ii;ii++)ii===idx&&(after=1),newArray[ii]=array[ii+after];return newArray}function List(value){var empty=emptyList();if(null===value||void 0===value)return empty;if(isList(value))return value;var iter=IndexedIterable(value),size=iter.size;return 0===size?empty:(assertNotInfinite(size),size>0&&SIZE>size?makeList(0,size,SHIFT,null,new VNode(iter.toArray())):empty.withMutations(function(list){list.setSize(size),iter.forEach(function(v,i){return list.set(i,v)})}))}function isList(maybeList){return!(!maybeList||!maybeList[IS_LIST_SENTINEL])}function VNode(array,ownerID){this.array=array,this.ownerID=ownerID}function iterateList(list,reverse){function iterateNodeOrLeaf(node,level,offset){return 0===level?iterateLeaf(node,offset):iterateNode(node,level,offset)}function iterateLeaf(node,offset){var array=offset===tailPos?tail&&tail.array:node&&node.array,from=offset>left?0:left-offset,to=right-offset;return to>SIZE&&(to=SIZE),function(){if(from===to)return DONE;var idx=reverse?--to:from++;return array&&array[idx]}}function iterateNode(node,level,offset){var values,array=node&&node.array,from=offset>left?0:left-offset>>level,to=(right-offset>>level)+1;return to>SIZE&&(to=SIZE),function(){for(;;){if(values){var value=values();if(value!==DONE)return value;values=null}if(from===to)return DONE;var idx=reverse?--to:from++;values=iterateNodeOrLeaf(array&&array[idx],level-SHIFT,offset+(idx<<level))}}}var left=list._origin,right=list._capacity,tailPos=getTailOffset(right),tail=list._tail;return iterateNodeOrLeaf(list._root,list._level,0)}function makeList(origin,capacity,level,root,tail,ownerID,hash){var list=Object.create(ListPrototype);return list.size=capacity-origin,list._origin=origin,list._capacity=capacity,list._level=level,list._root=root,list._tail=tail,list.__ownerID=ownerID,list.__hash=hash,list.__altered=!1,list}function emptyList(){return EMPTY_LIST||(EMPTY_LIST=makeList(0,0,SHIFT))}function updateList(list,index,value){if(index=wrapIndex(list,index),index>=list.size||0>index)return list.withMutations(function(list){0>index?setListBounds(list,index).set(0,value):setListBounds(list,0,index+1).set(index,value)});index+=list._origin;var newTail=list._tail,newRoot=list._root,didAlter=MakeRef(DID_ALTER);return index>=getTailOffset(list._capacity)?newTail=updateVNode(newTail,list.__ownerID,0,index,value,didAlter):newRoot=updateVNode(newRoot,list.__ownerID,list._level,index,value,didAlter),didAlter.value?list.__ownerID?(list._root=newRoot,list._tail=newTail,list.__hash=void 0,list.__altered=!0,list):makeList(list._origin,list._capacity,list._level,newRoot,newTail):list}function updateVNode(node,ownerID,level,index,value,didAlter){var idx=index>>>level&MASK,nodeHas=node&&idx<node.array.length;if(!nodeHas&&void 0===value)return node;var newNode;if(level>0){var lowerNode=node&&node.array[idx],newLowerNode=updateVNode(lowerNode,ownerID,level-SHIFT,index,value,didAlter);return newLowerNode===lowerNode?node:(newNode=editableVNode(node,ownerID),newNode.array[idx]=newLowerNode,
newNode)}return nodeHas&&node.array[idx]===value?node:(SetRef(didAlter),newNode=editableVNode(node,ownerID),void 0===value&&idx===newNode.array.length-1?newNode.array.pop():newNode.array[idx]=value,newNode)}function editableVNode(node,ownerID){return ownerID&&node&&ownerID===node.ownerID?node:new VNode(node?node.array.slice():[],ownerID)}function listNodeFor(list,rawIndex){if(rawIndex>=getTailOffset(list._capacity))return list._tail;if(rawIndex<1<<list._level+SHIFT){for(var node=list._root,level=list._level;node&&level>0;)node=node.array[rawIndex>>>level&MASK],level-=SHIFT;return node}}function setListBounds(list,begin,end){var owner=list.__ownerID||new OwnerID,oldOrigin=list._origin,oldCapacity=list._capacity,newOrigin=oldOrigin+begin,newCapacity=void 0===end?oldCapacity:0>end?oldCapacity+end:oldOrigin+end;if(newOrigin===oldOrigin&&newCapacity===oldCapacity)return list;if(newOrigin>=newCapacity)return list.clear();for(var newLevel=list._level,newRoot=list._root,offsetShift=0;0>newOrigin+offsetShift;)newRoot=new VNode(newRoot&&newRoot.array.length?[void 0,newRoot]:[],owner),newLevel+=SHIFT,offsetShift+=1<<newLevel;offsetShift&&(newOrigin+=offsetShift,oldOrigin+=offsetShift,newCapacity+=offsetShift,oldCapacity+=offsetShift);for(var oldTailOffset=getTailOffset(oldCapacity),newTailOffset=getTailOffset(newCapacity);newTailOffset>=1<<newLevel+SHIFT;)newRoot=new VNode(newRoot&&newRoot.array.length?[newRoot]:[],owner),newLevel+=SHIFT;var oldTail=list._tail,newTail=oldTailOffset>newTailOffset?listNodeFor(list,newCapacity-1):newTailOffset>oldTailOffset?new VNode([],owner):oldTail;if(oldTail&&newTailOffset>oldTailOffset&&oldCapacity>newOrigin&&oldTail.array.length){newRoot=editableVNode(newRoot,owner);for(var node=newRoot,level=newLevel;level>SHIFT;level-=SHIFT){var idx=oldTailOffset>>>level&MASK;node=node.array[idx]=editableVNode(node.array[idx],owner)}node.array[oldTailOffset>>>SHIFT&MASK]=oldTail}if(oldCapacity>newCapacity&&(newTail=newTail&&newTail.removeAfter(owner,0,newCapacity)),newOrigin>=newTailOffset)newOrigin-=newTailOffset,newCapacity-=newTailOffset,newLevel=SHIFT,newRoot=null,newTail=newTail&&newTail.removeBefore(owner,0,newOrigin);else if(newOrigin>oldOrigin||oldTailOffset>newTailOffset){for(offsetShift=0;newRoot;){var beginIndex=newOrigin>>>newLevel&MASK;if(beginIndex!==newTailOffset>>>newLevel&MASK)break;beginIndex&&(offsetShift+=(1<<newLevel)*beginIndex),newLevel-=SHIFT,newRoot=newRoot.array[beginIndex]}newRoot&&newOrigin>oldOrigin&&(newRoot=newRoot.removeBefore(owner,newLevel,newOrigin-offsetShift)),newRoot&&oldTailOffset>newTailOffset&&(newRoot=newRoot.removeAfter(owner,newLevel,newTailOffset-offsetShift)),offsetShift&&(newOrigin-=offsetShift,newCapacity-=offsetShift)}return list.__ownerID?(list.size=newCapacity-newOrigin,list._origin=newOrigin,list._capacity=newCapacity,list._level=newLevel,list._root=newRoot,list._tail=newTail,list.__hash=void 0,list.__altered=!0,list):makeList(newOrigin,newCapacity,newLevel,newRoot,newTail)}function mergeIntoListWith(list,merger,iterables){for(var iters=[],maxSize=0,ii=0;ii<iterables.length;ii++){var value=iterables[ii],iter=IndexedIterable(value);iter.size>maxSize&&(maxSize=iter.size),isIterable(value)||(iter=iter.map(function(v){return fromJS(v)})),iters.push(iter)}return maxSize>list.size&&(list=list.setSize(maxSize)),mergeIntoCollectionWith(list,merger,iters)}function getTailOffset(size){return SIZE>size?0:size-1>>>SHIFT<<SHIFT}function OrderedMap(value){return null===value||void 0===value?emptyOrderedMap():isOrderedMap(value)?value:emptyOrderedMap().withMutations(function(map){var iter=KeyedIterable(value);assertNotInfinite(iter.size),iter.forEach(function(v,k){return map.set(k,v)})})}function isOrderedMap(maybeOrderedMap){return isMap(maybeOrderedMap)&&isOrdered(maybeOrderedMap)}function makeOrderedMap(map,list,ownerID,hash){var omap=Object.create(OrderedMap.prototype);return omap.size=map?map.size:0,omap._map=map,omap._list=list,omap.__ownerID=ownerID,omap.__hash=hash,omap}function emptyOrderedMap(){return EMPTY_ORDERED_MAP||(EMPTY_ORDERED_MAP=makeOrderedMap(emptyMap(),emptyList()))}function updateOrderedMap(omap,k,v){var newMap,newList,map=omap._map,list=omap._list,i=map.get(k),has=void 0!==i;if(v===NOT_SET){if(!has)return omap;list.size>=SIZE&&list.size>=2*map.size?(newList=list.filter(function(entry,idx){return void 0!==entry&&i!==idx}),newMap=newList.toKeyedSeq().map(function(entry){return entry[0]}).flip().toMap(),omap.__ownerID&&(newMap.__ownerID=newList.__ownerID=omap.__ownerID)):(newMap=map.remove(k),newList=i===list.size-1?list.pop():list.set(i,void 0))}else if(has){if(v===list.get(i)[1])return omap;newMap=map,newList=list.set(i,[k,v])}else newMap=map.set(k,list.size),newList=list.set(list.size,[k,v]);return omap.__ownerID?(omap.size=newMap.size,omap._map=newMap,omap._list=newList,omap.__hash=void 0,omap):makeOrderedMap(newMap,newList)}function Stack(value){return null===value||void 0===value?emptyStack():isStack(value)?value:emptyStack().unshiftAll(value)}function isStack(maybeStack){return!(!maybeStack||!maybeStack[IS_STACK_SENTINEL])}function makeStack(size,head,ownerID,hash){var map=Object.create(StackPrototype);return map.size=size,map._head=head,map.__ownerID=ownerID,map.__hash=hash,map.__altered=!1,map}function emptyStack(){return EMPTY_STACK||(EMPTY_STACK=makeStack(0))}function src_Set__Set(value){return null===value||void 0===value?emptySet():isSet(value)?value:emptySet().withMutations(function(set){var iter=SetIterable(value);assertNotInfinite(iter.size),iter.forEach(function(v){return set.add(v)})})}function isSet(maybeSet){return!(!maybeSet||!maybeSet[IS_SET_SENTINEL])}function updateSet(set,newMap){return set.__ownerID?(set.size=newMap.size,set._map=newMap,set):newMap===set._map?set:0===newMap.size?set.__empty():set.__make(newMap)}function makeSet(map,ownerID){var set=Object.create(SetPrototype);return set.size=map?map.size:0,set._map=map,set.__ownerID=ownerID,set}function emptySet(){return EMPTY_SET||(EMPTY_SET=makeSet(emptyMap()))}function OrderedSet(value){return null===value||void 0===value?emptyOrderedSet():isOrderedSet(value)?value:emptyOrderedSet().withMutations(function(set){var iter=SetIterable(value);assertNotInfinite(iter.size),iter.forEach(function(v){return set.add(v)})})}function isOrderedSet(maybeOrderedSet){return isSet(maybeOrderedSet)&&isOrdered(maybeOrderedSet)}function makeOrderedSet(map,ownerID){var set=Object.create(OrderedSetPrototype);return set.size=map?map.size:0,set._map=map,set.__ownerID=ownerID,set}function emptyOrderedSet(){return EMPTY_ORDERED_SET||(EMPTY_ORDERED_SET=makeOrderedSet(emptyOrderedMap()))}function Record(defaultValues,name){var hasInitialized,RecordType=function(values){if(values instanceof RecordType)return values;if(!(this instanceof RecordType))return new RecordType(values);if(!hasInitialized){hasInitialized=!0;var keys=Object.keys(defaultValues);setProps(RecordTypePrototype,keys),RecordTypePrototype.size=keys.length,RecordTypePrototype._name=name,RecordTypePrototype._keys=keys,RecordTypePrototype._defaultValues=defaultValues}this._map=src_Map__Map(values)},RecordTypePrototype=RecordType.prototype=Object.create(RecordPrototype);return RecordTypePrototype.constructor=RecordType,RecordType}function makeRecord(likeRecord,map,ownerID){var record=Object.create(Object.getPrototypeOf(likeRecord));return record._map=map,record.__ownerID=ownerID,record}function recordName(record){return record._name||record.constructor.name||"Record"}function setProps(prototype,names){try{names.forEach(setProp.bind(void 0,prototype))}catch(error){}}function setProp(prototype,name){Object.defineProperty(prototype,name,{get:function(){return this.get(name)},set:function(value){invariant(this.__ownerID,"Cannot set on an immutable record."),this.set(name,value)}})}function deepEqual(a,b){if(a===b)return!0;if(!isIterable(b)||void 0!==a.size&&void 0!==b.size&&a.size!==b.size||void 0!==a.__hash&&void 0!==b.__hash&&a.__hash!==b.__hash||isKeyed(a)!==isKeyed(b)||isIndexed(a)!==isIndexed(b)||isOrdered(a)!==isOrdered(b))return!1;if(0===a.size&&0===b.size)return!0;var notAssociative=!isAssociative(a);if(isOrdered(a)){var entries=a.entries();return b.every(function(v,k){var entry=entries.next().value;return entry&&is(entry[1],v)&&(notAssociative||is(entry[0],k))})&&entries.next().done}var flipped=!1;if(void 0===a.size)if(void 0===b.size)"function"==typeof a.cacheResult&&a.cacheResult();else{flipped=!0;var _=a;a=b,b=_}var allEqual=!0,bSize=b.__iterate(function(v,k){return(notAssociative?a.has(v):flipped?is(v,a.get(k,NOT_SET)):is(a.get(k,NOT_SET),v))?void 0:(allEqual=!1,!1)});return allEqual&&a.size===bSize}function Range(start,end,step){if(!(this instanceof Range))return new Range(start,end,step);if(invariant(0!==step,"Cannot step a Range by 0"),start=start||0,void 0===end&&(end=1/0),step=void 0===step?1:Math.abs(step),start>end&&(step=-step),this._start=start,this._end=end,this._step=step,this.size=Math.max(0,Math.ceil((end-start)/step-1)+1),0===this.size){if(EMPTY_RANGE)return EMPTY_RANGE;EMPTY_RANGE=this}}function Repeat(value,times){if(!(this instanceof Repeat))return new Repeat(value,times);if(this._value=value,this.size=void 0===times?1/0:Math.max(0,times),0===this.size){if(EMPTY_REPEAT)return EMPTY_REPEAT;EMPTY_REPEAT=this}}function mixin(ctor,methods){var keyCopier=function(key){ctor.prototype[key]=methods[key]};return Object.keys(methods).forEach(keyCopier),Object.getOwnPropertySymbols&&Object.getOwnPropertySymbols(methods).forEach(keyCopier),ctor}function keyMapper(v,k){return k}function entryMapper(v,k){return[k,v]}function not(predicate){return function(){return!predicate.apply(this,arguments)}}function neg(predicate){return function(){return-predicate.apply(this,arguments)}}function quoteString(value){return"string"==typeof value?JSON.stringify(value):value}function defaultZipper(){return arrCopy(arguments)}function defaultNegComparator(a,b){return b>a?1:a>b?-1:0}function hashIterable(iterable){if(iterable.size===1/0)return 0;var ordered=isOrdered(iterable),keyed=isKeyed(iterable),h=ordered?1:0,size=iterable.__iterate(keyed?ordered?function(v,k){h=31*h+hashMerge(hash(v),hash(k))|0}:function(v,k){h=h+hashMerge(hash(v),hash(k))|0}:ordered?function(v){h=31*h+hash(v)|0}:function(v){h=h+hash(v)|0});return murmurHashOfSize(size,h)}function murmurHashOfSize(size,h){return h=src_Math__imul(h,3432918353),h=src_Math__imul(h<<15|h>>>-15,461845907),h=src_Math__imul(h<<13|h>>>-13,5),h=(h+3864292196|0)^size,h=src_Math__imul(h^h>>>16,2246822507),h=src_Math__imul(h^h>>>13,3266489909),h=smi(h^h>>>16)}function hashMerge(a,b){return a^b+2654435769+(a<<6)+(a>>2)|0}var SLICE$0=Array.prototype.slice,DELETE="delete",SHIFT=5,SIZE=1<<SHIFT,MASK=SIZE-1,NOT_SET={},CHANGE_LENGTH={value:!1},DID_ALTER={value:!1};createClass(KeyedIterable,Iterable),createClass(IndexedIterable,Iterable),createClass(SetIterable,Iterable),Iterable.isIterable=isIterable,Iterable.isKeyed=isKeyed,Iterable.isIndexed=isIndexed,Iterable.isAssociative=isAssociative,Iterable.isOrdered=isOrdered,Iterable.Keyed=KeyedIterable,Iterable.Indexed=IndexedIterable,Iterable.Set=SetIterable;var IS_ITERABLE_SENTINEL="@@__IMMUTABLE_ITERABLE__@@",IS_KEYED_SENTINEL="@@__IMMUTABLE_KEYED__@@",IS_INDEXED_SENTINEL="@@__IMMUTABLE_INDEXED__@@",IS_ORDERED_SENTINEL="@@__IMMUTABLE_ORDERED__@@",ITERATE_KEYS=0,ITERATE_VALUES=1,ITERATE_ENTRIES=2,REAL_ITERATOR_SYMBOL="function"==typeof Symbol&&Symbol.iterator,FAUX_ITERATOR_SYMBOL="@@iterator",ITERATOR_SYMBOL=REAL_ITERATOR_SYMBOL||FAUX_ITERATOR_SYMBOL;src_Iterator__Iterator.prototype.toString=function(){return"[Iterator]"},src_Iterator__Iterator.KEYS=ITERATE_KEYS,src_Iterator__Iterator.VALUES=ITERATE_VALUES,src_Iterator__Iterator.ENTRIES=ITERATE_ENTRIES,src_Iterator__Iterator.prototype.inspect=src_Iterator__Iterator.prototype.toSource=function(){return this.toString()},src_Iterator__Iterator.prototype[ITERATOR_SYMBOL]=function(){return this},createClass(Seq,Iterable),Seq.of=function(){return Seq(arguments)},Seq.prototype.toSeq=function(){return this},Seq.prototype.toString=function(){return this.__toString("Seq {","}")},Seq.prototype.cacheResult=function(){return!this._cache&&this.__iterateUncached&&(this._cache=this.entrySeq().toArray(),this.size=this._cache.length),this},Seq.prototype.__iterate=function(fn,reverse){return seqIterate(this,fn,reverse,!0)},Seq.prototype.__iterator=function(type,reverse){return seqIterator(this,type,reverse,!0)},createClass(KeyedSeq,Seq),KeyedSeq.prototype.toKeyedSeq=function(){return this},createClass(IndexedSeq,Seq),IndexedSeq.of=function(){return IndexedSeq(arguments)},IndexedSeq.prototype.toIndexedSeq=function(){return this},IndexedSeq.prototype.toString=function(){return this.__toString("Seq [","]")},IndexedSeq.prototype.__iterate=function(fn,reverse){return seqIterate(this,fn,reverse,!1)},IndexedSeq.prototype.__iterator=function(type,reverse){return seqIterator(this,type,reverse,!1)},createClass(SetSeq,Seq),SetSeq.of=function(){return SetSeq(arguments)},SetSeq.prototype.toSetSeq=function(){return this},Seq.isSeq=isSeq,Seq.Keyed=KeyedSeq,Seq.Set=SetSeq,Seq.Indexed=IndexedSeq;var IS_SEQ_SENTINEL="@@__IMMUTABLE_SEQ__@@";Seq.prototype[IS_SEQ_SENTINEL]=!0,createClass(ArraySeq,IndexedSeq),ArraySeq.prototype.get=function(index,notSetValue){return this.has(index)?this._array[wrapIndex(this,index)]:notSetValue},ArraySeq.prototype.__iterate=function(fn,reverse){for(var array=this._array,maxIndex=array.length-1,ii=0;maxIndex>=ii;ii++)if(fn(array[reverse?maxIndex-ii:ii],ii,this)===!1)return ii+1;return ii},ArraySeq.prototype.__iterator=function(type,reverse){var array=this._array,maxIndex=array.length-1,ii=0;return new src_Iterator__Iterator(function(){return ii>maxIndex?iteratorDone():iteratorValue(type,ii,array[reverse?maxIndex-ii++:ii++])})},createClass(ObjectSeq,KeyedSeq),ObjectSeq.prototype.get=function(key,notSetValue){return void 0===notSetValue||this.has(key)?this._object[key]:notSetValue},ObjectSeq.prototype.has=function(key){return this._object.hasOwnProperty(key)},ObjectSeq.prototype.__iterate=function(fn,reverse){for(var object=this._object,keys=this._keys,maxIndex=keys.length-1,ii=0;maxIndex>=ii;ii++){var key=keys[reverse?maxIndex-ii:ii];if(fn(object[key],key,this)===!1)return ii+1}return ii},ObjectSeq.prototype.__iterator=function(type,reverse){var object=this._object,keys=this._keys,maxIndex=keys.length-1,ii=0;return new src_Iterator__Iterator(function(){var key=keys[reverse?maxIndex-ii:ii];return ii++>maxIndex?iteratorDone():iteratorValue(type,key,object[key])})},ObjectSeq.prototype[IS_ORDERED_SENTINEL]=!0,createClass(IterableSeq,IndexedSeq),IterableSeq.prototype.__iterateUncached=function(fn,reverse){if(reverse)return this.cacheResult().__iterate(fn,reverse);var iterable=this._iterable,iterator=getIterator(iterable),iterations=0;if(isIterator(iterator))for(var step;!(step=iterator.next()).done&&fn(step.value,iterations++,this)!==!1;);return iterations},IterableSeq.prototype.__iteratorUncached=function(type,reverse){if(reverse)return this.cacheResult().__iterator(type,reverse);var iterable=this._iterable,iterator=getIterator(iterable);if(!isIterator(iterator))return new src_Iterator__Iterator(iteratorDone);var iterations=0;return new src_Iterator__Iterator(function(){var step=iterator.next();return step.done?step:iteratorValue(type,iterations++,step.value)})},createClass(IteratorSeq,IndexedSeq),IteratorSeq.prototype.__iterateUncached=function(fn,reverse){if(reverse)return this.cacheResult().__iterate(fn,reverse);for(var iterator=this._iterator,cache=this._iteratorCache,iterations=0;iterations<cache.length;)if(fn(cache[iterations],iterations++,this)===!1)return iterations;for(var step;!(step=iterator.next()).done;){var val=step.value;if(cache[iterations]=val,fn(val,iterations++,this)===!1)break}return iterations},IteratorSeq.prototype.__iteratorUncached=function(type,reverse){if(reverse)return this.cacheResult().__iterator(type,reverse);var iterator=this._iterator,cache=this._iteratorCache,iterations=0;return new src_Iterator__Iterator(function(){if(iterations>=cache.length){var step=iterator.next();if(step.done)return step;cache[iterations]=step.value}return iteratorValue(type,iterations,cache[iterations++])})};var EMPTY_SEQ;createClass(Collection,Iterable),createClass(KeyedCollection,Collection),createClass(IndexedCollection,Collection),createClass(SetCollection,Collection),Collection.Keyed=KeyedCollection,Collection.Indexed=IndexedCollection,Collection.Set=SetCollection;var weakMap,src_Math__imul="function"==typeof Math.imul&&-2===Math.imul(4294967295,2)?Math.imul:function(a,b){a=0|a,b=0|b;var c=65535&a,d=65535&b;return c*d+((a>>>16)*d+c*(b>>>16)<<16>>>0)|0},isExtensible=Object.isExtensible,canDefineProperty=function(){try{return Object.defineProperty({},"@",{}),!0}catch(e){return!1}}(),usingWeakMap="function"==typeof WeakMap;usingWeakMap&&(weakMap=new WeakMap);var objHashUID=0,UID_HASH_KEY="__immutablehash__";"function"==typeof Symbol&&(UID_HASH_KEY=Symbol(UID_HASH_KEY));var STRING_HASH_CACHE_MIN_STRLEN=16,STRING_HASH_CACHE_MAX_SIZE=255,STRING_HASH_CACHE_SIZE=0,stringHashCache={};createClass(ToKeyedSequence,KeyedSeq),ToKeyedSequence.prototype.get=function(key,notSetValue){return this._iter.get(key,notSetValue)},ToKeyedSequence.prototype.has=function(key){return this._iter.has(key)},ToKeyedSequence.prototype.valueSeq=function(){return this._iter.valueSeq()},ToKeyedSequence.prototype.reverse=function(){var this$0=this,reversedSequence=reverseFactory(this,!0);return this._useKeys||(reversedSequence.valueSeq=function(){return this$0._iter.toSeq().reverse()}),reversedSequence},ToKeyedSequence.prototype.map=function(mapper,context){var this$0=this,mappedSequence=mapFactory(this,mapper,context);return this._useKeys||(mappedSequence.valueSeq=function(){return this$0._iter.toSeq().map(mapper,context)}),mappedSequence},ToKeyedSequence.prototype.__iterate=function(fn,reverse){var ii,this$0=this;return this._iter.__iterate(this._useKeys?function(v,k){return fn(v,k,this$0)}:(ii=reverse?resolveSize(this):0,function(v){return fn(v,reverse?--ii:ii++,this$0)}),reverse)},ToKeyedSequence.prototype.__iterator=function(type,reverse){if(this._useKeys)return this._iter.__iterator(type,reverse);var iterator=this._iter.__iterator(ITERATE_VALUES,reverse),ii=reverse?resolveSize(this):0;return new src_Iterator__Iterator(function(){var step=iterator.next();return step.done?step:iteratorValue(type,reverse?--ii:ii++,step.value,step)})},ToKeyedSequence.prototype[IS_ORDERED_SENTINEL]=!0,createClass(ToIndexedSequence,IndexedSeq),ToIndexedSequence.prototype.includes=function(value){return this._iter.includes(value)},ToIndexedSequence.prototype.__iterate=function(fn,reverse){var this$0=this,iterations=0;return this._iter.__iterate(function(v){return fn(v,iterations++,this$0)},reverse)},ToIndexedSequence.prototype.__iterator=function(type,reverse){var iterator=this._iter.__iterator(ITERATE_VALUES,reverse),iterations=0;return new src_Iterator__Iterator(function(){var step=iterator.next();return step.done?step:iteratorValue(type,iterations++,step.value,step)})},createClass(ToSetSequence,SetSeq),ToSetSequence.prototype.has=function(key){return this._iter.includes(key)},ToSetSequence.prototype.__iterate=function(fn,reverse){var this$0=this;return this._iter.__iterate(function(v){return fn(v,v,this$0)},reverse)},ToSetSequence.prototype.__iterator=function(type,reverse){var iterator=this._iter.__iterator(ITERATE_VALUES,reverse);return new src_Iterator__Iterator(function(){var step=iterator.next();return step.done?step:iteratorValue(type,step.value,step.value,step)})},createClass(FromEntriesSequence,KeyedSeq),FromEntriesSequence.prototype.entrySeq=function(){return this._iter.toSeq()},FromEntriesSequence.prototype.__iterate=function(fn,reverse){var this$0=this;return this._iter.__iterate(function(entry){if(entry){validateEntry(entry);var indexedIterable=isIterable(entry);return fn(indexedIterable?entry.get(1):entry[1],indexedIterable?entry.get(0):entry[0],this$0)}},reverse)},FromEntriesSequence.prototype.__iterator=function(type,reverse){var iterator=this._iter.__iterator(ITERATE_VALUES,reverse);return new src_Iterator__Iterator(function(){for(;;){var step=iterator.next();if(step.done)return step;var entry=step.value;if(entry){validateEntry(entry);var indexedIterable=isIterable(entry);return iteratorValue(type,indexedIterable?entry.get(0):entry[0],indexedIterable?entry.get(1):entry[1],step)}}})},ToIndexedSequence.prototype.cacheResult=ToKeyedSequence.prototype.cacheResult=ToSetSequence.prototype.cacheResult=FromEntriesSequence.prototype.cacheResult=cacheResultThrough,createClass(src_Map__Map,KeyedCollection),src_Map__Map.prototype.toString=function(){return this.__toString("Map {","}")},src_Map__Map.prototype.get=function(k,notSetValue){return this._root?this._root.get(0,void 0,k,notSetValue):notSetValue},src_Map__Map.prototype.set=function(k,v){return updateMap(this,k,v)},src_Map__Map.prototype.setIn=function(keyPath,v){return this.updateIn(keyPath,NOT_SET,function(){return v})},src_Map__Map.prototype.remove=function(k){return updateMap(this,k,NOT_SET)},src_Map__Map.prototype.deleteIn=function(keyPath){return this.updateIn(keyPath,function(){return NOT_SET})},src_Map__Map.prototype.update=function(k,notSetValue,updater){return 1===arguments.length?k(this):this.updateIn([k],notSetValue,updater)},src_Map__Map.prototype.updateIn=function(keyPath,notSetValue,updater){updater||(updater=notSetValue,notSetValue=void 0);var updatedValue=updateInDeepMap(this,forceIterator(keyPath),notSetValue,updater);return updatedValue===NOT_SET?void 0:updatedValue},src_Map__Map.prototype.clear=function(){return 0===this.size?this:this.__ownerID?(this.size=0,this._root=null,this.__hash=void 0,this.__altered=!0,this):emptyMap()},src_Map__Map.prototype.merge=function(){return mergeIntoMapWith(this,void 0,arguments)},src_Map__Map.prototype.mergeWith=function(merger){var iters=SLICE$0.call(arguments,1);return mergeIntoMapWith(this,merger,iters)},src_Map__Map.prototype.mergeIn=function(keyPath){var iters=SLICE$0.call(arguments,1);return this.updateIn(keyPath,emptyMap(),function(m){return"function"==typeof m.merge?m.merge.apply(m,iters):iters[iters.length-1]})},src_Map__Map.prototype.mergeDeep=function(){return mergeIntoMapWith(this,deepMerger(void 0),arguments)},src_Map__Map.prototype.mergeDeepWith=function(merger){var iters=SLICE$0.call(arguments,1);return mergeIntoMapWith(this,deepMerger(merger),iters)},src_Map__Map.prototype.mergeDeepIn=function(keyPath){var iters=SLICE$0.call(arguments,1);return this.updateIn(keyPath,emptyMap(),function(m){return"function"==typeof m.mergeDeep?m.mergeDeep.apply(m,iters):iters[iters.length-1]})},src_Map__Map.prototype.sort=function(comparator){return OrderedMap(sortFactory(this,comparator))},src_Map__Map.prototype.sortBy=function(mapper,comparator){return OrderedMap(sortFactory(this,comparator,mapper))},src_Map__Map.prototype.withMutations=function(fn){var mutable=this.asMutable();return fn(mutable),mutable.wasAltered()?mutable.__ensureOwner(this.__ownerID):this},src_Map__Map.prototype.asMutable=function(){return this.__ownerID?this:this.__ensureOwner(new OwnerID)},src_Map__Map.prototype.asImmutable=function(){return this.__ensureOwner()},src_Map__Map.prototype.wasAltered=function(){return this.__altered},src_Map__Map.prototype.__iterator=function(type,reverse){return new MapIterator(this,type,reverse)},src_Map__Map.prototype.__iterate=function(fn,reverse){var this$0=this,iterations=0;return this._root&&this._root.iterate(function(entry){return iterations++,fn(entry[1],entry[0],this$0)},reverse),iterations},src_Map__Map.prototype.__ensureOwner=function(ownerID){return ownerID===this.__ownerID?this:ownerID?makeMap(this.size,this._root,ownerID,this.__hash):(this.__ownerID=ownerID,this.__altered=!1,this)},src_Map__Map.isMap=isMap;var IS_MAP_SENTINEL="@@__IMMUTABLE_MAP__@@",MapPrototype=src_Map__Map.prototype;MapPrototype[IS_MAP_SENTINEL]=!0,MapPrototype[DELETE]=MapPrototype.remove,MapPrototype.removeIn=MapPrototype.deleteIn,ArrayMapNode.prototype.get=function(shift,keyHash,key,notSetValue){for(var entries=this.entries,ii=0,len=entries.length;len>ii;ii++)if(is(key,entries[ii][0]))return entries[ii][1];return notSetValue},ArrayMapNode.prototype.update=function(ownerID,shift,keyHash,key,value,didChangeSize,didAlter){for(var removed=value===NOT_SET,entries=this.entries,idx=0,len=entries.length;len>idx&&!is(key,entries[idx][0]);idx++);var exists=len>idx;if(exists?entries[idx][1]===value:removed)return this;if(SetRef(didAlter),(removed||!exists)&&SetRef(didChangeSize),!removed||1!==entries.length){if(!exists&&!removed&&entries.length>=MAX_ARRAY_MAP_SIZE)return createNodes(ownerID,entries,key,value);var isEditable=ownerID&&ownerID===this.ownerID,newEntries=isEditable?entries:arrCopy(entries);return exists?removed?idx===len-1?newEntries.pop():newEntries[idx]=newEntries.pop():newEntries[idx]=[key,value]:newEntries.push([key,value]),isEditable?(this.entries=newEntries,this):new ArrayMapNode(ownerID,newEntries)}},BitmapIndexedNode.prototype.get=function(shift,keyHash,key,notSetValue){void 0===keyHash&&(keyHash=hash(key));var bit=1<<((0===shift?keyHash:keyHash>>>shift)&MASK),bitmap=this.bitmap;return 0===(bitmap&bit)?notSetValue:this.nodes[popCount(bitmap&bit-1)].get(shift+SHIFT,keyHash,key,notSetValue)},BitmapIndexedNode.prototype.update=function(ownerID,shift,keyHash,key,value,didChangeSize,didAlter){void 0===keyHash&&(keyHash=hash(key));var keyHashFrag=(0===shift?keyHash:keyHash>>>shift)&MASK,bit=1<<keyHashFrag,bitmap=this.bitmap,exists=0!==(bitmap&bit);if(!exists&&value===NOT_SET)return this;var idx=popCount(bitmap&bit-1),nodes=this.nodes,node=exists?nodes[idx]:void 0,newNode=updateNode(node,ownerID,shift+SHIFT,keyHash,key,value,didChangeSize,didAlter);if(newNode===node)return this;if(!exists&&newNode&&nodes.length>=MAX_BITMAP_INDEXED_SIZE)return expandNodes(ownerID,nodes,bitmap,keyHashFrag,newNode);if(exists&&!newNode&&2===nodes.length&&isLeafNode(nodes[1^idx]))return nodes[1^idx];if(exists&&newNode&&1===nodes.length&&isLeafNode(newNode))return newNode;var isEditable=ownerID&&ownerID===this.ownerID,newBitmap=exists?newNode?bitmap:bitmap^bit:bitmap|bit,newNodes=exists?newNode?setIn(nodes,idx,newNode,isEditable):spliceOut(nodes,idx,isEditable):spliceIn(nodes,idx,newNode,isEditable);return isEditable?(this.bitmap=newBitmap,this.nodes=newNodes,this):new BitmapIndexedNode(ownerID,newBitmap,newNodes)},HashArrayMapNode.prototype.get=function(shift,keyHash,key,notSetValue){void 0===keyHash&&(keyHash=hash(key));var idx=(0===shift?keyHash:keyHash>>>shift)&MASK,node=this.nodes[idx];return node?node.get(shift+SHIFT,keyHash,key,notSetValue):notSetValue},HashArrayMapNode.prototype.update=function(ownerID,shift,keyHash,key,value,didChangeSize,didAlter){void 0===keyHash&&(keyHash=hash(key));var idx=(0===shift?keyHash:keyHash>>>shift)&MASK,removed=value===NOT_SET,nodes=this.nodes,node=nodes[idx];if(removed&&!node)return this;var newNode=updateNode(node,ownerID,shift+SHIFT,keyHash,key,value,didChangeSize,didAlter);if(newNode===node)return this;var newCount=this.count;if(node){if(!newNode&&(newCount--,MIN_HASH_ARRAY_MAP_SIZE>newCount))return packNodes(ownerID,nodes,newCount,idx)}else newCount++;var isEditable=ownerID&&ownerID===this.ownerID,newNodes=setIn(nodes,idx,newNode,isEditable);return isEditable?(this.count=newCount,this.nodes=newNodes,this):new HashArrayMapNode(ownerID,newCount,newNodes)},HashCollisionNode.prototype.get=function(shift,keyHash,key,notSetValue){for(var entries=this.entries,ii=0,len=entries.length;len>ii;ii++)if(is(key,entries[ii][0]))return entries[ii][1];return notSetValue},HashCollisionNode.prototype.update=function(ownerID,shift,keyHash,key,value,didChangeSize,didAlter){void 0===keyHash&&(keyHash=hash(key));var removed=value===NOT_SET;if(keyHash!==this.keyHash)return removed?this:(SetRef(didAlter),SetRef(didChangeSize),mergeIntoNode(this,ownerID,shift,keyHash,[key,value]));for(var entries=this.entries,idx=0,len=entries.length;len>idx&&!is(key,entries[idx][0]);idx++);var exists=len>idx;if(exists?entries[idx][1]===value:removed)return this;if(SetRef(didAlter),(removed||!exists)&&SetRef(didChangeSize),removed&&2===len)return new ValueNode(ownerID,this.keyHash,entries[1^idx]);var isEditable=ownerID&&ownerID===this.ownerID,newEntries=isEditable?entries:arrCopy(entries);return exists?removed?idx===len-1?newEntries.pop():newEntries[idx]=newEntries.pop():newEntries[idx]=[key,value]:newEntries.push([key,value]),isEditable?(this.entries=newEntries,this):new HashCollisionNode(ownerID,this.keyHash,newEntries)},ValueNode.prototype.get=function(shift,keyHash,key,notSetValue){return is(key,this.entry[0])?this.entry[1]:notSetValue},ValueNode.prototype.update=function(ownerID,shift,keyHash,key,value,didChangeSize,didAlter){var removed=value===NOT_SET,keyMatch=is(key,this.entry[0]);return(keyMatch?value===this.entry[1]:removed)?this:(SetRef(didAlter),removed?void SetRef(didChangeSize):keyMatch?ownerID&&ownerID===this.ownerID?(this.entry[1]=value,this):new ValueNode(ownerID,this.keyHash,[key,value]):(SetRef(didChangeSize),mergeIntoNode(this,ownerID,shift,hash(key),[key,value])))},ArrayMapNode.prototype.iterate=HashCollisionNode.prototype.iterate=function(fn,reverse){for(var entries=this.entries,ii=0,maxIndex=entries.length-1;maxIndex>=ii;ii++)if(fn(entries[reverse?maxIndex-ii:ii])===!1)return!1},BitmapIndexedNode.prototype.iterate=HashArrayMapNode.prototype.iterate=function(fn,reverse){for(var nodes=this.nodes,ii=0,maxIndex=nodes.length-1;maxIndex>=ii;ii++){var node=nodes[reverse?maxIndex-ii:ii];if(node&&node.iterate(fn,reverse)===!1)return!1}},ValueNode.prototype.iterate=function(fn,reverse){return fn(this.entry)},createClass(MapIterator,src_Iterator__Iterator),MapIterator.prototype.next=function(){for(var type=this._type,stack=this._stack;stack;){var maxIndex,node=stack.node,index=stack.index++;if(node.entry){if(0===index)return mapIteratorValue(type,node.entry)}else if(node.entries){if(maxIndex=node.entries.length-1,maxIndex>=index)return mapIteratorValue(type,node.entries[this._reverse?maxIndex-index:index])}else if(maxIndex=node.nodes.length-1,maxIndex>=index){var subNode=node.nodes[this._reverse?maxIndex-index:index];if(subNode){if(subNode.entry)return mapIteratorValue(type,subNode.entry);stack=this._stack=mapIteratorFrame(subNode,stack)}continue}stack=this._stack=this._stack.__prev}return iteratorDone()};var EMPTY_MAP,MAX_ARRAY_MAP_SIZE=SIZE/4,MAX_BITMAP_INDEXED_SIZE=SIZE/2,MIN_HASH_ARRAY_MAP_SIZE=SIZE/4;createClass(List,IndexedCollection),List.of=function(){return this(arguments)},List.prototype.toString=function(){return this.__toString("List [","]")},List.prototype.get=function(index,notSetValue){if(index=wrapIndex(this,index),0>index||index>=this.size)return notSetValue;index+=this._origin;var node=listNodeFor(this,index);return node&&node.array[index&MASK]},List.prototype.set=function(index,value){return updateList(this,index,value)},List.prototype.remove=function(index){return this.has(index)?0===index?this.shift():index===this.size-1?this.pop():this.splice(index,1):this},List.prototype.clear=function(){return 0===this.size?this:this.__ownerID?(this.size=this._origin=this._capacity=0,this._level=SHIFT,this._root=this._tail=null,this.__hash=void 0,this.__altered=!0,this):emptyList()},List.prototype.push=function(){var values=arguments,oldSize=this.size;return this.withMutations(function(list){setListBounds(list,0,oldSize+values.length);for(var ii=0;ii<values.length;ii++)list.set(oldSize+ii,values[ii])})},List.prototype.pop=function(){return setListBounds(this,0,-1)},List.prototype.unshift=function(){var values=arguments;return this.withMutations(function(list){setListBounds(list,-values.length);for(var ii=0;ii<values.length;ii++)list.set(ii,values[ii])})},List.prototype.shift=function(){return setListBounds(this,1)},List.prototype.merge=function(){return mergeIntoListWith(this,void 0,arguments)},List.prototype.mergeWith=function(merger){
var iters=SLICE$0.call(arguments,1);return mergeIntoListWith(this,merger,iters)},List.prototype.mergeDeep=function(){return mergeIntoListWith(this,deepMerger(void 0),arguments)},List.prototype.mergeDeepWith=function(merger){var iters=SLICE$0.call(arguments,1);return mergeIntoListWith(this,deepMerger(merger),iters)},List.prototype.setSize=function(size){return setListBounds(this,0,size)},List.prototype.slice=function(begin,end){var size=this.size;return wholeSlice(begin,end,size)?this:setListBounds(this,resolveBegin(begin,size),resolveEnd(end,size))},List.prototype.__iterator=function(type,reverse){var index=0,values=iterateList(this,reverse);return new src_Iterator__Iterator(function(){var value=values();return value===DONE?iteratorDone():iteratorValue(type,index++,value)})},List.prototype.__iterate=function(fn,reverse){for(var value,index=0,values=iterateList(this,reverse);(value=values())!==DONE&&fn(value,index++,this)!==!1;);return index},List.prototype.__ensureOwner=function(ownerID){return ownerID===this.__ownerID?this:ownerID?makeList(this._origin,this._capacity,this._level,this._root,this._tail,ownerID,this.__hash):(this.__ownerID=ownerID,this)},List.isList=isList;var IS_LIST_SENTINEL="@@__IMMUTABLE_LIST__@@",ListPrototype=List.prototype;ListPrototype[IS_LIST_SENTINEL]=!0,ListPrototype[DELETE]=ListPrototype.remove,ListPrototype.setIn=MapPrototype.setIn,ListPrototype.deleteIn=ListPrototype.removeIn=MapPrototype.removeIn,ListPrototype.update=MapPrototype.update,ListPrototype.updateIn=MapPrototype.updateIn,ListPrototype.mergeIn=MapPrototype.mergeIn,ListPrototype.mergeDeepIn=MapPrototype.mergeDeepIn,ListPrototype.withMutations=MapPrototype.withMutations,ListPrototype.asMutable=MapPrototype.asMutable,ListPrototype.asImmutable=MapPrototype.asImmutable,ListPrototype.wasAltered=MapPrototype.wasAltered,VNode.prototype.removeBefore=function(ownerID,level,index){if(index===level?1<<level:0||0===this.array.length)return this;var originIndex=index>>>level&MASK;if(originIndex>=this.array.length)return new VNode([],ownerID);var newChild,removingFirst=0===originIndex;if(level>0){var oldChild=this.array[originIndex];if(newChild=oldChild&&oldChild.removeBefore(ownerID,level-SHIFT,index),newChild===oldChild&&removingFirst)return this}if(removingFirst&&!newChild)return this;var editable=editableVNode(this,ownerID);if(!removingFirst)for(var ii=0;originIndex>ii;ii++)editable.array[ii]=void 0;return newChild&&(editable.array[originIndex]=newChild),editable},VNode.prototype.removeAfter=function(ownerID,level,index){if(index===level?1<<level:0||0===this.array.length)return this;var sizeIndex=index-1>>>level&MASK;if(sizeIndex>=this.array.length)return this;var newChild,removingLast=sizeIndex===this.array.length-1;if(level>0){var oldChild=this.array[sizeIndex];if(newChild=oldChild&&oldChild.removeAfter(ownerID,level-SHIFT,index),newChild===oldChild&&removingLast)return this}if(removingLast&&!newChild)return this;var editable=editableVNode(this,ownerID);return removingLast||editable.array.pop(),newChild&&(editable.array[sizeIndex]=newChild),editable};var EMPTY_LIST,DONE={};createClass(OrderedMap,src_Map__Map),OrderedMap.of=function(){return this(arguments)},OrderedMap.prototype.toString=function(){return this.__toString("OrderedMap {","}")},OrderedMap.prototype.get=function(k,notSetValue){var index=this._map.get(k);return void 0!==index?this._list.get(index)[1]:notSetValue},OrderedMap.prototype.clear=function(){return 0===this.size?this:this.__ownerID?(this.size=0,this._map.clear(),this._list.clear(),this):emptyOrderedMap()},OrderedMap.prototype.set=function(k,v){return updateOrderedMap(this,k,v)},OrderedMap.prototype.remove=function(k){return updateOrderedMap(this,k,NOT_SET)},OrderedMap.prototype.wasAltered=function(){return this._map.wasAltered()||this._list.wasAltered()},OrderedMap.prototype.__iterate=function(fn,reverse){var this$0=this;return this._list.__iterate(function(entry){return entry&&fn(entry[1],entry[0],this$0)},reverse)},OrderedMap.prototype.__iterator=function(type,reverse){return this._list.fromEntrySeq().__iterator(type,reverse)},OrderedMap.prototype.__ensureOwner=function(ownerID){if(ownerID===this.__ownerID)return this;var newMap=this._map.__ensureOwner(ownerID),newList=this._list.__ensureOwner(ownerID);return ownerID?makeOrderedMap(newMap,newList,ownerID,this.__hash):(this.__ownerID=ownerID,this._map=newMap,this._list=newList,this)},OrderedMap.isOrderedMap=isOrderedMap,OrderedMap.prototype[IS_ORDERED_SENTINEL]=!0,OrderedMap.prototype[DELETE]=OrderedMap.prototype.remove;var EMPTY_ORDERED_MAP;createClass(Stack,IndexedCollection),Stack.of=function(){return this(arguments)},Stack.prototype.toString=function(){return this.__toString("Stack [","]")},Stack.prototype.get=function(index,notSetValue){var head=this._head;for(index=wrapIndex(this,index);head&&index--;)head=head.next;return head?head.value:notSetValue},Stack.prototype.peek=function(){return this._head&&this._head.value},Stack.prototype.push=function(){if(0===arguments.length)return this;for(var newSize=this.size+arguments.length,head=this._head,ii=arguments.length-1;ii>=0;ii--)head={value:arguments[ii],next:head};return this.__ownerID?(this.size=newSize,this._head=head,this.__hash=void 0,this.__altered=!0,this):makeStack(newSize,head)},Stack.prototype.pushAll=function(iter){if(iter=IndexedIterable(iter),0===iter.size)return this;assertNotInfinite(iter.size);var newSize=this.size,head=this._head;return iter.reverse().forEach(function(value){newSize++,head={value:value,next:head}}),this.__ownerID?(this.size=newSize,this._head=head,this.__hash=void 0,this.__altered=!0,this):makeStack(newSize,head)},Stack.prototype.pop=function(){return this.slice(1)},Stack.prototype.unshift=function(){return this.push.apply(this,arguments)},Stack.prototype.unshiftAll=function(iter){return this.pushAll(iter)},Stack.prototype.shift=function(){return this.pop.apply(this,arguments)},Stack.prototype.clear=function(){return 0===this.size?this:this.__ownerID?(this.size=0,this._head=void 0,this.__hash=void 0,this.__altered=!0,this):emptyStack()},Stack.prototype.slice=function(begin,end){if(wholeSlice(begin,end,this.size))return this;var resolvedBegin=resolveBegin(begin,this.size),resolvedEnd=resolveEnd(end,this.size);if(resolvedEnd!==this.size)return IndexedCollection.prototype.slice.call(this,begin,end);for(var newSize=this.size-resolvedBegin,head=this._head;resolvedBegin--;)head=head.next;return this.__ownerID?(this.size=newSize,this._head=head,this.__hash=void 0,this.__altered=!0,this):makeStack(newSize,head)},Stack.prototype.__ensureOwner=function(ownerID){return ownerID===this.__ownerID?this:ownerID?makeStack(this.size,this._head,ownerID,this.__hash):(this.__ownerID=ownerID,this.__altered=!1,this)},Stack.prototype.__iterate=function(fn,reverse){if(reverse)return this.reverse().__iterate(fn);for(var iterations=0,node=this._head;node&&fn(node.value,iterations++,this)!==!1;)node=node.next;return iterations},Stack.prototype.__iterator=function(type,reverse){if(reverse)return this.reverse().__iterator(type);var iterations=0,node=this._head;return new src_Iterator__Iterator(function(){if(node){var value=node.value;return node=node.next,iteratorValue(type,iterations++,value)}return iteratorDone()})},Stack.isStack=isStack;var IS_STACK_SENTINEL="@@__IMMUTABLE_STACK__@@",StackPrototype=Stack.prototype;StackPrototype[IS_STACK_SENTINEL]=!0,StackPrototype.withMutations=MapPrototype.withMutations,StackPrototype.asMutable=MapPrototype.asMutable,StackPrototype.asImmutable=MapPrototype.asImmutable,StackPrototype.wasAltered=MapPrototype.wasAltered;var EMPTY_STACK;createClass(src_Set__Set,SetCollection),src_Set__Set.of=function(){return this(arguments)},src_Set__Set.fromKeys=function(value){return this(KeyedIterable(value).keySeq())},src_Set__Set.prototype.toString=function(){return this.__toString("Set {","}")},src_Set__Set.prototype.has=function(value){return this._map.has(value)},src_Set__Set.prototype.add=function(value){return updateSet(this,this._map.set(value,!0))},src_Set__Set.prototype.remove=function(value){return updateSet(this,this._map.remove(value))},src_Set__Set.prototype.clear=function(){return updateSet(this,this._map.clear())},src_Set__Set.prototype.union=function(){var iters=SLICE$0.call(arguments,0);return iters=iters.filter(function(x){return 0!==x.size}),0===iters.length?this:0!==this.size||this.__ownerID||1!==iters.length?this.withMutations(function(set){for(var ii=0;ii<iters.length;ii++)SetIterable(iters[ii]).forEach(function(value){return set.add(value)})}):this.constructor(iters[0])},src_Set__Set.prototype.intersect=function(){var iters=SLICE$0.call(arguments,0);if(0===iters.length)return this;iters=iters.map(function(iter){return SetIterable(iter)});var originalSet=this;return this.withMutations(function(set){originalSet.forEach(function(value){iters.every(function(iter){return iter.includes(value)})||set.remove(value)})})},src_Set__Set.prototype.subtract=function(){var iters=SLICE$0.call(arguments,0);if(0===iters.length)return this;iters=iters.map(function(iter){return SetIterable(iter)});var originalSet=this;return this.withMutations(function(set){originalSet.forEach(function(value){iters.some(function(iter){return iter.includes(value)})&&set.remove(value)})})},src_Set__Set.prototype.merge=function(){return this.union.apply(this,arguments)},src_Set__Set.prototype.mergeWith=function(merger){var iters=SLICE$0.call(arguments,1);return this.union.apply(this,iters)},src_Set__Set.prototype.sort=function(comparator){return OrderedSet(sortFactory(this,comparator))},src_Set__Set.prototype.sortBy=function(mapper,comparator){return OrderedSet(sortFactory(this,comparator,mapper))},src_Set__Set.prototype.wasAltered=function(){return this._map.wasAltered()},src_Set__Set.prototype.__iterate=function(fn,reverse){var this$0=this;return this._map.__iterate(function(_,k){return fn(k,k,this$0)},reverse)},src_Set__Set.prototype.__iterator=function(type,reverse){return this._map.map(function(_,k){return k}).__iterator(type,reverse)},src_Set__Set.prototype.__ensureOwner=function(ownerID){if(ownerID===this.__ownerID)return this;var newMap=this._map.__ensureOwner(ownerID);return ownerID?this.__make(newMap,ownerID):(this.__ownerID=ownerID,this._map=newMap,this)},src_Set__Set.isSet=isSet;var IS_SET_SENTINEL="@@__IMMUTABLE_SET__@@",SetPrototype=src_Set__Set.prototype;SetPrototype[IS_SET_SENTINEL]=!0,SetPrototype[DELETE]=SetPrototype.remove,SetPrototype.mergeDeep=SetPrototype.merge,SetPrototype.mergeDeepWith=SetPrototype.mergeWith,SetPrototype.withMutations=MapPrototype.withMutations,SetPrototype.asMutable=MapPrototype.asMutable,SetPrototype.asImmutable=MapPrototype.asImmutable,SetPrototype.__empty=emptySet,SetPrototype.__make=makeSet;var EMPTY_SET;createClass(OrderedSet,src_Set__Set),OrderedSet.of=function(){return this(arguments)},OrderedSet.fromKeys=function(value){return this(KeyedIterable(value).keySeq())},OrderedSet.prototype.toString=function(){return this.__toString("OrderedSet {","}")},OrderedSet.isOrderedSet=isOrderedSet;var OrderedSetPrototype=OrderedSet.prototype;OrderedSetPrototype[IS_ORDERED_SENTINEL]=!0,OrderedSetPrototype.__empty=emptyOrderedSet,OrderedSetPrototype.__make=makeOrderedSet;var EMPTY_ORDERED_SET;createClass(Record,KeyedCollection),Record.prototype.toString=function(){return this.__toString(recordName(this)+" {","}")},Record.prototype.has=function(k){return this._defaultValues.hasOwnProperty(k)},Record.prototype.get=function(k,notSetValue){if(!this.has(k))return notSetValue;var defaultVal=this._defaultValues[k];return this._map?this._map.get(k,defaultVal):defaultVal},Record.prototype.clear=function(){if(this.__ownerID)return this._map&&this._map.clear(),this;var RecordType=this.constructor;return RecordType._empty||(RecordType._empty=makeRecord(this,emptyMap()))},Record.prototype.set=function(k,v){if(!this.has(k))throw new Error('Cannot set unknown key "'+k+'" on '+recordName(this));var newMap=this._map&&this._map.set(k,v);return this.__ownerID||newMap===this._map?this:makeRecord(this,newMap)},Record.prototype.remove=function(k){if(!this.has(k))return this;var newMap=this._map&&this._map.remove(k);return this.__ownerID||newMap===this._map?this:makeRecord(this,newMap)},Record.prototype.wasAltered=function(){return this._map.wasAltered()},Record.prototype.__iterator=function(type,reverse){var this$0=this;return KeyedIterable(this._defaultValues).map(function(_,k){return this$0.get(k)}).__iterator(type,reverse)},Record.prototype.__iterate=function(fn,reverse){var this$0=this;return KeyedIterable(this._defaultValues).map(function(_,k){return this$0.get(k)}).__iterate(fn,reverse)},Record.prototype.__ensureOwner=function(ownerID){if(ownerID===this.__ownerID)return this;var newMap=this._map&&this._map.__ensureOwner(ownerID);return ownerID?makeRecord(this,newMap,ownerID):(this.__ownerID=ownerID,this._map=newMap,this)};var RecordPrototype=Record.prototype;RecordPrototype[DELETE]=RecordPrototype.remove,RecordPrototype.deleteIn=RecordPrototype.removeIn=MapPrototype.removeIn,RecordPrototype.merge=MapPrototype.merge,RecordPrototype.mergeWith=MapPrototype.mergeWith,RecordPrototype.mergeIn=MapPrototype.mergeIn,RecordPrototype.mergeDeep=MapPrototype.mergeDeep,RecordPrototype.mergeDeepWith=MapPrototype.mergeDeepWith,RecordPrototype.mergeDeepIn=MapPrototype.mergeDeepIn,RecordPrototype.setIn=MapPrototype.setIn,RecordPrototype.update=MapPrototype.update,RecordPrototype.updateIn=MapPrototype.updateIn,RecordPrototype.withMutations=MapPrototype.withMutations,RecordPrototype.asMutable=MapPrototype.asMutable,RecordPrototype.asImmutable=MapPrototype.asImmutable,createClass(Range,IndexedSeq),Range.prototype.toString=function(){return 0===this.size?"Range []":"Range [ "+this._start+"..."+this._end+(this._step>1?" by "+this._step:"")+" ]"},Range.prototype.get=function(index,notSetValue){return this.has(index)?this._start+wrapIndex(this,index)*this._step:notSetValue},Range.prototype.includes=function(searchValue){var possibleIndex=(searchValue-this._start)/this._step;return possibleIndex>=0&&possibleIndex<this.size&&possibleIndex===Math.floor(possibleIndex)},Range.prototype.slice=function(begin,end){return wholeSlice(begin,end,this.size)?this:(begin=resolveBegin(begin,this.size),end=resolveEnd(end,this.size),begin>=end?new Range(0,0):new Range(this.get(begin,this._end),this.get(end,this._end),this._step))},Range.prototype.indexOf=function(searchValue){var offsetValue=searchValue-this._start;if(offsetValue%this._step===0){var index=offsetValue/this._step;if(index>=0&&index<this.size)return index}return-1},Range.prototype.lastIndexOf=function(searchValue){return this.indexOf(searchValue)},Range.prototype.__iterate=function(fn,reverse){for(var maxIndex=this.size-1,step=this._step,value=reverse?this._start+maxIndex*step:this._start,ii=0;maxIndex>=ii;ii++){if(fn(value,ii,this)===!1)return ii+1;value+=reverse?-step:step}return ii},Range.prototype.__iterator=function(type,reverse){var maxIndex=this.size-1,step=this._step,value=reverse?this._start+maxIndex*step:this._start,ii=0;return new src_Iterator__Iterator(function(){var v=value;return value+=reverse?-step:step,ii>maxIndex?iteratorDone():iteratorValue(type,ii++,v)})},Range.prototype.equals=function(other){return other instanceof Range?this._start===other._start&&this._end===other._end&&this._step===other._step:deepEqual(this,other)};var EMPTY_RANGE;createClass(Repeat,IndexedSeq),Repeat.prototype.toString=function(){return 0===this.size?"Repeat []":"Repeat [ "+this._value+" "+this.size+" times ]"},Repeat.prototype.get=function(index,notSetValue){return this.has(index)?this._value:notSetValue},Repeat.prototype.includes=function(searchValue){return is(this._value,searchValue)},Repeat.prototype.slice=function(begin,end){var size=this.size;return wholeSlice(begin,end,size)?this:new Repeat(this._value,resolveEnd(end,size)-resolveBegin(begin,size))},Repeat.prototype.reverse=function(){return this},Repeat.prototype.indexOf=function(searchValue){return is(this._value,searchValue)?0:-1},Repeat.prototype.lastIndexOf=function(searchValue){return is(this._value,searchValue)?this.size:-1},Repeat.prototype.__iterate=function(fn,reverse){for(var ii=0;ii<this.size;ii++)if(fn(this._value,ii,this)===!1)return ii+1;return ii},Repeat.prototype.__iterator=function(type,reverse){var this$0=this,ii=0;return new src_Iterator__Iterator(function(){return ii<this$0.size?iteratorValue(type,ii++,this$0._value):iteratorDone()})},Repeat.prototype.equals=function(other){return other instanceof Repeat?is(this._value,other._value):deepEqual(other)};var EMPTY_REPEAT;Iterable.Iterator=src_Iterator__Iterator,mixin(Iterable,{toArray:function(){assertNotInfinite(this.size);var array=new Array(this.size||0);return this.valueSeq().__iterate(function(v,i){array[i]=v}),array},toIndexedSeq:function(){return new ToIndexedSequence(this)},toJS:function(){return this.toSeq().map(function(value){return value&&"function"==typeof value.toJS?value.toJS():value}).__toJS()},toJSON:function(){return this.toSeq().map(function(value){return value&&"function"==typeof value.toJSON?value.toJSON():value}).__toJS()},toKeyedSeq:function(){return new ToKeyedSequence(this,!0)},toMap:function(){return src_Map__Map(this.toKeyedSeq())},toObject:function(){assertNotInfinite(this.size);var object={};return this.__iterate(function(v,k){object[k]=v}),object},toOrderedMap:function(){return OrderedMap(this.toKeyedSeq())},toOrderedSet:function(){return OrderedSet(isKeyed(this)?this.valueSeq():this)},toSet:function(){return src_Set__Set(isKeyed(this)?this.valueSeq():this)},toSetSeq:function(){return new ToSetSequence(this)},toSeq:function(){return isIndexed(this)?this.toIndexedSeq():isKeyed(this)?this.toKeyedSeq():this.toSetSeq()},toStack:function(){return Stack(isKeyed(this)?this.valueSeq():this)},toList:function(){return List(isKeyed(this)?this.valueSeq():this)},toString:function(){return"[Iterable]"},__toString:function(head,tail){return 0===this.size?head+tail:head+" "+this.toSeq().map(this.__toStringMapper).join(", ")+" "+tail},concat:function(){var values=SLICE$0.call(arguments,0);return reify(this,concatFactory(this,values))},contains:function(searchValue){return this.includes(searchValue)},includes:function(searchValue){return this.some(function(value){return is(value,searchValue)})},entries:function(){return this.__iterator(ITERATE_ENTRIES)},every:function(predicate,context){assertNotInfinite(this.size);var returnValue=!0;return this.__iterate(function(v,k,c){return predicate.call(context,v,k,c)?void 0:(returnValue=!1,!1)}),returnValue},filter:function(predicate,context){return reify(this,filterFactory(this,predicate,context,!0))},find:function(predicate,context,notSetValue){var entry=this.findEntry(predicate,context);return entry?entry[1]:notSetValue},findEntry:function(predicate,context){var found;return this.__iterate(function(v,k,c){return predicate.call(context,v,k,c)?(found=[k,v],!1):void 0}),found},findLastEntry:function(predicate,context){return this.toSeq().reverse().findEntry(predicate,context)},forEach:function(sideEffect,context){return assertNotInfinite(this.size),this.__iterate(context?sideEffect.bind(context):sideEffect)},join:function(separator){assertNotInfinite(this.size),separator=void 0!==separator?""+separator:",";var joined="",isFirst=!0;return this.__iterate(function(v){isFirst?isFirst=!1:joined+=separator,joined+=null!==v&&void 0!==v?v.toString():""}),joined},keys:function(){return this.__iterator(ITERATE_KEYS)},map:function(mapper,context){return reify(this,mapFactory(this,mapper,context))},reduce:function(reducer,initialReduction,context){assertNotInfinite(this.size);var reduction,useFirst;return arguments.length<2?useFirst=!0:reduction=initialReduction,this.__iterate(function(v,k,c){useFirst?(useFirst=!1,reduction=v):reduction=reducer.call(context,reduction,v,k,c)}),reduction},reduceRight:function(reducer,initialReduction,context){var reversed=this.toKeyedSeq().reverse();return reversed.reduce.apply(reversed,arguments)},reverse:function(){return reify(this,reverseFactory(this,!0))},slice:function(begin,end){return reify(this,sliceFactory(this,begin,end,!0))},some:function(predicate,context){return!this.every(not(predicate),context)},sort:function(comparator){return reify(this,sortFactory(this,comparator))},values:function(){return this.__iterator(ITERATE_VALUES)},butLast:function(){return this.slice(0,-1)},isEmpty:function(){return void 0!==this.size?0===this.size:!this.some(function(){return!0})},count:function(predicate,context){return ensureSize(predicate?this.toSeq().filter(predicate,context):this)},countBy:function(grouper,context){return countByFactory(this,grouper,context)},equals:function(other){return deepEqual(this,other)},entrySeq:function(){var iterable=this;if(iterable._cache)return new ArraySeq(iterable._cache);var entriesSequence=iterable.toSeq().map(entryMapper).toIndexedSeq();return entriesSequence.fromEntrySeq=function(){return iterable.toSeq()},entriesSequence},filterNot:function(predicate,context){return this.filter(not(predicate),context)},findLast:function(predicate,context,notSetValue){return this.toKeyedSeq().reverse().find(predicate,context,notSetValue)},first:function(){return this.find(returnTrue)},flatMap:function(mapper,context){return reify(this,flatMapFactory(this,mapper,context))},flatten:function(depth){return reify(this,flattenFactory(this,depth,!0))},fromEntrySeq:function(){return new FromEntriesSequence(this)},get:function(searchKey,notSetValue){return this.find(function(_,key){return is(key,searchKey)},void 0,notSetValue)},getIn:function(searchKeyPath,notSetValue){for(var step,nested=this,iter=forceIterator(searchKeyPath);!(step=iter.next()).done;){var key=step.value;if(nested=nested&&nested.get?nested.get(key,NOT_SET):NOT_SET,nested===NOT_SET)return notSetValue}return nested},groupBy:function(grouper,context){return groupByFactory(this,grouper,context)},has:function(searchKey){return this.get(searchKey,NOT_SET)!==NOT_SET},hasIn:function(searchKeyPath){return this.getIn(searchKeyPath,NOT_SET)!==NOT_SET},isSubset:function(iter){return iter="function"==typeof iter.includes?iter:Iterable(iter),this.every(function(value){return iter.includes(value)})},isSuperset:function(iter){return iter="function"==typeof iter.isSubset?iter:Iterable(iter),iter.isSubset(this)},keySeq:function(){return this.toSeq().map(keyMapper).toIndexedSeq()},last:function(){return this.toSeq().reverse().first()},max:function(comparator){return maxFactory(this,comparator)},maxBy:function(mapper,comparator){return maxFactory(this,comparator,mapper)},min:function(comparator){return maxFactory(this,comparator?neg(comparator):defaultNegComparator)},minBy:function(mapper,comparator){return maxFactory(this,comparator?neg(comparator):defaultNegComparator,mapper)},rest:function(){return this.slice(1)},skip:function(amount){return this.slice(Math.max(0,amount))},skipLast:function(amount){return reify(this,this.toSeq().reverse().skip(amount).reverse())},skipWhile:function(predicate,context){return reify(this,skipWhileFactory(this,predicate,context,!0))},skipUntil:function(predicate,context){return this.skipWhile(not(predicate),context)},sortBy:function(mapper,comparator){return reify(this,sortFactory(this,comparator,mapper))},take:function(amount){return this.slice(0,Math.max(0,amount))},takeLast:function(amount){return reify(this,this.toSeq().reverse().take(amount).reverse())},takeWhile:function(predicate,context){return reify(this,takeWhileFactory(this,predicate,context))},takeUntil:function(predicate,context){return this.takeWhile(not(predicate),context)},valueSeq:function(){return this.toIndexedSeq()},hashCode:function(){return this.__hash||(this.__hash=hashIterable(this))}});var IterablePrototype=Iterable.prototype;IterablePrototype[IS_ITERABLE_SENTINEL]=!0,IterablePrototype[ITERATOR_SYMBOL]=IterablePrototype.values,IterablePrototype.__toJS=IterablePrototype.toArray,IterablePrototype.__toStringMapper=quoteString,IterablePrototype.inspect=IterablePrototype.toSource=function(){return this.toString()},IterablePrototype.chain=IterablePrototype.flatMap,function(){try{Object.defineProperty(IterablePrototype,"length",{get:function(){if(!Iterable.noLengthWarning){var stack;try{throw new Error}catch(error){stack=error.stack}if(-1===stack.indexOf("_wrapObject"))return console&&console.warn&&console.warn("iterable.length has been deprecated, use iterable.size or iterable.count(). This warning will become a silent error in a future version. "+stack),this.size}}})}catch(e){}}(),mixin(KeyedIterable,{flip:function(){return reify(this,flipFactory(this))},findKey:function(predicate,context){var entry=this.findEntry(predicate,context);return entry&&entry[0]},findLastKey:function(predicate,context){return this.toSeq().reverse().findKey(predicate,context)},keyOf:function(searchValue){return this.findKey(function(value){return is(value,searchValue)})},lastKeyOf:function(searchValue){return this.findLastKey(function(value){return is(value,searchValue)})},mapEntries:function(mapper,context){var this$0=this,iterations=0;return reify(this,this.toSeq().map(function(v,k){return mapper.call(context,[k,v],iterations++,this$0)}).fromEntrySeq())},mapKeys:function(mapper,context){var this$0=this;return reify(this,this.toSeq().flip().map(function(k,v){return mapper.call(context,k,v,this$0)}).flip())}});var KeyedIterablePrototype=KeyedIterable.prototype;KeyedIterablePrototype[IS_KEYED_SENTINEL]=!0,KeyedIterablePrototype[ITERATOR_SYMBOL]=IterablePrototype.entries,KeyedIterablePrototype.__toJS=IterablePrototype.toObject,KeyedIterablePrototype.__toStringMapper=function(v,k){return JSON.stringify(k)+": "+quoteString(v)},mixin(IndexedIterable,{toKeyedSeq:function(){return new ToKeyedSequence(this,!1)},filter:function(predicate,context){return reify(this,filterFactory(this,predicate,context,!1))},findIndex:function(predicate,context){var entry=this.findEntry(predicate,context);return entry?entry[0]:-1},indexOf:function(searchValue){var key=this.toKeyedSeq().keyOf(searchValue);return void 0===key?-1:key},lastIndexOf:function(searchValue){return this.toSeq().reverse().indexOf(searchValue)},reverse:function(){return reify(this,reverseFactory(this,!1))},slice:function(begin,end){return reify(this,sliceFactory(this,begin,end,!1))},splice:function(index,removeNum){var numArgs=arguments.length;if(removeNum=Math.max(0|removeNum,0),0===numArgs||2===numArgs&&!removeNum)return this;index=resolveBegin(index,this.size);var spliced=this.slice(0,index);return reify(this,1===numArgs?spliced:spliced.concat(arrCopy(arguments,2),this.slice(index+removeNum)))},findLastIndex:function(predicate,context){var key=this.toKeyedSeq().findLastKey(predicate,context);return void 0===key?-1:key},first:function(){return this.get(0)},flatten:function(depth){return reify(this,flattenFactory(this,depth,!1))},get:function(index,notSetValue){return index=wrapIndex(this,index),0>index||this.size===1/0||void 0!==this.size&&index>this.size?notSetValue:this.find(function(_,key){return key===index},void 0,notSetValue)},has:function(index){return index=wrapIndex(this,index),index>=0&&(void 0!==this.size?this.size===1/0||index<this.size:-1!==this.indexOf(index))},interpose:function(separator){return reify(this,interposeFactory(this,separator))},interleave:function(){var iterables=[this].concat(arrCopy(arguments)),zipped=zipWithFactory(this.toSeq(),IndexedSeq.of,iterables),interleaved=zipped.flatten(!0);return zipped.size&&(interleaved.size=zipped.size*iterables.length),reify(this,interleaved)},last:function(){return this.get(-1)},skipWhile:function(predicate,context){return reify(this,skipWhileFactory(this,predicate,context,!1))},zip:function(){var iterables=[this].concat(arrCopy(arguments));return reify(this,zipWithFactory(this,defaultZipper,iterables))},zipWith:function(zipper){var iterables=arrCopy(arguments);return iterables[0]=this,reify(this,zipWithFactory(this,zipper,iterables))}}),IndexedIterable.prototype[IS_INDEXED_SENTINEL]=!0,IndexedIterable.prototype[IS_ORDERED_SENTINEL]=!0,mixin(SetIterable,{get:function(value,notSetValue){return this.has(value)?value:notSetValue},includes:function(value){return this.has(value)},keySeq:function(){return this.valueSeq()}}),SetIterable.prototype.has=IterablePrototype.includes,mixin(KeyedSeq,KeyedIterable.prototype),mixin(IndexedSeq,IndexedIterable.prototype),mixin(SetSeq,SetIterable.prototype),mixin(KeyedCollection,KeyedIterable.prototype),mixin(IndexedCollection,IndexedIterable.prototype),mixin(SetCollection,SetIterable.prototype);var Immutable={Iterable:Iterable,Seq:Seq,Collection:Collection,Map:src_Map__Map,OrderedMap:OrderedMap,List:List,Stack:Stack,Set:src_Set__Set,OrderedSet:OrderedSet,Record:Record,Range:Range,Repeat:Repeat,is:is,fromJS:fromJS};return Immutable});


},{}],50:[function(require,module,exports){
!function(root,factory){"object"==typeof exports&&"object"==typeof module?module.exports=factory():"function"==typeof define&&define.amd?define(factory):"object"==typeof exports?exports.Kefir=factory():root.Kefir=factory()}(this,function(){return function(modules){function __webpack_require__(moduleId){if(installedModules[moduleId])return installedModules[moduleId].exports;var module=installedModules[moduleId]={exports:{},id:moduleId,loaded:!1};return modules[moduleId].call(module.exports,module,module.exports,__webpack_require__),module.loaded=!0,module.exports}var installedModules={};return __webpack_require__.m=modules,__webpack_require__.c=installedModules,__webpack_require__.p="",__webpack_require__(0)}([function(module,exports,__webpack_require__){"use strict";function deprecated(name,alt,fn){return function(){if(Kefir.DEPRECATION_WARNINGS&&"undefined"!=typeof console&&console.log){var message="Method `"+name+"` is deprecated, and to be removed in v3.0.0.\nUse `"+alt+"` instead.\nTo disable all warnings like this set `Kefir.DEPRECATION_WARNINGS = false`.";console.log(message)}return fn.apply(this,arguments)}}var Kefir=module.exports={};Kefir.Kefir=Kefir;var Observable=Kefir.Observable=__webpack_require__(1);Kefir.Stream=__webpack_require__(6),Kefir.Property=__webpack_require__(7),Kefir.never=__webpack_require__(8),Kefir.later=__webpack_require__(9),Kefir.interval=__webpack_require__(11),Kefir.sequentially=__webpack_require__(12),Kefir.fromPoll=__webpack_require__(13),Kefir.withInterval=__webpack_require__(14),Kefir.fromCallback=__webpack_require__(16),Kefir.fromNodeCallback=__webpack_require__(18),Kefir.fromEvents=__webpack_require__(19),Kefir.stream=__webpack_require__(17),Kefir.constant=__webpack_require__(22),Kefir.constantError=__webpack_require__(23),Kefir.fromPromise=__webpack_require__(24);var toProperty=__webpack_require__(25);Observable.prototype.toProperty=function(fn){return toProperty(this,fn)};var changes=__webpack_require__(27);Observable.prototype.changes=function(){return changes(this)};var toPromise=__webpack_require__(28);Observable.prototype.toPromise=function(Promise){return toPromise(this,Promise)};var map=__webpack_require__(29);Observable.prototype.map=function(fn){return map(this,fn)};var filter=__webpack_require__(30);Observable.prototype.filter=function(fn){return filter(this,fn)};var take=__webpack_require__(31);Observable.prototype.take=function(n){return take(this,n)};var takeWhile=__webpack_require__(32);Observable.prototype.takeWhile=function(fn){return takeWhile(this,fn)};var last=__webpack_require__(33);Observable.prototype.last=function(){return last(this)};var skip=__webpack_require__(34);Observable.prototype.skip=function(n){return skip(this,n)};var skipWhile=__webpack_require__(35);Observable.prototype.skipWhile=function(fn){return skipWhile(this,fn)};var skipDuplicates=__webpack_require__(36);Observable.prototype.skipDuplicates=function(fn){return skipDuplicates(this,fn)};var diff=__webpack_require__(37);Observable.prototype.diff=function(fn,seed){return diff(this,fn,seed)};var scan=__webpack_require__(38);Observable.prototype.scan=function(fn,seed){return scan(this,fn,seed)};var flatten=__webpack_require__(39);Observable.prototype.flatten=function(fn){return flatten(this,fn)};var delay=__webpack_require__(40);Observable.prototype.delay=function(wait){return delay(this,wait)};var throttle=__webpack_require__(41);Observable.prototype.throttle=function(wait,options){return throttle(this,wait,options)};var debounce=__webpack_require__(43);Observable.prototype.debounce=function(wait,options){return debounce(this,wait,options)};var valuesToErrors=__webpack_require__(44);Observable.prototype.valuesToErrors=function(fn){return valuesToErrors(this,fn)};var errorsToValues=__webpack_require__(45);Observable.prototype.errorsToValues=function(fn){return errorsToValues(this,fn)};var mapErrors=__webpack_require__(46);Observable.prototype.mapErrors=function(fn){return mapErrors(this,fn)};var filterErrors=__webpack_require__(47);Observable.prototype.filterErrors=function(fn){return filterErrors(this,fn)};var endOnError=__webpack_require__(48);Observable.prototype.endOnError=function(){return endOnError(this)};var skipValues=__webpack_require__(49);Observable.prototype.skipValues=function(){return skipValues(this)};var skipErrors=__webpack_require__(50);Observable.prototype.skipErrors=function(){return skipErrors(this)};var skipEnd=__webpack_require__(51);Observable.prototype.skipEnd=function(){return skipEnd(this)};var beforeEnd=__webpack_require__(52);Observable.prototype.beforeEnd=function(fn){return beforeEnd(this,fn)};var slidingWindow=__webpack_require__(53);Observable.prototype.slidingWindow=function(max,min){return slidingWindow(this,max,min)};var bufferWhile=__webpack_require__(54);Observable.prototype.bufferWhile=function(fn,options){return bufferWhile(this,fn,options)};var transduce=__webpack_require__(55);Observable.prototype.transduce=function(transducer){return transduce(this,transducer)};var withHandler=__webpack_require__(56);Observable.prototype.withHandler=function(fn){return withHandler(this,fn)};var combine=Kefir.combine=__webpack_require__(57);Observable.prototype.combine=function(other,combinator){return combine([this,other],combinator)};var zip=Kefir.zip=__webpack_require__(58);Observable.prototype.zip=function(other,combinator){return zip([this,other],combinator)};var merge=Kefir.merge=__webpack_require__(59);Observable.prototype.merge=function(other){return merge([this,other])};var concat=Kefir.concat=__webpack_require__(61);Observable.prototype.concat=function(other){return concat([this,other])};var Pool=Kefir.Pool=__webpack_require__(63);Kefir.pool=function(){return new Pool},Kefir.repeat=__webpack_require__(62);var FlatMap=__webpack_require__(64);Observable.prototype.flatMap=function(fn){return new FlatMap(this,fn).setName(this,"flatMap")},Observable.prototype.flatMapLatest=function(fn){return new FlatMap(this,fn,{concurLim:1,drop:"old"}).setName(this,"flatMapLatest")},Observable.prototype.flatMapFirst=function(fn){return new FlatMap(this,fn,{concurLim:1}).setName(this,"flatMapFirst")},Observable.prototype.flatMapConcat=function(fn){return new FlatMap(this,fn,{queueLim:-1,concurLim:1}).setName(this,"flatMapConcat")},Observable.prototype.flatMapConcurLimit=function(fn,limit){return new FlatMap(this,fn,{queueLim:-1,concurLim:limit}).setName(this,"flatMapConcurLimit")};var FlatMapErrors=__webpack_require__(65);Observable.prototype.flatMapErrors=function(fn){return new FlatMapErrors(this,fn).setName(this,"flatMapErrors")};var filterBy=__webpack_require__(66);Observable.prototype.filterBy=function(other){return filterBy(this,other)};var sampledBy2items=__webpack_require__(68);Observable.prototype.sampledBy=function(other,combinator){return sampledBy2items(this,other,combinator)};var skipUntilBy=__webpack_require__(69);Observable.prototype.skipUntilBy=function(other){return skipUntilBy(this,other)};var takeUntilBy=__webpack_require__(70);Observable.prototype.takeUntilBy=function(other){return takeUntilBy(this,other)};var bufferBy=__webpack_require__(71);Observable.prototype.bufferBy=function(other,options){return bufferBy(this,other,options)};var bufferWhileBy=__webpack_require__(72);Observable.prototype.bufferWhileBy=function(other,options){return bufferWhileBy(this,other,options)};var awaiting=__webpack_require__(73);Observable.prototype.awaiting=function(other){return awaiting(this,other)},Kefir.DEPRECATION_WARNINGS=!0;var Emitter=Kefir.Emitter=__webpack_require__(74);Kefir.emitter=deprecated("Kefir.emitter()","Kefir.stream()",function(){return new Emitter});var Bus=Kefir.Bus=__webpack_require__(75);Kefir.bus=deprecated("Kefir.bus()","Kefir.pool() or Kefir.stream()",function(){return new Bus});var reduce=__webpack_require__(76);Observable.prototype.reduce=deprecated(".reduce(fn, seed)",".scan(fn, seed).last()",function(fn,seed){return reduce(this,fn,seed)});var sampledByManyItems=__webpack_require__(77);Kefir.sampledBy=deprecated("Kefir.sampledBy()","Kefir.combine()",sampledByManyItems);var repeatedly=__webpack_require__(78);Kefir.repeatedly=deprecated("Kefir.repeatedly()","Kefir.repeat(() => Kefir.sequentially(...)})",repeatedly);var mapTo=__webpack_require__(79);Observable.prototype.mapTo=deprecated(".mapTo()",".map(() => value)",function(x){return mapTo(this,x)});var tap=__webpack_require__(80);Observable.prototype.tap=deprecated(".tap()",".map((v) => {fn(v); return v})",function(fn){return tap(this,fn)});var pluck=__webpack_require__(81);Observable.prototype.pluck=deprecated(".pluck()",".map((x) => x.foo)",function(propName){return pluck(this,propName)});var invoke=__webpack_require__(82);Observable.prototype.invoke=deprecated(".invoke()",".map((x) => x.foo())",function(methodName){for(var _len=arguments.length,args=Array(_len>1?_len-1:0),_key=1;_len>_key;_key++)args[_key-1]=arguments[_key];return invoke(this,methodName,args)});var timestamp=__webpack_require__(83);Observable.prototype.timestamp=deprecated(".timestamp()",".map((x) => {value: x, time: Date.now()})",function(){return timestamp(this)});var and=__webpack_require__(84);Kefir.and=deprecated("Kefir.and()","Kefir.combine([a, b], (a, b) => a && b)",and),Observable.prototype.and=deprecated(".and()",".combine(other, (a, b) => a && b)",function(other){return and([this,other])});var or=__webpack_require__(85);Kefir.or=deprecated("Kefir.or()","Kefir.combine([a, b], (a, b) => a || b)",or),Observable.prototype.or=deprecated(".or()",".combine(other, (a, b) => a || b)",function(other){return or([this,other])});var not=__webpack_require__(86);Observable.prototype.not=deprecated(".not()",".map((x) => !x)",function(){return not(this)});var fromSubUnsub=__webpack_require__(20);Kefir.fromSubUnsub=deprecated(".fromSubUnsub()","Kefir.stream()",fromSubUnsub);var takeWhileBy=__webpack_require__(87);Observable.prototype.takeWhileBy=deprecated(".takeWhileBy(foo)",".skipUntilBy(foo.filter((x) => !x))",function(other){return takeWhileBy(this,other)});var skipWhileBy=__webpack_require__(88);Observable.prototype.skipWhileBy=deprecated(".skipWhileBy(foo)",".takeUntilBy(foo.filter((x) => !x))",function(other){return skipWhileBy(this,other)})},function(module,exports,__webpack_require__){"use strict";function Observable(){this._dispatcher=new Dispatcher,this._active=!1,this._alive=!0,this._activating=!1,this._logHandlers=null}var _require=__webpack_require__(2),extend=_require.extend,_require2=__webpack_require__(3),VALUE=_require2.VALUE,ERROR=_require2.ERROR,ANY=_require2.ANY,END=_require2.END,_require3=__webpack_require__(4),Dispatcher=_require3.Dispatcher,callSubscriber=_require3.callSubscriber,_require4=__webpack_require__(5),findByPred=_require4.findByPred;extend(Observable.prototype,{_name:"observable",_onActivation:function(){},_onDeactivation:function(){},_setActive:function(active){this._active!==active&&(this._active=active,active?(this._activating=!0,this._onActivation(),this._activating=!1):this._onDeactivation())},_clear:function(){this._setActive(!1),this._alive=!1,this._dispatcher=null,this._logHandlers=null},_emit:function(type,x){switch(type){case VALUE:return this._emitValue(x);case ERROR:return this._emitError(x);case END:return this._emitEnd()}},_emitValue:function(value){this._alive&&this._dispatcher.dispatch({type:VALUE,value:value,current:this._activating})},_emitError:function(value){this._alive&&this._dispatcher.dispatch({type:ERROR,value:value,current:this._activating})},_emitEnd:function(){this._alive&&(this._dispatcher.dispatch({type:END,current:this._activating}),this._clear())},_on:function(type,fn){return this._alive?(this._dispatcher.add(type,fn),this._setActive(!0)):callSubscriber(type,fn,{type:END,current:!0}),this},_off:function(type,fn){if(this._alive){var count=this._dispatcher.remove(type,fn);0===count&&this._setActive(!1)}return this},onValue:function(fn){return this._on(VALUE,fn)},onError:function(fn){return this._on(ERROR,fn)},onEnd:function(fn){return this._on(END,fn)},onAny:function(fn){return this._on(ANY,fn)},offValue:function(fn){return this._off(VALUE,fn)},offError:function(fn){return this._off(ERROR,fn)},offEnd:function(fn){return this._off(END,fn)},offAny:function(fn){return this._off(ANY,fn)},_ofSameType:function(A,B){return A.prototype.getType()===this.getType()?A:B},setName:function(sourceObs,selfName){return this._name=selfName?""+sourceObs._name+"."+selfName:sourceObs,this},log:function(){var name=void 0===arguments[0]?this.toString():arguments[0],handler=function(event){var type="<"+event.type+(event.current?":current":"")+">";event.type===END?console.log(name,type):console.log(name,type,event.value)};return this._alive&&(this._logHandlers||(this._logHandlers=[]),this._logHandlers.push({name:name,handler:handler})),this.onAny(handler),this},offLog:function(){var name=void 0===arguments[0]?this.toString():arguments[0];if(this._logHandlers){var handlerIndex=findByPred(this._logHandlers,function(obj){return obj.name===name});-1!==handlerIndex&&(this.offAny(this._logHandlers[handlerIndex].handler),this._logHandlers.splice(handlerIndex,1))}return this}}),Observable.prototype.toString=function(){return"["+this._name+"]"},module.exports=Observable},function(module,exports,__webpack_require__){"use strict";function createObj(proto){var F=function(){};return F.prototype=proto,new F}function extend(target){var length=arguments.length,i=void 0,prop=void 0;for(i=1;length>i;i++)for(prop in arguments[i])target[prop]=arguments[i][prop];return target}function inherit(Child,Parent){var length=arguments.length,i=void 0;for(Child.prototype=createObj(Parent.prototype),Child.prototype.constructor=Child,i=2;length>i;i++)extend(Child.prototype,arguments[i]);return Child}module.exports={extend:extend,inherit:inherit}},function(module,exports,__webpack_require__){"use strict";exports.NOTHING=["<nothing>"],exports.END="end",exports.VALUE="value",exports.ERROR="error",exports.ANY="any"},function(module,exports,__webpack_require__){"use strict";function callSubscriber(type,fn,event){type===ANY?fn(event):type===event.type&&(type===VALUE||type===ERROR?fn(event.value):fn())}function Dispatcher(){this._items=[]}var _require=__webpack_require__(2),extend=_require.extend,_require2=__webpack_require__(3),VALUE=_require2.VALUE,ERROR=_require2.ERROR,ANY=_require2.ANY,_require3=__webpack_require__(5),concat=_require3.concat,removeByPred=_require3.removeByPred;extend(Dispatcher.prototype,{add:function(type,fn){return this._items=concat(this._items,[{type:type,fn:fn}]),this._items.length},remove:function(type,fn){return this._items=removeByPred(this._items,function(x){return x.type===type&&x.fn===fn}),this._items.length},dispatch:function(event){for(var i=0,items=this._items;i<items.length;i++)callSubscriber(items[i].type,items[i].fn,event)}}),module.exports={callSubscriber:callSubscriber,Dispatcher:Dispatcher}},function(module,exports,__webpack_require__){"use strict";function concat(a,b){var result=void 0,length=void 0,i=void 0,j=void 0;if(0===a.length)return b;if(0===b.length)return a;for(j=0,result=new Array(a.length+b.length),length=a.length,i=0;length>i;i++,j++)result[j]=a[i];for(length=b.length,i=0;length>i;i++,j++)result[j]=b[i];return result}function circleShift(arr,distance){var length=arr.length,result=new Array(length),i=void 0;for(i=0;length>i;i++)result[(i+distance)%length]=arr[i];return result}function find(arr,value){var length=arr.length,i=void 0;for(i=0;length>i;i++)if(arr[i]===value)return i;return-1}function findByPred(arr,pred){var length=arr.length,i=void 0;for(i=0;length>i;i++)if(pred(arr[i]))return i;return-1}function cloneArray(input){var length=input.length,result=new Array(length),i=void 0;for(i=0;length>i;i++)result[i]=input[i];return result}function remove(input,index){var length=input.length,result=void 0,i=void 0,j=void 0;if(index>=0&&length>index){if(1===length)return[];for(result=new Array(length-1),i=0,j=0;length>i;i++)i!==index&&(result[j]=input[i],j++);return result}return input}function removeByPred(input,pred){return remove(input,findByPred(input,pred))}function map(input,fn){var length=input.length,result=new Array(length),i=void 0;for(i=0;length>i;i++)result[i]=fn(input[i]);return result}function forEach(arr,fn){var length=arr.length,i=void 0;for(i=0;length>i;i++)fn(arr[i])}function fillArray(arr,value){var length=arr.length,i=void 0;for(i=0;length>i;i++)arr[i]=value}function contains(arr,value){return-1!==find(arr,value)}function slide(cur,next,max){var length=Math.min(max,cur.length+1),offset=cur.length-length+1,result=new Array(length),i=void 0;for(i=offset;length>i;i++)result[i-offset]=cur[i];return result[length-1]=next,result}module.exports={concat:concat,circleShift:circleShift,find:find,findByPred:findByPred,cloneArray:cloneArray,remove:remove,removeByPred:removeByPred,map:map,forEach:forEach,fillArray:fillArray,contains:contains,slide:slide}},function(module,exports,__webpack_require__){"use strict";function Stream(){Observable.call(this)}var _require=__webpack_require__(2),inherit=_require.inherit,Observable=__webpack_require__(1);inherit(Stream,Observable,{_name:"stream",getType:function(){return"stream"}}),module.exports=Stream},function(module,exports,__webpack_require__){"use strict";function Property(){Observable.call(this),this._currentEvent=null}var _require=__webpack_require__(2),inherit=_require.inherit,_require2=__webpack_require__(3),VALUE=_require2.VALUE,ERROR=_require2.ERROR,END=_require2.END,_require3=__webpack_require__(4),callSubscriber=_require3.callSubscriber,Observable=__webpack_require__(1);inherit(Property,Observable,{_name:"property",_emitValue:function(value){this._alive&&(this._activating||this._dispatcher.dispatch({type:VALUE,value:value,current:this._activating}),this._currentEvent={type:VALUE,value:value,current:!0})},_emitError:function(value){this._alive&&(this._activating||this._dispatcher.dispatch({type:ERROR,value:value,current:this._activating}),this._currentEvent={type:ERROR,value:value,current:!0})},_emitEnd:function(){this._alive&&(this._activating||this._dispatcher.dispatch({type:END,current:this._activating}),this._clear())},_on:function(type,fn){return this._alive&&(this._dispatcher.add(type,fn),this._setActive(!0)),null!==this._currentEvent&&callSubscriber(type,fn,this._currentEvent),this._alive||callSubscriber(type,fn,{type:END,current:!0}),this},getType:function(){return"property"}}),module.exports=Property},function(module,exports,__webpack_require__){"use strict";var Stream=__webpack_require__(6),neverS=new Stream;neverS._emitEnd(),neverS._name="never",module.exports=function(){return neverS}},function(module,exports,__webpack_require__){"use strict";var timeBased=__webpack_require__(10),S=timeBased({_name:"later",_init:function(_ref){var x=_ref.x;this._x=x},_free:function(){this._x=null},_onTick:function(){this._emitValue(this._x),this._emitEnd()}});module.exports=function(wait,x){return new S(wait,{x:x})}},function(module,exports,__webpack_require__){"use strict";var _require=__webpack_require__(2),inherit=_require.inherit,Stream=__webpack_require__(6);module.exports=function(mixin){function AnonymousStream(wait,options){var _this=this;Stream.call(this),this._wait=wait,this._intervalId=null,this._$onTick=function(){return _this._onTick()},this._init(options)}return inherit(AnonymousStream,Stream,{_init:function(options){},_free:function(){},_onTick:function(){},_onActivation:function(){this._intervalId=setInterval(this._$onTick,this._wait)},_onDeactivation:function(){null!==this._intervalId&&(clearInterval(this._intervalId),this._intervalId=null)},_clear:function(){Stream.prototype._clear.call(this),this._$onTick=null,this._free()}},mixin),AnonymousStream}},function(module,exports,__webpack_require__){"use strict";var timeBased=__webpack_require__(10),S=timeBased({_name:"interval",_init:function(_ref){var x=_ref.x;this._x=x},_free:function(){this._x=null},_onTick:function(){this._emitValue(this._x)}});module.exports=function(wait,x){return new S(wait,{x:x})}},function(module,exports,__webpack_require__){"use strict";var timeBased=__webpack_require__(10),_require=__webpack_require__(5),cloneArray=_require.cloneArray,never=__webpack_require__(8),S=timeBased({_name:"sequentially",_init:function(_ref){var xs=_ref.xs;this._xs=cloneArray(xs)},_free:function(){this._xs=null},_onTick:function(){1===this._xs.length?(this._emitValue(this._xs[0]),this._emitEnd()):this._emitValue(this._xs.shift())}});module.exports=function(wait,xs){return 0===xs.length?never():new S(wait,{xs:xs})}},function(module,exports,__webpack_require__){"use strict";var timeBased=__webpack_require__(10),S=timeBased({_name:"fromPoll",_init:function(_ref){var fn=_ref.fn;this._fn=fn},_free:function(){this._fn=null},_onTick:function(){var fn=this._fn;this._emitValue(fn())}});module.exports=function(wait,fn){return new S(wait,{fn:fn})}},function(module,exports,__webpack_require__){"use strict";var timeBased=__webpack_require__(10),emitter=__webpack_require__(15),S=timeBased({_name:"withInterval",_init:function(_ref){var fn=_ref.fn;this._fn=fn,this._emitter=emitter(this)},_free:function(){this._fn=null,this._emitter=null},_onTick:function(){var fn=this._fn;fn(this._emitter)}});module.exports=function(wait,fn){return new S(wait,{fn:fn})}},function(module,exports,__webpack_require__){"use strict";module.exports=function(obs){function value(x){return obs._emitValue(x),obs._active}function error(x){return obs._emitError(x),obs._active}function end(){return obs._emitEnd(),obs._active}function event(e){return obs._emit(e.type,e.value),obs._active}return{value:value,error:error,end:end,event:event,emit:value,emitEvent:event}}},function(module,exports,__webpack_require__){"use strict";var stream=__webpack_require__(17);module.exports=function(callbackConsumer){var called=!1;return stream(function(emitter){called||(callbackConsumer(function(x){emitter.emit(x),emitter.end()}),called=!0)}).setName("fromCallback")}},function(module,exports,__webpack_require__){"use strict";function S(fn){Stream.call(this),this._fn=fn,this._unsubscribe=null}var _require=__webpack_require__(2),inherit=_require.inherit,Stream=__webpack_require__(6),emitter=__webpack_require__(15);inherit(S,Stream,{_name:"stream",_onActivation:function(){var fn=this._fn,unsubscribe=fn(emitter(this));this._unsubscribe="function"==typeof unsubscribe?unsubscribe:null,this._active||this._callUnsubscribe()},_callUnsubscribe:function(){null!==this._unsubscribe&&(this._unsubscribe(),this._unsubscribe=null)},_onDeactivation:function(){this._callUnsubscribe()},_clear:function(){Stream.prototype._clear.call(this),this._fn=null}}),module.exports=function(fn){return new S(fn)}},function(module,exports,__webpack_require__){"use strict";var stream=__webpack_require__(17);module.exports=function(callbackConsumer){var called=!1;return stream(function(emitter){called||(callbackConsumer(function(error,x){error?emitter.error(error):emitter.emit(x),emitter.end()}),called=!0)}).setName("fromNodeCallback")}},function(module,exports,__webpack_require__){"use strict";var fromSubUnsub=__webpack_require__(20),pairs=[["addEventListener","removeEventListener"],["addListener","removeListener"],["on","off"]];module.exports=function(target,eventName,transformer){for(var sub=void 0,unsub=void 0,i=0;i<pairs.length;i++)if("function"==typeof target[pairs[i][0]]&&"function"==typeof target[pairs[i][1]]){sub=pairs[i][0],unsub=pairs[i][1];break}if(void 0===sub)throw new Error("target don't support any of addEventListener/removeEventListener, addListener/removeListener, on/off method pair");return fromSubUnsub(function(handler){return target[sub](eventName,handler)},function(handler){return target[unsub](eventName,handler)},transformer).setName("fromEvents")}},function(module,exports,__webpack_require__){"use strict";var stream=__webpack_require__(17),_require=__webpack_require__(21),apply=_require.apply;module.exports=function(sub,unsub,transformer){return stream(function(emitter){var handler=transformer?function(){emitter.emit(apply(transformer,this,arguments))}:emitter.emit;return sub(handler),function(){return unsub(handler)}}).setName("fromSubUnsub")}},function(module,exports,__webpack_require__){"use strict";function spread(fn,length){switch(length){case 0:return function(a){return fn()};case 1:return function(a){return fn(a[0])};case 2:return function(a){return fn(a[0],a[1])};case 3:return function(a){return fn(a[0],a[1],a[2])};case 4:return function(a){return fn(a[0],a[1],a[2],a[3])};default:return function(a){return fn.apply(null,a)}}}function apply(fn,c,a){var aLength=a?a.length:0;if(null==c)switch(aLength){case 0:return fn();case 1:return fn(a[0]);case 2:return fn(a[0],a[1]);case 3:return fn(a[0],a[1],a[2]);case 4:return fn(a[0],a[1],a[2],a[3]);default:return fn.apply(null,a)}else switch(aLength){case 0:return fn.call(c);default:return fn.apply(c,a)}}module.exports={spread:spread,apply:apply}},function(module,exports,__webpack_require__){"use strict";function P(value){this._currentEvent={type:"value",value:value,current:!0}}var _require=__webpack_require__(2),inherit=_require.inherit,Property=__webpack_require__(7);inherit(P,Property,{_name:"constant",_active:!1,_activating:!1,_alive:!1,_dispatcher:null,_logHandlers:null}),module.exports=function(x){return new P(x)}},function(module,exports,__webpack_require__){"use strict";function P(value){this._currentEvent={type:"error",value:value,current:!0}}var _require=__webpack_require__(2),inherit=_require.inherit,Property=__webpack_require__(7);inherit(P,Property,{_name:"constantError",_active:!1,_activating:!1,_alive:!1,_dispatcher:null,_logHandlers:null}),module.exports=function(x){return new P(x)}},function(module,exports,__webpack_require__){"use strict";var stream=__webpack_require__(17),toProperty=__webpack_require__(25);module.exports=function(promise){var called=!1,result=stream(function(emitter){if(!called){var onValue=function(x){emitter.emit(x),emitter.end()},onError=function(x){emitter.error(x),emitter.end()},_promise=promise.then(onValue,onError);_promise&&"function"==typeof _promise.done&&_promise.done(),called=!0}});return toProperty(result,null).setName("fromPromise")}},function(module,exports,__webpack_require__){"use strict";var _require=__webpack_require__(26),createProperty=_require.createProperty,P=createProperty("toProperty",{_init:function(_ref){var fn=_ref.fn;this._getInitialCurrent=fn},_onActivation:function(){if(null!==this._getInitialCurrent){var getInitial=this._getInitialCurrent;this._emitValue(getInitial())}this._source.onAny(this._$handleAny)}});module.exports=function(obs){var fn=void 0===arguments[1]?null:arguments[1];if(null!==fn&&"function"!=typeof fn)throw new Error("You should call toProperty() with a function or no arguments.");return new P(obs,{fn:fn})}},function(module,exports,__webpack_require__){"use strict";function createConstructor(BaseClass,name){return function(source,options){var _this=this;BaseClass.call(this),this._source=source,this._name=""+source._name+"."+name,this._init(options),this._$handleAny=function(event){return _this._handleAny(event)}}}function createClassMethods(BaseClass){return{_init:function(options){},_free:function(){},_handleValue:function(x){this._emitValue(x)},_handleError:function(x){this._emitError(x)},_handleEnd:function(){this._emitEnd()},_handleAny:function(event){switch(event.type){case VALUE:return this._handleValue(event.value);case ERROR:return this._handleError(event.value);case END:return this._handleEnd()}},_onActivation:function(){this._source.onAny(this._$handleAny)},_onDeactivation:function(){this._source.offAny(this._$handleAny)},_clear:function(){BaseClass.prototype._clear.call(this),this._source=null,this._$handleAny=null,this._free()}}}function createStream(name,mixin){var S=createConstructor(Stream,name);return inherit(S,Stream,createClassMethods(Stream),mixin),S}function createProperty(name,mixin){var P=createConstructor(Property,name);return inherit(P,Property,createClassMethods(Property),mixin),P}var Stream=__webpack_require__(6),Property=__webpack_require__(7),_require=__webpack_require__(2),inherit=_require.inherit,_require2=__webpack_require__(3),VALUE=_require2.VALUE,ERROR=_require2.ERROR,END=_require2.END;module.exports={createStream:createStream,createProperty:createProperty}},function(module,exports,__webpack_require__){"use strict";var _require=__webpack_require__(26),createStream=_require.createStream,S=createStream("changes",{_handleValue:function(x){this._activating||this._emitValue(x)},_handleError:function(x){this._activating||this._emitError(x)}});module.exports=function(obs){return new S(obs)}},function(module,exports,__webpack_require__){"use strict";function getGlodalPromise(){if("function"==typeof Promise)return Promise;throw new Error("There isn't default Promise, use shim or parameter")}module.exports=function(obs){var Promise=void 0===arguments[1]?getGlodalPromise():arguments[1],last=null;return new Promise(function(resolve,reject){obs.onAny(function(event){"end"===event.type&&null!==last?(("value"===last.type?resolve:reject)(last.value),last=null):last=event})})}},function(module,exports,__webpack_require__){"use strict";var _require=__webpack_require__(26),createStream=_require.createStream,createProperty=_require.createProperty,mixin={_init:function(_ref){var fn=_ref.fn;this._fn=fn},_free:function(){this._fn=null},_handleValue:function(x){var fn=this._fn;this._emitValue(fn(x))}},S=createStream("map",mixin),P=createProperty("map",mixin),id=function(x){return x};module.exports=function(obs){var fn=void 0===arguments[1]?id:arguments[1];return new(obs._ofSameType(S,P))(obs,{fn:fn})}},function(module,exports,__webpack_require__){"use strict";var _require=__webpack_require__(26),createStream=_require.createStream,createProperty=_require.createProperty,mixin={_init:function(_ref){var fn=_ref.fn;this._fn=fn},_free:function(){this._fn=null},_handleValue:function(x){var fn=this._fn;fn(x)&&this._emitValue(x)}},S=createStream("filter",mixin),P=createProperty("filter",mixin),id=function(x){return x};module.exports=function(obs){var fn=void 0===arguments[1]?id:arguments[1];return new(obs._ofSameType(S,P))(obs,{fn:fn})}},function(module,exports,__webpack_require__){"use strict";var _require=__webpack_require__(26),createStream=_require.createStream,createProperty=_require.createProperty,mixin={_init:function(_ref){var n=_ref.n;this._n=n,0>=n&&this._emitEnd()},_handleValue:function(x){this._n--,this._emitValue(x),0===this._n&&this._emitEnd()}},S=createStream("take",mixin),P=createProperty("take",mixin);module.exports=function(obs,n){return new(obs._ofSameType(S,P))(obs,{n:n})}},function(module,exports,__webpack_require__){"use strict";var _require=__webpack_require__(26),createStream=_require.createStream,createProperty=_require.createProperty,mixin={_init:function(_ref){var fn=_ref.fn;this._fn=fn},_free:function(){this._fn=null},_handleValue:function(x){var fn=this._fn;fn(x)?this._emitValue(x):this._emitEnd()}},S=createStream("takeWhile",mixin),P=createProperty("takeWhile",mixin),id=function(x){return x};module.exports=function(obs){var fn=void 0===arguments[1]?id:arguments[1];return new(obs._ofSameType(S,P))(obs,{fn:fn})}},function(module,exports,__webpack_require__){"use strict";var _require=__webpack_require__(26),createStream=_require.createStream,createProperty=_require.createProperty,_require2=__webpack_require__(3),NOTHING=_require2.NOTHING,mixin={_init:function(){this._lastValue=NOTHING},_free:function(){this._lastValue=null},_handleValue:function(x){this._lastValue=x},_handleEnd:function(){this._lastValue!==NOTHING&&this._emitValue(this._lastValue),this._emitEnd()}},S=createStream("last",mixin),P=createProperty("last",mixin);module.exports=function(obs){return new(obs._ofSameType(S,P))(obs)}},function(module,exports,__webpack_require__){"use strict";var _require=__webpack_require__(26),createStream=_require.createStream,createProperty=_require.createProperty,mixin={
_init:function(_ref){var n=_ref.n;this._n=Math.max(0,n)},_handleValue:function(x){0===this._n?this._emitValue(x):this._n--}},S=createStream("skip",mixin),P=createProperty("skip",mixin);module.exports=function(obs,n){return new(obs._ofSameType(S,P))(obs,{n:n})}},function(module,exports,__webpack_require__){"use strict";var _require=__webpack_require__(26),createStream=_require.createStream,createProperty=_require.createProperty,mixin={_init:function(_ref){var fn=_ref.fn;this._fn=fn},_free:function(){this._fn=null},_handleValue:function(x){var fn=this._fn;null===this._fn||fn(x)||(this._fn=null),null===this._fn&&this._emitValue(x)}},S=createStream("skipWhile",mixin),P=createProperty("skipWhile",mixin),id=function(x){return x};module.exports=function(obs){var fn=void 0===arguments[1]?id:arguments[1];return new(obs._ofSameType(S,P))(obs,{fn:fn})}},function(module,exports,__webpack_require__){"use strict";var _require=__webpack_require__(26),createStream=_require.createStream,createProperty=_require.createProperty,_require2=__webpack_require__(3),NOTHING=_require2.NOTHING,mixin={_init:function(_ref){var fn=_ref.fn;this._fn=fn,this._prev=NOTHING},_free:function(){this._fn=null,this._prev=null},_handleValue:function(x){var fn=this._fn;this._prev!==NOTHING&&fn(this._prev,x)||(this._prev=x,this._emitValue(x))}},S=createStream("skipDuplicates",mixin),P=createProperty("skipDuplicates",mixin),eq=function(a,b){return a===b};module.exports=function(obs){var fn=void 0===arguments[1]?eq:arguments[1];return new(obs._ofSameType(S,P))(obs,{fn:fn})}},function(module,exports,__webpack_require__){"use strict";function defaultFn(a,b){return[a,b]}var _require=__webpack_require__(26),createStream=_require.createStream,createProperty=_require.createProperty,_require2=__webpack_require__(3),NOTHING=_require2.NOTHING,mixin={_init:function(_ref){var fn=_ref.fn,seed=_ref.seed;this._fn=fn,this._prev=seed},_free:function(){this._prev=null,this._fn=null},_handleValue:function(x){if(this._prev!==NOTHING){var fn=this._fn;this._emitValue(fn(this._prev,x))}this._prev=x}},S=createStream("diff",mixin),P=createProperty("diff",mixin);module.exports=function(obs,fn){var seed=void 0===arguments[2]?NOTHING:arguments[2];return new(obs._ofSameType(S,P))(obs,{fn:fn||defaultFn,seed:seed})}},function(module,exports,__webpack_require__){"use strict";var _require=__webpack_require__(26),createProperty=_require.createProperty,_require2=__webpack_require__(3),ERROR=_require2.ERROR,NOTHING=_require2.NOTHING,P=createProperty("scan",{_init:function(_ref){var fn=_ref.fn,seed=_ref.seed;this._fn=fn,seed!==NOTHING&&this._emitValue(seed)},_free:function(){this._fn=null},_handleValue:function(x){if(null!==this._currentEvent&&this._currentEvent.type!==ERROR){var fn=this._fn;x=fn(this._currentEvent.value,x)}this._emitValue(x)}});module.exports=function(obs,fn){var seed=void 0===arguments[2]?NOTHING:arguments[2];return new P(obs,{fn:fn,seed:seed})}},function(module,exports,__webpack_require__){"use strict";var _require=__webpack_require__(26),createStream=_require.createStream,createProperty=_require.createProperty,mixin={_init:function(_ref){var fn=_ref.fn;this._fn=fn},_free:function(){this._fn=null},_handleValue:function(x){for(var fn=this._fn,xs=fn(x),i=0;i<xs.length;i++)this._emitValue(xs[i])}},S=createStream("flatten",mixin),P=createProperty("flatten",mixin),id=function(x){return x};module.exports=function(obs){var fn=void 0===arguments[1]?id:arguments[1];return new(obs._ofSameType(S,P))(obs,{fn:fn})}},function(module,exports,__webpack_require__){"use strict";var _require=__webpack_require__(26),createStream=_require.createStream,createProperty=_require.createProperty,mixin={_init:function(_ref){var _this=this,wait=_ref.wait;this._wait=Math.max(0,wait),this._buff=[],this._$shiftBuff=function(){return _this._emitValue(_this._buff.shift())}},_free:function(){this._buff=null,this._$shiftBuff=null},_handleValue:function(x){this._activating?this._emitValue(x):(this._buff.push(x),setTimeout(this._$shiftBuff,this._wait))},_handleEnd:function(){var _this2=this;this._activating?this._emitEnd():setTimeout(function(){return _this2._emitEnd()},this._wait)}},S=createStream("delay",mixin),P=createProperty("delay",mixin);module.exports=function(obs,wait){return new(obs._ofSameType(S,P))(obs,{wait:wait})}},function(module,exports,__webpack_require__){"use strict";var _require=__webpack_require__(26),createStream=_require.createStream,createProperty=_require.createProperty,now=__webpack_require__(42),mixin={_init:function(_ref){var _this=this,wait=_ref.wait,leading=_ref.leading,trailing=_ref.trailing;this._wait=Math.max(0,wait),this._leading=leading,this._trailing=trailing,this._trailingValue=null,this._timeoutId=null,this._endLater=!1,this._lastCallTime=0,this._$trailingCall=function(){return _this._trailingCall()}},_free:function(){this._trailingValue=null,this._$trailingCall=null},_handleValue:function(x){if(this._activating)this._emitValue(x);else{var curTime=now();0!==this._lastCallTime||this._leading||(this._lastCallTime=curTime);var remaining=this._wait-(curTime-this._lastCallTime);0>=remaining?(this._cancelTrailing(),this._lastCallTime=curTime,this._emitValue(x)):this._trailing&&(this._cancelTrailing(),this._trailingValue=x,this._timeoutId=setTimeout(this._$trailingCall,remaining))}},_handleEnd:function(){this._activating?this._emitEnd():this._timeoutId?this._endLater=!0:this._emitEnd()},_cancelTrailing:function(){null!==this._timeoutId&&(clearTimeout(this._timeoutId),this._timeoutId=null)},_trailingCall:function(){this._emitValue(this._trailingValue),this._timeoutId=null,this._trailingValue=null,this._lastCallTime=this._leading?now():0,this._endLater&&this._emitEnd()}},S=createStream("throttle",mixin),P=createProperty("throttle",mixin);module.exports=function(obs,wait){var _ref2=void 0===arguments[2]?{}:arguments[2],_ref2$leading=_ref2.leading,leading=void 0===_ref2$leading?!0:_ref2$leading,_ref2$trailing=_ref2.trailing,trailing=void 0===_ref2$trailing?!0:_ref2$trailing;return new(obs._ofSameType(S,P))(obs,{wait:wait,leading:leading,trailing:trailing})}},function(module,exports,__webpack_require__){"use strict";module.exports=Date.now?function(){return Date.now()}:function(){return(new Date).getTime()}},function(module,exports,__webpack_require__){"use strict";var _require=__webpack_require__(26),createStream=_require.createStream,createProperty=_require.createProperty,now=__webpack_require__(42),mixin={_init:function(_ref){var _this=this,wait=_ref.wait,immediate=_ref.immediate;this._wait=Math.max(0,wait),this._immediate=immediate,this._lastAttempt=0,this._timeoutId=null,this._laterValue=null,this._endLater=!1,this._$later=function(){return _this._later()}},_free:function(){this._laterValue=null,this._$later=null},_handleValue:function(x){this._activating?this._emitValue(x):(this._lastAttempt=now(),this._immediate&&!this._timeoutId&&this._emitValue(x),this._timeoutId||(this._timeoutId=setTimeout(this._$later,this._wait)),this._immediate||(this._laterValue=x))},_handleEnd:function(){this._activating?this._emitEnd():this._timeoutId&&!this._immediate?this._endLater=!0:this._emitEnd()},_later:function(){var last=now()-this._lastAttempt;last<this._wait&&last>=0?this._timeoutId=setTimeout(this._$later,this._wait-last):(this._timeoutId=null,this._immediate||(this._emitValue(this._laterValue),this._laterValue=null),this._endLater&&this._emitEnd())}},S=createStream("debounce",mixin),P=createProperty("debounce",mixin);module.exports=function(obs,wait){var _ref2=void 0===arguments[2]?{}:arguments[2],_ref2$immediate=_ref2.immediate,immediate=void 0===_ref2$immediate?!1:_ref2$immediate;return new(obs._ofSameType(S,P))(obs,{wait:wait,immediate:immediate})}},function(module,exports,__webpack_require__){"use strict";var _require=__webpack_require__(26),createStream=_require.createStream,createProperty=_require.createProperty,mixin={_init:function(_ref){var fn=_ref.fn;this._fn=fn},_free:function(){this._fn=null},_handleValue:function(x){var fn=this._fn,result=fn(x);result.convert?this._emitError(result.error):this._emitValue(x)}},S=createStream("valuesToErrors",mixin),P=createProperty("valuesToErrors",mixin),defFn=function(x){return{convert:!0,error:x}};module.exports=function(obs){var fn=void 0===arguments[1]?defFn:arguments[1];return new(obs._ofSameType(S,P))(obs,{fn:fn})}},function(module,exports,__webpack_require__){"use strict";var _require=__webpack_require__(26),createStream=_require.createStream,createProperty=_require.createProperty,mixin={_init:function(_ref){var fn=_ref.fn;this._fn=fn},_free:function(){this._fn=null},_handleError:function(x){var fn=this._fn,result=fn(x);result.convert?this._emitValue(result.value):this._emitError(x)}},S=createStream("errorsToValues",mixin),P=createProperty("errorsToValues",mixin),defFn=function(x){return{convert:!0,value:x}};module.exports=function(obs){var fn=void 0===arguments[1]?defFn:arguments[1];return new(obs._ofSameType(S,P))(obs,{fn:fn})}},function(module,exports,__webpack_require__){"use strict";var _require=__webpack_require__(26),createStream=_require.createStream,createProperty=_require.createProperty,mixin={_init:function(_ref){var fn=_ref.fn;this._fn=fn},_free:function(){this._fn=null},_handleError:function(x){var fn=this._fn;this._emitError(fn(x))}},S=createStream("mapErrors",mixin),P=createProperty("mapErrors",mixin),id=function(x){return x};module.exports=function(obs){var fn=void 0===arguments[1]?id:arguments[1];return new(obs._ofSameType(S,P))(obs,{fn:fn})}},function(module,exports,__webpack_require__){"use strict";var _require=__webpack_require__(26),createStream=_require.createStream,createProperty=_require.createProperty,mixin={_init:function(_ref){var fn=_ref.fn;this._fn=fn},_free:function(){this._fn=null},_handleError:function(x){var fn=this._fn;fn(x)&&this._emitError(x)}},S=createStream("filterErrors",mixin),P=createProperty("filterErrors",mixin),id=function(x){return x};module.exports=function(obs){var fn=void 0===arguments[1]?id:arguments[1];return new(obs._ofSameType(S,P))(obs,{fn:fn})}},function(module,exports,__webpack_require__){"use strict";var _require=__webpack_require__(26),createStream=_require.createStream,createProperty=_require.createProperty,mixin={_handleError:function(x){this._emitError(x),this._emitEnd()}},S=createStream("endOnError",mixin),P=createProperty("endOnError",mixin);module.exports=function(obs){return new(obs._ofSameType(S,P))(obs)}},function(module,exports,__webpack_require__){"use strict";var _require=__webpack_require__(26),createStream=_require.createStream,createProperty=_require.createProperty,mixin={_handleValue:function(){}},S=createStream("skipValues",mixin),P=createProperty("skipValues",mixin);module.exports=function(obs){return new(obs._ofSameType(S,P))(obs)}},function(module,exports,__webpack_require__){"use strict";var _require=__webpack_require__(26),createStream=_require.createStream,createProperty=_require.createProperty,mixin={_handleError:function(){}},S=createStream("skipErrors",mixin),P=createProperty("skipErrors",mixin);module.exports=function(obs){return new(obs._ofSameType(S,P))(obs)}},function(module,exports,__webpack_require__){"use strict";var _require=__webpack_require__(26),createStream=_require.createStream,createProperty=_require.createProperty,mixin={_handleEnd:function(){}},S=createStream("skipEnd",mixin),P=createProperty("skipEnd",mixin);module.exports=function(obs){return new(obs._ofSameType(S,P))(obs)}},function(module,exports,__webpack_require__){"use strict";var _require=__webpack_require__(26),createStream=_require.createStream,createProperty=_require.createProperty,mixin={_init:function(_ref){var fn=_ref.fn;this._fn=fn},_free:function(){this._fn=null},_handleEnd:function(){var fn=this._fn;this._emitValue(fn()),this._emitEnd()}},S=createStream("beforeEnd",mixin),P=createProperty("beforeEnd",mixin);module.exports=function(obs,fn){return new(obs._ofSameType(S,P))(obs,{fn:fn})}},function(module,exports,__webpack_require__){"use strict";var _require=__webpack_require__(26),createStream=_require.createStream,createProperty=_require.createProperty,_require2=__webpack_require__(5),slide=_require2.slide,mixin={_init:function(_ref){var min=_ref.min,max=_ref.max;this._max=max,this._min=min,this._buff=[]},_free:function(){this._buff=null},_handleValue:function(x){this._buff=slide(this._buff,x,this._max),this._buff.length>=this._min&&this._emitValue(this._buff)}},S=createStream("slidingWindow",mixin),P=createProperty("slidingWindow",mixin);module.exports=function(obs,max){var min=void 0===arguments[2]?0:arguments[2];return new(obs._ofSameType(S,P))(obs,{min:min,max:max})}},function(module,exports,__webpack_require__){"use strict";var _require=__webpack_require__(26),createStream=_require.createStream,createProperty=_require.createProperty,mixin={_init:function(_ref){var fn=_ref.fn,flushOnEnd=_ref.flushOnEnd;this._fn=fn,this._flushOnEnd=flushOnEnd,this._buff=[]},_free:function(){this._buff=null},_flush:function(){null!==this._buff&&0!==this._buff.length&&(this._emitValue(this._buff),this._buff=[])},_handleValue:function(x){this._buff.push(x);var fn=this._fn;fn(x)||this._flush()},_handleEnd:function(){this._flushOnEnd&&this._flush(),this._emitEnd()}},S=createStream("bufferWhile",mixin),P=createProperty("bufferWhile",mixin),id=function(x){return x};module.exports=function(obs,fn){var _ref2=void 0===arguments[2]?{}:arguments[2],_ref2$flushOnEnd=_ref2.flushOnEnd,flushOnEnd=void 0===_ref2$flushOnEnd?!0:_ref2$flushOnEnd;return new(obs._ofSameType(S,P))(obs,{fn:fn||id,flushOnEnd:flushOnEnd})}},function(module,exports,__webpack_require__){"use strict";function xformForObs(obs){return{"@@transducer/step":function(res,input){return obs._emitValue(input),null},"@@transducer/result":function(res){return obs._emitEnd(),null}}}var _require=__webpack_require__(26),createStream=_require.createStream,createProperty=_require.createProperty,mixin={_init:function(_ref){var transducer=_ref.transducer;this._xform=transducer(xformForObs(this))},_free:function(){this._xform=null},_handleValue:function(x){null!==this._xform["@@transducer/step"](null,x)&&this._xform["@@transducer/result"](null)},_handleEnd:function(){this._xform["@@transducer/result"](null)}},S=createStream("transduce",mixin),P=createProperty("transduce",mixin);module.exports=function(obs,transducer){return new(obs._ofSameType(S,P))(obs,{transducer:transducer})}},function(module,exports,__webpack_require__){"use strict";var _require=__webpack_require__(26),createStream=_require.createStream,createProperty=_require.createProperty,emitter=__webpack_require__(15),mixin={_init:function(_ref){var fn=_ref.fn;this._handler=fn,this._emitter=emitter(this)},_free:function(){this._handler=null,this._emitter=null},_handleAny:function(event){this._handler(this._emitter,event)}},S=createStream("withHandler",mixin),P=createProperty("withHandler",mixin);module.exports=function(obs,fn){return new(obs._ofSameType(S,P))(obs,{fn:fn})}},function(module,exports,__webpack_require__){"use strict";function defaultErrorsCombinator(errors){for(var latestError=void 0,i=0;i<errors.length;i++)void 0!==errors[i]&&(void 0===latestError||latestError.index<errors[i].index)&&(latestError=errors[i]);return latestError.error}function Combine(active,passive,combinator){var _this=this;Stream.call(this),this._activeCount=active.length,this._sources=concat(active,passive),this._combinator=combinator?spread(combinator,this._sources.length):function(x){return x},this._aliveCount=0,this._latestValues=new Array(this._sources.length),this._latestErrors=new Array(this._sources.length),fillArray(this._latestValues,NOTHING),this._emitAfterActivation=!1,this._endAfterActivation=!1,this._latestErrorIndex=0,this._$handlers=[];for(var _loop=function(i){_this._$handlers.push(function(event){return _this._handleAny(i,event)})},i=0;i<this._sources.length;i++)_loop(i)}var Stream=__webpack_require__(6),_require=__webpack_require__(3),VALUE=_require.VALUE,ERROR=_require.ERROR,NOTHING=_require.NOTHING,_require2=__webpack_require__(2),inherit=_require2.inherit,_require3=__webpack_require__(5),concat=_require3.concat,fillArray=_require3.fillArray,_require4=__webpack_require__(21),spread=_require4.spread,never=__webpack_require__(8);inherit(Combine,Stream,{_name:"combine",_onActivation:function(){this._aliveCount=this._activeCount;for(var i=this._activeCount;i<this._sources.length;i++)this._sources[i].onAny(this._$handlers[i]);for(var i=0;i<this._activeCount;i++)this._sources[i].onAny(this._$handlers[i]);this._emitAfterActivation&&(this._emitAfterActivation=!1,this._emitIfFull()),this._endAfterActivation&&this._emitEnd()},_onDeactivation:function(){var length=this._sources.length,i=void 0;for(i=0;length>i;i++)this._sources[i].offAny(this._$handlers[i])},_emitIfFull:function(){for(var hasAllValues=!0,hasErrors=!1,length=this._latestValues.length,valuesCopy=new Array(length),errorsCopy=new Array(length),i=0;length>i;i++)valuesCopy[i]=this._latestValues[i],errorsCopy[i]=this._latestErrors[i],valuesCopy[i]===NOTHING&&(hasAllValues=!1),void 0!==errorsCopy[i]&&(hasErrors=!0);if(hasAllValues){var combinator=this._combinator;this._emitValue(combinator(valuesCopy))}hasErrors&&this._emitError(defaultErrorsCombinator(errorsCopy))},_handleAny:function(i,event){event.type===VALUE||event.type===ERROR?(event.type===VALUE&&(this._latestValues[i]=event.value,this._latestErrors[i]=void 0),event.type===ERROR&&(this._latestValues[i]=NOTHING,this._latestErrors[i]={index:this._latestErrorIndex++,error:event.value}),i<this._activeCount&&(this._activating?this._emitAfterActivation=!0:this._emitIfFull())):i<this._activeCount&&(this._aliveCount--,0===this._aliveCount&&(this._activating?this._endAfterActivation=!0:this._emitEnd()))},_clear:function(){Stream.prototype._clear.call(this),this._sources=null,this._latestValues=null,this._latestErrors=null,this._combinator=null,this._$handlers=null}}),module.exports=function(active,_x,combinator){var passive=void 0===arguments[1]?[]:arguments[1];return"function"==typeof passive&&(combinator=passive,passive=[]),0===active.length?never():new Combine(active,passive,combinator)}},function(module,exports,__webpack_require__){"use strict";function Zip(sources,combinator){var _this=this;Stream.call(this),this._buffers=map(sources,function(source){return isArray(source)?cloneArray(source):[]}),this._sources=map(sources,function(source){return isArray(source)?never():source}),this._combinator=combinator?spread(combinator,this._sources.length):function(x){return x},this._aliveCount=0,this._$handlers=[];for(var _loop=function(i){_this._$handlers.push(function(event){return _this._handleAny(i,event)})},i=0;i<this._sources.length;i++)_loop(i)}var Stream=__webpack_require__(6),_require=__webpack_require__(3),VALUE=_require.VALUE,ERROR=_require.ERROR,END=_require.END,_require2=__webpack_require__(2),inherit=_require2.inherit,_require3=__webpack_require__(5),map=_require3.map,cloneArray=_require3.cloneArray,_require4=__webpack_require__(21),spread=_require4.spread,never=__webpack_require__(8),isArray=Array.isArray||function(xs){return"[object Array]"===Object.prototype.toString.call(xs)};inherit(Zip,Stream,{_name:"zip",_onActivation:function(){for(;this._isFull();)this._emit();var length=this._sources.length;this._aliveCount=length;for(var i=0;length>i&&this._active;i++)this._sources[i].onAny(this._$handlers[i])},_onDeactivation:function(){for(var i=0;i<this._sources.length;i++)this._sources[i].offAny(this._$handlers[i])},_emit:function(){for(var values=new Array(this._buffers.length),i=0;i<this._buffers.length;i++)values[i]=this._buffers[i].shift();var combinator=this._combinator;this._emitValue(combinator(values))},_isFull:function(){for(var i=0;i<this._buffers.length;i++)if(0===this._buffers[i].length)return!1;return!0},_handleAny:function(i,event){event.type===VALUE&&(this._buffers[i].push(event.value),this._isFull()&&this._emit()),event.type===ERROR&&this._emitError(event.value),event.type===END&&(this._aliveCount--,0===this._aliveCount&&this._emitEnd())},_clear:function(){Stream.prototype._clear.call(this),this._sources=null,this._buffers=null,this._combinator=null,this._$handlers=null}}),module.exports=function(observables,combinator){return 0===observables.length?never():new Zip(observables,combinator)}},function(module,exports,__webpack_require__){"use strict";function Merge(sources){AbstractPool.call(this),this._addAll(sources),this._initialised=!0}var _require=__webpack_require__(2),inherit=_require.inherit,AbstractPool=__webpack_require__(60),never=__webpack_require__(8);inherit(Merge,AbstractPool,{_name:"merge",_onEmpty:function(){this._initialised&&this._emitEnd()}}),module.exports=function(observables){return 0===observables.length?never():new Merge(observables)}},function(module,exports,__webpack_require__){"use strict";function AbstractPool(){var _this=this,_ref=void 0===arguments[0]?{}:arguments[0],_ref$queueLim=_ref.queueLim,queueLim=void 0===_ref$queueLim?0:_ref$queueLim,_ref$concurLim=_ref.concurLim,concurLim=void 0===_ref$concurLim?-1:_ref$concurLim,_ref$drop=_ref.drop,drop=void 0===_ref$drop?"new":_ref$drop;Stream.call(this),this._queueLim=0>queueLim?-1:queueLim,this._concurLim=0>concurLim?-1:concurLim,this._drop=drop,this._queue=[],this._curSources=[],this._$handleSubAny=function(event){return _this._handleSubAny(event)},this._$endHandlers=[],this._currentlyAdding=null,0===this._concurLim&&this._emitEnd()}var Stream=__webpack_require__(6),_require=__webpack_require__(3),VALUE=_require.VALUE,ERROR=_require.ERROR,_require2=__webpack_require__(2),inherit=_require2.inherit,_require3=__webpack_require__(5),concat=_require3.concat,forEach=_require3.forEach,findByPred=_require3.findByPred,find=_require3.find,remove=_require3.remove,cloneArray=_require3.cloneArray,id=function(x){return x};inherit(AbstractPool,Stream,{_name:"abstractPool",_add:function(obj,toObs){toObs=toObs||id,-1===this._concurLim||this._curSources.length<this._concurLim?this._addToCur(toObs(obj)):-1===this._queueLim||this._queue.length<this._queueLim?this._addToQueue(toObs(obj)):"old"===this._drop&&(this._removeOldest(),this._add(obj,toObs))},_addAll:function(obss){var _this2=this;forEach(obss,function(obs){return _this2._add(obs)})},_remove:function(obs){-1===this._removeCur(obs)&&this._removeQueue(obs)},_addToQueue:function(obs){this._queue=concat(this._queue,[obs])},_addToCur:function(obs){if(this._active){if(!obs._alive)return void(obs._currentEvent&&this._emit(obs._currentEvent.type,obs._currentEvent.value));this._currentlyAdding=obs,obs.onAny(this._$handleSubAny),this._currentlyAdding=null,obs._alive&&(this._curSources=concat(this._curSources,[obs]),this._active&&this._subToEnd(obs))}else this._curSources=concat(this._curSources,[obs])},_subToEnd:function(obs){var _this3=this,onEnd=function(){return _this3._removeCur(obs)};this._$endHandlers.push({obs:obs,handler:onEnd}),obs.onEnd(onEnd)},_subscribe:function(obs){obs.onAny(this._$handleSubAny),this._active&&this._subToEnd(obs)},_unsubscribe:function(obs){obs.offAny(this._$handleSubAny);var onEndI=findByPred(this._$endHandlers,function(obj){return obj.obs===obs});-1!==onEndI&&(obs.offEnd(this._$endHandlers[onEndI].handler),this._$endHandlers.splice(onEndI,1))},_handleSubAny:function(event){event.type===VALUE?this._emitValue(event.value):event.type===ERROR&&this._emitError(event.value)},_removeQueue:function(obs){var index=find(this._queue,obs);return this._queue=remove(this._queue,index),index},_removeCur:function(obs){this._active&&this._unsubscribe(obs);var index=find(this._curSources,obs);return this._curSources=remove(this._curSources,index),-1!==index&&(0!==this._queue.length?this._pullQueue():0===this._curSources.length&&this._onEmpty()),index},_removeOldest:function(){this._removeCur(this._curSources[0])},_pullQueue:function(){0!==this._queue.length&&(this._queue=cloneArray(this._queue),this._addToCur(this._queue.shift()))},_onActivation:function(){for(var i=0,sources=this._curSources;i<sources.length&&this._active;i++)this._subscribe(sources[i])},_onDeactivation:function(){for(var i=0,sources=this._curSources;i<sources.length;i++)this._unsubscribe(sources[i]);null!==this._currentlyAdding&&this._unsubscribe(this._currentlyAdding)},_isEmpty:function(){return 0===this._curSources.length},_onEmpty:function(){},_clear:function(){Stream.prototype._clear.call(this),this._queue=null,this._curSources=null,this._$handleSubAny=null,this._$endHandlers=null}}),module.exports=AbstractPool},function(module,exports,__webpack_require__){"use strict";var repeat=__webpack_require__(62);module.exports=function(observables){return repeat(function(index){return observables.length>index?observables[index]:!1}).setName("concat")}},function(module,exports,__webpack_require__){"use strict";function S(generator){var _this=this;Stream.call(this),this._generator=generator,this._source=null,this._inLoop=!1,this._iteration=0,this._$handleAny=function(event){return _this._handleAny(event)}}var _require=__webpack_require__(2),inherit=_require.inherit,Stream=__webpack_require__(6),_require2=__webpack_require__(3),END=_require2.END;inherit(S,Stream,{_name:"repeat",_handleAny:function(event){event.type===END?(this._source=null,this._getSource()):this._emit(event.type,event.value)},_getSource:function(){if(!this._inLoop){this._inLoop=!0;for(var generator=this._generator;null===this._source&&this._alive&&this._active;)this._source=generator(this._iteration++),this._source?this._source.onAny(this._$handleAny):this._emitEnd();this._inLoop=!1}},_onActivation:function(){this._source?this._source.onAny(this._$handleAny):this._getSource()},_onDeactivation:function(){this._source&&this._source.offAny(this._$handleAny)},_clear:function(){Stream.prototype._clear.call(this),this._generator=null,this._source=null,this._$handleAny=null}}),module.exports=function(generator){return new S(generator)}},function(module,exports,__webpack_require__){"use strict";function Pool(){AbstractPool.call(this)}var _require=__webpack_require__(2),inherit=_require.inherit,AbstractPool=__webpack_require__(60);inherit(Pool,AbstractPool,{_name:"pool",plug:function(obs){return this._add(obs),this},unplug:function(obs){return this._remove(obs),this}}),module.exports=Pool},function(module,exports,__webpack_require__){"use strict";function FlatMap(source,fn,options){var _this=this;AbstractPool.call(this,options),this._source=source,this._fn=fn,this._mainEnded=!1,this._lastCurrent=null,this._$handleMain=function(event){return _this._handleMain(event)}}var _require=__webpack_require__(3),VALUE=_require.VALUE,ERROR=_require.ERROR,END=_require.END,_require2=__webpack_require__(2),inherit=_require2.inherit,AbstractPool=__webpack_require__(60);inherit(FlatMap,AbstractPool,{_onActivation:function(){AbstractPool.prototype._onActivation.call(this),this._active&&this._source.onAny(this._$handleMain)},_onDeactivation:function(){AbstractPool.prototype._onDeactivation.call(this),this._source.offAny(this._$handleMain),this._hadNoEvSinceDeact=!0},_handleMain:function(event){if(event.type===VALUE){var sameCurr=this._activating&&this._hadNoEvSinceDeact&&this._lastCurrent===event.value;sameCurr||this._add(event.value,this._fn),this._lastCurrent=event.value,this._hadNoEvSinceDeact=!1}event.type===ERROR&&this._emitError(event.value),event.type===END&&(this._isEmpty()?this._emitEnd():this._mainEnded=!0)},_onEmpty:function(){this._mainEnded&&this._emitEnd()},_clear:function(){AbstractPool.prototype._clear.call(this),this._source=null,this._lastCurrent=null,this._$handleMain=null}}),module.exports=FlatMap},function(module,exports,__webpack_require__){"use strict";function FlatMapErrors(source,fn){FlatMap.call(this,source,fn)}var _require=__webpack_require__(3),VALUE=_require.VALUE,ERROR=_require.ERROR,END=_require.END,_require2=__webpack_require__(2),inherit=_require2.inherit,FlatMap=__webpack_require__(64);inherit(FlatMapErrors,FlatMap,{_handleMain:function(event){if(event.type===ERROR){var sameCurr=this._activating&&this._hadNoEvSinceDeact&&this._lastCurrent===event.value;sameCurr||this._add(event.value,this._fn),this._lastCurrent=event.value,this._hadNoEvSinceDeact=!1}event.type===VALUE&&this._emitValue(event.value),event.type===END&&(this._isEmpty()?this._emitEnd():this._mainEnded=!0)}}),module.exports=FlatMapErrors},function(module,exports,__webpack_require__){"use strict";var _require=__webpack_require__(67),createStream=_require.createStream,createProperty=_require.createProperty,_require2=__webpack_require__(3),NOTHING=_require2.NOTHING,mixin={_handlePrimaryValue:function(x){this._lastSecondary!==NOTHING&&this._lastSecondary&&this._emitValue(x)},_handleSecondaryEnd:function(){this._lastSecondary!==NOTHING&&this._lastSecondary||this._emitEnd()}},S=createStream("filterBy",mixin),P=createProperty("filterBy",mixin);module.exports=function(primary,secondary){return new(primary._ofSameType(S,P))(primary,secondary)}},function(module,exports,__webpack_require__){"use strict";function createConstructor(BaseClass,name){return function(primary,secondary,options){var _this=this;BaseClass.call(this),this._primary=primary,this._secondary=secondary,this._name=""+primary._name+"."+name,this._lastSecondary=NOTHING,this._$handleSecondaryAny=function(event){return _this._handleSecondaryAny(event)},this._$handlePrimaryAny=function(event){return _this._handlePrimaryAny(event)},this._init(options)}}function createClassMethods(BaseClass){return{_init:function(options){},_free:function(){},_handlePrimaryValue:function(x){this._emitValue(x)},_handlePrimaryError:function(x){this._emitError(x)},_handlePrimaryEnd:function(){this._emitEnd()},_handleSecondaryValue:function(x){this._lastSecondary=x},_handleSecondaryError:function(x){this._emitError(x)},_handleSecondaryEnd:function(){},_handlePrimaryAny:function(event){switch(event.type){case VALUE:return this._handlePrimaryValue(event.value);case ERROR:return this._handlePrimaryError(event.value);case END:return this._handlePrimaryEnd(event.value)}},_handleSecondaryAny:function(event){switch(event.type){case VALUE:return this._handleSecondaryValue(event.value);case ERROR:return this._handleSecondaryError(event.value);case END:this._handleSecondaryEnd(event.value),this._removeSecondary()}},_removeSecondary:function(){null!==this._secondary&&(this._secondary.offAny(this._$handleSecondaryAny),this._$handleSecondaryAny=null,this._secondary=null)},_onActivation:function(){null!==this._secondary&&this._secondary.onAny(this._$handleSecondaryAny),this._active&&this._primary.onAny(this._$handlePrimaryAny)},_onDeactivation:function(){null!==this._secondary&&this._secondary.offAny(this._$handleSecondaryAny),this._primary.offAny(this._$handlePrimaryAny)},_clear:function(){BaseClass.prototype._clear.call(this),this._primary=null,this._secondary=null,this._lastSecondary=null,this._$handleSecondaryAny=null,this._$handlePrimaryAny=null,this._free()}}}function createStream(name,mixin){var S=createConstructor(Stream,name);return inherit(S,Stream,createClassMethods(Stream),mixin),S}function createProperty(name,mixin){var P=createConstructor(Property,name);return inherit(P,Property,createClassMethods(Property),mixin),P}var Stream=__webpack_require__(6),Property=__webpack_require__(7),_require=__webpack_require__(2),inherit=_require.inherit,_require2=__webpack_require__(3),VALUE=_require2.VALUE,ERROR=_require2.ERROR,END=_require2.END,NOTHING=_require2.NOTHING;module.exports={createStream:createStream,createProperty:createProperty}},function(module,exports,__webpack_require__){"use strict";var combine=__webpack_require__(57),id2=function(_,x){return x};module.exports=function(passive,active,combinator){var _combinator=combinator?function(a,b){return combinator(b,a)}:id2;return combine([active],[passive],_combinator).setName(passive,"sampledBy")}},function(module,exports,__webpack_require__){"use strict";var _require=__webpack_require__(67),createStream=_require.createStream,createProperty=_require.createProperty,_require2=__webpack_require__(3),NOTHING=_require2.NOTHING,mixin={
_handlePrimaryValue:function(x){this._lastSecondary!==NOTHING&&this._emitValue(x)},_handleSecondaryEnd:function(){this._lastSecondary===NOTHING&&this._emitEnd()}},S=createStream("skipUntilBy",mixin),P=createProperty("skipUntilBy",mixin);module.exports=function(primary,secondary){return new(primary._ofSameType(S,P))(primary,secondary)}},function(module,exports,__webpack_require__){"use strict";var _require=__webpack_require__(67),createStream=_require.createStream,createProperty=_require.createProperty,mixin={_handleSecondaryValue:function(x){this._emitEnd()}},S=createStream("takeUntilBy",mixin),P=createProperty("takeUntilBy",mixin);module.exports=function(primary,secondary){return new(primary._ofSameType(S,P))(primary,secondary)}},function(module,exports,__webpack_require__){"use strict";var _require=__webpack_require__(67),createStream=_require.createStream,createProperty=_require.createProperty,mixin={_init:function(){var _ref=void 0===arguments[0]?{}:arguments[0],_ref$flushOnEnd=_ref.flushOnEnd,flushOnEnd=void 0===_ref$flushOnEnd?!0:_ref$flushOnEnd;this._buff=[],this._flushOnEnd=flushOnEnd},_free:function(){this._buff=null},_flush:function(){null!==this._buff&&(this._emitValue(this._buff),this._buff=[])},_handlePrimaryEnd:function(){this._flushOnEnd&&this._flush(),this._emitEnd()},_onActivation:function(){this._primary.onAny(this._$handlePrimaryAny),this._alive&&null!==this._secondary&&this._secondary.onAny(this._$handleSecondaryAny)},_handlePrimaryValue:function(x){this._buff.push(x)},_handleSecondaryValue:function(x){this._flush()},_handleSecondaryEnd:function(x){this._flushOnEnd||this._emitEnd()}},S=createStream("bufferBy",mixin),P=createProperty("bufferBy",mixin);module.exports=function(primary,secondary,options){return new(primary._ofSameType(S,P))(primary,secondary,options)}},function(module,exports,__webpack_require__){"use strict";var _require=__webpack_require__(67),createStream=_require.createStream,createProperty=_require.createProperty,_require2=__webpack_require__(3),NOTHING=_require2.NOTHING,mixin={_init:function(){var _ref=void 0===arguments[0]?{}:arguments[0],_ref$flushOnEnd=_ref.flushOnEnd,flushOnEnd=void 0===_ref$flushOnEnd?!0:_ref$flushOnEnd;this._buff=[],this._flushOnEnd=flushOnEnd},_free:function(){this._buff=null},_flush:function(){null!==this._buff&&0!==this._buff.length&&(this._emitValue(this._buff),this._buff=[])},_handlePrimaryEnd:function(){this._flushOnEnd&&this._flush(),this._emitEnd()},_handlePrimaryValue:function(x){this._buff.push(x),this._lastSecondary===NOTHING||this._lastSecondary||this._flush()},_handleSecondaryEnd:function(x){this._flushOnEnd||this._lastSecondary!==NOTHING&&!this._lastSecondary||this._emitEnd()}},S=createStream("bufferWhileBy",mixin),P=createProperty("bufferWhileBy",mixin);module.exports=function(primary,secondary,options){return new(primary._ofSameType(S,P))(primary,secondary,options)}},function(module,exports,__webpack_require__){"use strict";var merge=__webpack_require__(59),map=__webpack_require__(29),skipDuplicates=__webpack_require__(36),toProperty=__webpack_require__(25),f=function(){return!1},t=function(){return!0};module.exports=function(a,b){var result=merge([map(a,t),map(b,f)]);return result=skipDuplicates(result),result=toProperty(result,f),result.setName(a,"awaiting")}},function(module,exports,__webpack_require__){"use strict";function Emitter(){Stream.call(this)}var _require=__webpack_require__(2),inherit=_require.inherit,Stream=__webpack_require__(6);inherit(Emitter,Stream,{_name:"emitter",emit:function(x){return this._emitValue(x),this},error:function(x){return this._emitError(x),this},end:function(){return this._emitEnd(),this},emitEvent:function(event){this._emit(event.type,event.value)}}),module.exports=Emitter},function(module,exports,__webpack_require__){"use strict";function Bus(){AbstractPool.call(this)}var _require=__webpack_require__(2),inherit=_require.inherit,AbstractPool=__webpack_require__(60);inherit(Bus,AbstractPool,{_name:"bus",plug:function(obs){return this._add(obs),this},unplug:function(obs){return this._remove(obs),this},emit:function(x){return this._emitValue(x),this},error:function(x){return this._emitError(x),this},end:function(){return this._emitEnd(),this},emitEvent:function(event){this._emit(event.type,event.value)}}),module.exports=Bus},function(module,exports,__webpack_require__){"use strict";var _require=__webpack_require__(26),createStream=_require.createStream,createProperty=_require.createProperty,_require2=__webpack_require__(3),NOTHING=_require2.NOTHING,mixin={_init:function(_ref){var fn=_ref.fn,seed=_ref.seed;this._fn=fn,this._result=seed},_free:function(){this._fn=null,this._result=null},_handleValue:function(x){var fn=this._fn;this._result=this._result===NOTHING?x:fn(this._result,x)},_handleEnd:function(){this._result!==NOTHING&&this._emitValue(this._result),this._emitEnd()}},S=createStream("reduce",mixin),P=createProperty("reduce",mixin);module.exports=function(obs,fn){var seed=void 0===arguments[2]?NOTHING:arguments[2];return new(obs._ofSameType(S,P))(obs,{fn:fn,seed:seed})}},function(module,exports,__webpack_require__){"use strict";var combine=__webpack_require__(57),_require=__webpack_require__(21),apply=_require.apply,_require2=__webpack_require__(5),circleShift=_require2.circleShift;module.exports=function(passive,active,combinator){var _combinator=combinator;return passive.length>0&&(_combinator=function(){var args=circleShift(arguments,passive.length);return combinator?apply(combinator,null,args):args}),combine(active,passive,_combinator).setName("sampledBy")}},function(module,exports,__webpack_require__){"use strict";var timeBased=__webpack_require__(10),_require=__webpack_require__(5),cloneArray=_require.cloneArray,S=timeBased({_name:"repeatedly",_init:function(_ref){var xs=_ref.xs;this._xs=cloneArray(xs),this._i=-1},_onTick:function(){this._xs.length>0&&(this._i=(this._i+1)%this._xs.length,this._emitValue(this._xs[this._i]))}});module.exports=function(wait,xs){return new S(wait,{xs:xs})}},function(module,exports,__webpack_require__){"use strict";var map=__webpack_require__(29);module.exports=function(obs,x){return map(obs,function(){return x}).setName(obs,"mapTo")}},function(module,exports,__webpack_require__){"use strict";var map=__webpack_require__(29);module.exports=function(obs,fn){return map(obs,function(x){return fn(x),x}).setName(obs,"tap")}},function(module,exports,__webpack_require__){"use strict";var map=__webpack_require__(29);module.exports=function(obs,propName){return map(obs,function(x){return x[propName]}).setName(obs,"pluck")}},function(module,exports,__webpack_require__){"use strict";var map=__webpack_require__(29),_require=__webpack_require__(21),apply=_require.apply;module.exports=function(obs,methodName,args){var fn=0===args.length?function(x){return x[methodName]()}:function(x){return apply(x[methodName],x,args)};return map(obs,fn).setName(obs,"invoke")}},function(module,exports,__webpack_require__){"use strict";var map=__webpack_require__(29),now=__webpack_require__(42);module.exports=function(obs){return map(obs,function(x){return{value:x,time:now()}}).setName(obs,"timestamp")}},function(module,exports,__webpack_require__){"use strict";function fn(){var i=void 0;for(i=0;i<arguments.length;i++)if(!arguments[i])return arguments[i];return arguments[i-1]}var combine=__webpack_require__(57);module.exports=function(observables){return combine(observables,[],fn).setName("and")}},function(module,exports,__webpack_require__){"use strict";function fn(){var i=void 0;for(i=0;i<arguments.length;i++)if(arguments[i])return arguments[i];return arguments[i-1]}var combine=__webpack_require__(57);module.exports=function(observables){return combine(observables,[],fn).setName("or")}},function(module,exports,__webpack_require__){"use strict";var map=__webpack_require__(29);module.exports=function(obs){return map(obs,function(x){return!x}).setName(obs,"not")}},function(module,exports,__webpack_require__){"use strict";var _require=__webpack_require__(67),createStream=_require.createStream,createProperty=_require.createProperty,_require2=__webpack_require__(3),NOTHING=_require2.NOTHING,mixin={_handlePrimaryValue:function(x){this._lastSecondary!==NOTHING&&this._emitValue(x)},_handleSecondaryValue:function(x){this._lastSecondary=x,this._lastSecondary||this._emitEnd()},_handleSecondaryEnd:function(){this._lastSecondary===NOTHING&&this._emitEnd()}},S=createStream("takeWhileBy",mixin),P=createProperty("takeWhileBy",mixin);module.exports=function(primary,secondary){return new(primary._ofSameType(S,P))(primary,secondary)}},function(module,exports,__webpack_require__){"use strict";var _require=__webpack_require__(67),createStream=_require.createStream,createProperty=_require.createProperty,mixin={_init:function(){this._hasFalseyFromSecondary=!1},_handlePrimaryValue:function(x){this._hasFalseyFromSecondary&&this._emitValue(x)},_handleSecondaryValue:function(x){this._hasFalseyFromSecondary=this._hasFalseyFromSecondary||!x},_handleSecondaryEnd:function(){this._hasFalseyFromSecondary||this._emitEnd()}},S=createStream("skipWhileBy",mixin),P=createProperty("skipWhileBy",mixin);module.exports=function(primary,secondary){return new(primary._ofSameType(S,P))(primary,secondary)}}])});


},{}],51:[function(require,module,exports){
"use strict";var _interopRequireDefault=require("babel-runtime/helpers/interop-require-default")["default"];Object.defineProperty(exports,"__esModule",{value:!0});var _immutable=require("immutable"),_immutable2=_interopRequireDefault(_immutable),_core=require("../core"),_utilities=require("../utilities"),notEmpty=function(str){return str.trim().length},_create=function(text){return _immutable2["default"].Map({id:_utilities.uuid(),completed:!1,text:text})},Actions=_core.createActions({create:function(action){return action.filter(notEmpty).map(_create)},updateText:null,toggleComplete:null,toggleCompleteAll:null,destroy:null,destroyCompleted:null,setFilter:null});exports["default"]=Actions,module.exports=exports["default"];


},{"../core":58,"../utilities":74,"babel-runtime/helpers/interop-require-default":11,"immutable":49}],52:[function(require,module,exports){
"use strict";Object.defineProperty(exports,"__esModule",{value:!0});var _core=require("../core"),Constants=_core.createConstants(["FILTER_ALL","FILTER_ACTIVE","FILTER_COMPLETE"]);exports["default"]=Constants,module.exports=exports["default"];


},{"../core":58}],53:[function(require,module,exports){
"use strict";function connect(Store){var modifier=void 0===arguments[1]?function(a){return a}:arguments[1];return{getInitialState:function(){return{contents:Store.map(modifier).toProperty()}},componentDidMount:function(){var _this=this;this._storeStream=Store.map(modifier),this._storeStreamHandler=function(state){return _this.setState(state)},this._storeStream.onValue(this._storeStreamHandler)},componentWillUnmount:function(){this._storeStream.offValue(this._storeStreamHandler)}}}Object.defineProperty(exports,"__esModule",{value:!0}),exports["default"]=connect,module.exports=exports["default"];


},{}],54:[function(require,module,exports){
"use strict";function createAction(actionName,transducer){transducer=transducer||function(x){return x};var Pool=_kefir2["default"].pool(),functor=function(value){return Pool.plug(_kefir2["default"].constant(value))},Stream=transducer(Pool);return functor=_utilities.inherit(Stream,functor),functor._name=actionName,functor}var _interopRequireDefault=require("babel-runtime/helpers/interop-require-default")["default"];Object.defineProperty(exports,"__esModule",{value:!0}),exports["default"]=createAction;var _kefir=require("kefir"),_kefir2=_interopRequireDefault(_kefir),_utilities=require("./utilities");module.exports=exports["default"];


},{"./utilities":62,"babel-runtime/helpers/interop-require-default":11,"kefir":50}],55:[function(require,module,exports){
"use strict";function createActions(){for(var _len=arguments.length,args=Array(_len),_key=0;_len>_key;_key++)args[_key]=arguments[_key];var flatArgs=_utilities.flatten(args),objKeyValues=flatArgs.filter(_utilities.isObject).map(_utilities.objectToKV).reduce(_utilities.flattenShallow),stringKeyValues=flatArgs.filter(_utilities.notObject).map(_utilities.keyToKV);return stringKeyValues.concat(objKeyValues).reduce(_utilities.kvToObjectWithModifier(_.createAction))}var _interopRequireDefault=require("babel-runtime/helpers/interop-require-default")["default"];Object.defineProperty(exports,"__esModule",{value:!0}),exports["default"]=createActions;var _kefir=require("kefir"),_kefir2=_interopRequireDefault(_kefir),_=require("./"),_utilities=require("./utilities");module.exports=exports["default"];


},{"./":58,"./utilities":62,"babel-runtime/helpers/interop-require-default":11,"kefir":50}],56:[function(require,module,exports){
"use strict";function createConstants(){for(var _len=arguments.length,args=Array(_len),_key=0;_len>_key;_key++)args[_key]=arguments[_key];return _utilities.flatten(args).reduce(function(acc,key){return(acc[key]=key)&&acc},{})}Object.defineProperty(exports,"__esModule",{value:!0}),exports["default"]=createConstants;var _utilities=require("./utilities");module.exports=exports["default"];


},{"./utilities":62}],57:[function(require,module,exports){
"use strict";function actionsToStreams(){var actions=void 0===arguments[0]?{}:arguments[0];return _Object$keys(actions).map(function(key){return actions[key]})}function mutateOrPassthrough(_ref){var _ref2=_toArray(_ref),context=_ref2[0],key=_ref2[1],content=_ref2[2],rest=_ref2.slice(3),handler=context[key];return _utilities.isFunction(handler)&&[content,handler.apply(void 0,[content].concat(_toConsumableArray(rest)))]||[content,content]}function diff(_ref3){var _ref32=_slicedToArray(_ref3,2),currentState=_ref32[0],nextState=_ref32[1];return!_immutable2["default"].is(currentState,nextState)}function createStore(obj){var Store=_Object$create(obj),Content=Store.type&&Store.type()||_immutable2["default"].OrderedMap(),ContentPool=_kefir2["default"].pool(),Actions=actionsToStreams(Store.actions).map(function(action){return _kefir2["default"].combine([_kefir2["default"].constant(Store),_kefir2["default"].constant("on"+_utilities.toSentenceCase(action._name)),action],[ContentPool.sampledBy(action)],function(a,b,c,d){return[a,b,d,c]})}),Mutate=_kefir2["default"].merge(Actions).map(mutateOrPassthrough).filter(diff).onValue(function(_ref4){var _ref42=_slicedToArray(_ref4,2),nextState=(_ref42[0],_ref42[1]);return ContentPool.plug(_kefir2["default"].constant(nextState))}),Modifier=ContentPool;if(Store.modifier){var Prop=Store.modifier.toProperty(function(){return void 0});Modifier=_kefir2["default"].combine([_kefir2["default"].constant(Store),_kefir2["default"].constant(Store.modifier._name),ContentPool,Prop]).map(mutateOrPassthrough)}ContentPool.plug(_kefir2["default"].constant(Content));var Stream=Modifier.concat(Mutate);return Store=_utilities.inherit(Stream,Store)}var _toConsumableArray=require("babel-runtime/helpers/to-consumable-array")["default"],_toArray=require("babel-runtime/helpers/to-array")["default"],_slicedToArray=require("babel-runtime/helpers/sliced-to-array")["default"],_Symbol=require("babel-runtime/core-js/symbol")["default"],_Object$keys=require("babel-runtime/core-js/object/keys")["default"],_Object$create=require("babel-runtime/core-js/object/create")["default"],_interopRequireDefault=require("babel-runtime/helpers/interop-require-default")["default"];Object.defineProperty(exports,"__esModule",{value:!0}),exports["default"]=createStore;var _immutable=require("immutable"),_immutable2=_interopRequireDefault(_immutable),_kefir=require("kefir"),_kefir2=_interopRequireDefault(_kefir),_utilities=require("./utilities"),contentKey=_Symbol("contents");module.exports=exports["default"];


},{"./utilities":62,"babel-runtime/core-js/object/create":6,"babel-runtime/core-js/object/keys":8,"babel-runtime/core-js/symbol":9,"babel-runtime/helpers/interop-require-default":11,"babel-runtime/helpers/sliced-to-array":13,"babel-runtime/helpers/to-array":14,"babel-runtime/helpers/to-consumable-array":15,"immutable":49,"kefir":50}],58:[function(require,module,exports){
"use strict";var _interopRequire=require("babel-runtime/helpers/interop-require")["default"];Object.defineProperty(exports,"__esModule",{value:!0});var _connect=require("./connect");exports.connect=_interopRequire(_connect);var _createAction=require("./createAction");exports.createAction=_interopRequire(_createAction);var _createActions=require("./createActions");exports.createActions=_interopRequire(_createActions);var _createConstants=require("./createConstants");exports.createConstants=_interopRequire(_createConstants);var _createStore=require("./createStore");exports.createStore=_interopRequire(_createStore);


},{"./connect":53,"./createAction":54,"./createActions":55,"./createConstants":56,"./createStore":57,"babel-runtime/helpers/interop-require":12}],59:[function(require,module,exports){
"use strict";function createObj(proto){var F=new Function;return F.prototype=proto,new F}Object.defineProperty(exports,"__esModule",{value:!0}),exports["default"]=createObj,module.exports=exports["default"];


},{}],60:[function(require,module,exports){
"use strict";function flatten(arr){return arr.reduce(function(acc,item){return Array.isArray(item)?acc.concat(flatten(item)):acc.concat(item)},[])}Object.defineProperty(exports,"__esModule",{value:!0}),exports["default"]=flatten,module.exports=exports["default"];


},{}],61:[function(require,module,exports){
"use strict";function flattenShallow(arr,item){return arr.concat(item)}Object.defineProperty(exports,"__esModule",{value:!0}),exports["default"]=flattenShallow,module.exports=exports["default"];


},{}],62:[function(require,module,exports){
"use strict";var _interopRequire=require("babel-runtime/helpers/interop-require")["default"];Object.defineProperty(exports,"__esModule",{value:!0});var _createObj=require("./createObj");exports.createObj=_interopRequire(_createObj);var _flatten=require("./flatten");exports.flatten=_interopRequire(_flatten);var _flattenShallow=require("./flattenShallow");exports.flattenShallow=_interopRequire(_flattenShallow);var _inherit=require("./inherit");exports.inherit=_interopRequire(_inherit);var _isFunction=require("./isFunction");exports.isFunction=_interopRequire(_isFunction);var _isObject=require("./isObject");exports.isObject=_interopRequire(_isObject);var _keyToKV=require("./keyToKV");exports.keyToKV=_interopRequire(_keyToKV);var _kvToObjectWithModifier=require("./kvToObjectWithModifier");exports.kvToObjectWithModifier=_interopRequire(_kvToObjectWithModifier);var _kvToObject=require("./kvToObject");exports.kvToObject=_interopRequire(_kvToObject);var _notObject=require("./notObject");exports.notObject=_interopRequire(_notObject);var _objectToKV=require("./objectToKV");exports.objectToKV=_interopRequire(_objectToKV);var _toSentenceCase=require("./toSentenceCase");exports.toSentenceCase=_interopRequire(_toSentenceCase);


},{"./createObj":59,"./flatten":60,"./flattenShallow":61,"./inherit":63,"./isFunction":64,"./isObject":65,"./keyToKV":66,"./kvToObject":67,"./kvToObjectWithModifier":68,"./notObject":69,"./objectToKV":70,"./toSentenceCase":71,"babel-runtime/helpers/interop-require":12}],63:[function(require,module,exports){
"use strict";function inherit(stream,obj){var proto=_.createObj(stream.constructor.prototype);for(var fn in proto)obj[fn]=_.isFunction(proto[fn])?proto[fn].bind(stream):proto[fn];return obj}Object.defineProperty(exports,"__esModule",{value:!0}),exports["default"]=inherit;var _=require("./");module.exports=exports["default"];


},{"./":62}],64:[function(require,module,exports){
"use strict";function isFunction(fn){return"function"==typeof fn}Object.defineProperty(exports,"__esModule",{value:!0}),exports["default"]=isFunction,module.exports=exports["default"];


},{}],65:[function(require,module,exports){
"use strict";function isObject(obj){return"object"==typeof obj}Object.defineProperty(exports,"__esModule",{value:!0}),exports["default"]=isObject,module.exports=exports["default"];


},{}],66:[function(require,module,exports){
"use strict";function keyToKV(k){return[k,void 0]}Object.defineProperty(exports,"__esModule",{value:!0}),exports["default"]=keyToKV,module.exports=exports["default"];


},{}],67:[function(require,module,exports){
"use strict";Object.defineProperty(exports,"__esModule",{value:!0});var _=require("./");exports["default"]=_.kvToObjectWithModifier(),module.exports=exports["default"];


},{"./":62}],68:[function(require,module,exports){
"use strict";function kvToObjectWithModifier(){var fn=void 0===arguments[0]?function(k,v){return v}:arguments[0];return function(obj,_ref2){var _ref22=_slicedToArray(_ref2,2),k=_ref22[0],v=_ref22[1];return obj=Array.isArray(obj)?_defineProperty({},obj[0],fn(obj[0],obj[1])):obj,obj[k]=fn(k,v),obj}}var _defineProperty=require("babel-runtime/helpers/define-property")["default"],_slicedToArray=require("babel-runtime/helpers/sliced-to-array")["default"];Object.defineProperty(exports,"__esModule",{value:!0}),exports["default"]=kvToObjectWithModifier,module.exports=exports["default"];


},{"babel-runtime/helpers/define-property":10,"babel-runtime/helpers/sliced-to-array":13}],69:[function(require,module,exports){
"use strict";function notObject(obj){return!_.isObject(obj)}Object.defineProperty(exports,"__esModule",{value:!0}),exports["default"]=notObject;var _=require("./");module.exports=exports["default"];


},{"./":62}],70:[function(require,module,exports){
"use strict";function objectToKV(obj){return _Object$keys(obj).map(function(key){return[key,obj[key]]})}var _Object$keys=require("babel-runtime/core-js/object/keys")["default"];Object.defineProperty(exports,"__esModule",{value:!0}),exports["default"]=objectToKV,module.exports=exports["default"];


},{"babel-runtime/core-js/object/keys":8}],71:[function(require,module,exports){
"use strict";function toSentenceCase(str){return str.substr(0,1).toUpperCase()+str.substr(1)}Object.defineProperty(exports,"__esModule",{value:!0}),exports["default"]=toSentenceCase,module.exports=exports["default"];


},{}],72:[function(require,module,exports){
"use strict";var _interopRequireDefault=require("babel-runtime/helpers/interop-require-default")["default"];Object.defineProperty(exports,"__esModule",{value:!0});var _actions=require("../actions"),_actions2=_interopRequireDefault(_actions),_Immutable=require("Immutable"),_Immutable2=_interopRequireDefault(_Immutable),_constants=require("../constants"),_constants2=_interopRequireDefault(_constants),_core=require("../core"),isComplete=function(todo){return todo.get("complete")},TodoStore=_core.createStore({actions:_actions2["default"],modifier:_actions2["default"].setFilter,onCreate:function(todos,todo){return todos.set(todo.get("id"),todo)},onUpdateText:function(todos,todo){return todos.setIn([todo.id,"text"],todo.text)},onToggleComplete:function(todos,todo){return todos.setIn([todo.id,"complete"],!todo.complete)},onToggleCompleteAll:function(todos){return todos.map(function(todo){return todo.set("complete",!0)})},onDestroy:function(todos,todo){return todos["delete"](todo.id)},onDestroyCompleted:function(todos){return todos.filterNot(function(todo){return todo.get("complete")})},setFilter:function(todos,filter){switch(filter){case _constants2["default"].FILTER_ACTIVE:return todos.filterNot(isComplete);case _constants2["default"].FILTER_COMPLETE:return todos.filter(isComplete);default:return todos}}});exports["default"]=TodoStore,module.exports=exports["default"];


},{"../actions":51,"../constants":52,"../core":58,"Immutable":2,"babel-runtime/helpers/interop-require-default":11}],73:[function(require,module,exports){
"use strict";function classSet(obj){return _Object$keys(obj).filter(function(key){return obj[key]}).join(" ")}var _Object$keys=require("babel-runtime/core-js/object/keys")["default"];Object.defineProperty(exports,"__esModule",{value:!0}),exports["default"]=classSet,module.exports=exports["default"];


},{"babel-runtime/core-js/object/keys":8}],74:[function(require,module,exports){
"use strict";var _interopRequire=require("babel-runtime/helpers/interop-require")["default"];Object.defineProperty(exports,"__esModule",{value:!0});var _classSet=require("./classSet");exports.classSet=_interopRequire(_classSet);var _uuid=require("./uuid");exports.uuid=_interopRequire(_uuid);


},{"./classSet":73,"./uuid":75,"babel-runtime/helpers/interop-require":12}],75:[function(require,module,exports){
"use strict";function s4(){return Math.floor(65536*(1+Math.random())).toString(16).substring(1)}function uuid(){var p4="4"+s4().slice(-3),p5=(3&parseInt(s4().slice(0,1),16)|8).toString(16)+s4().slice(-3);return""+s4()+s4()+"-"+s4()+"-"+p4+"-"+p5+"-"+s4()+s4()+s4()}Object.defineProperty(exports,"__esModule",{value:!0}),exports["default"]=uuid,module.exports=exports["default"];


},{}]},{},[1])
//# sourceMappingURL=data:application/json;base64,
